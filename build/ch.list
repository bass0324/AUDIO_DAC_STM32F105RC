
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000160 <Reset_Handler>:
 8000160:	b672      	cpsid	i
 8000162:	4823      	ldr	r0, [pc, #140]	; (80001f0 <endfiniloop+0x6>)
 8000164:	f380 8809 	msr	PSP, r0
 8000168:	2002      	movs	r0, #2
 800016a:	f380 8814 	msr	CONTROL, r0
 800016e:	f3bf 8f6f 	isb	sy
 8000172:	f004 f8a5 	bl	80042c0 <__core_init>
 8000176:	f002 f9f3 	bl	8002560 <__early_init>
 800017a:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 800017e:	491d      	ldr	r1, [pc, #116]	; (80001f4 <endfiniloop+0xa>)
 8000180:	4a1d      	ldr	r2, [pc, #116]	; (80001f8 <endfiniloop+0xe>)

08000182 <msloop>:
 8000182:	4291      	cmp	r1, r2
 8000184:	bf3c      	itt	cc
 8000186:	f841 0b04 	strcc.w	r0, [r1], #4
 800018a:	e7fa      	bcc.n	8000182 <msloop>
 800018c:	491b      	ldr	r1, [pc, #108]	; (80001fc <endfiniloop+0x12>)
 800018e:	4a18      	ldr	r2, [pc, #96]	; (80001f0 <endfiniloop+0x6>)

08000190 <psloop>:
 8000190:	4291      	cmp	r1, r2
 8000192:	bf3c      	itt	cc
 8000194:	f841 0b04 	strcc.w	r0, [r1], #4
 8000198:	e7fa      	bcc.n	8000190 <psloop>
 800019a:	4919      	ldr	r1, [pc, #100]	; (8000200 <endfiniloop+0x16>)
 800019c:	4a19      	ldr	r2, [pc, #100]	; (8000204 <endfiniloop+0x1a>)
 800019e:	4b1a      	ldr	r3, [pc, #104]	; (8000208 <endfiniloop+0x1e>)

080001a0 <dloop>:
 80001a0:	429a      	cmp	r2, r3
 80001a2:	bf3e      	ittt	cc
 80001a4:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80001a8:	f842 0b04 	strcc.w	r0, [r2], #4
 80001ac:	e7f8      	bcc.n	80001a0 <dloop>
 80001ae:	2000      	movs	r0, #0
 80001b0:	4916      	ldr	r1, [pc, #88]	; (800020c <endfiniloop+0x22>)
 80001b2:	4a17      	ldr	r2, [pc, #92]	; (8000210 <endfiniloop+0x26>)

080001b4 <bloop>:
 80001b4:	4291      	cmp	r1, r2
 80001b6:	bf3c      	itt	cc
 80001b8:	f841 0b04 	strcc.w	r0, [r1], #4
 80001bc:	e7fa      	bcc.n	80001b4 <bloop>
 80001be:	f004 f847 	bl	8004250 <__init_ram_areas>
 80001c2:	f004 f875 	bl	80042b0 <__late_init>
 80001c6:	4c13      	ldr	r4, [pc, #76]	; (8000214 <endfiniloop+0x2a>)
 80001c8:	4d13      	ldr	r5, [pc, #76]	; (8000218 <endfiniloop+0x2e>)

080001ca <initloop>:
 80001ca:	42ac      	cmp	r4, r5
 80001cc:	da03      	bge.n	80001d6 <endinitloop>
 80001ce:	f854 1b04 	ldr.w	r1, [r4], #4
 80001d2:	4788      	blx	r1
 80001d4:	e7f9      	b.n	80001ca <initloop>

080001d6 <endinitloop>:
 80001d6:	f001 fa43 	bl	8001660 <main>
 80001da:	4c10      	ldr	r4, [pc, #64]	; (800021c <endfiniloop+0x32>)
 80001dc:	4d10      	ldr	r5, [pc, #64]	; (8000220 <endfiniloop+0x36>)

080001de <finiloop>:
 80001de:	42ac      	cmp	r4, r5
 80001e0:	da03      	bge.n	80001ea <endfiniloop>
 80001e2:	f854 1b04 	ldr.w	r1, [r4], #4
 80001e6:	4788      	blx	r1
 80001e8:	e7f9      	b.n	80001de <finiloop>

080001ea <endfiniloop>:
 80001ea:	f004 b859 	b.w	80042a0 <__default_exit>
 80001ee:	0000      	.short	0x0000
 80001f0:	20000800 	.word	0x20000800
 80001f4:	20000000 	.word	0x20000000
 80001f8:	20000400 	.word	0x20000400
 80001fc:	20000400 	.word	0x20000400
 8000200:	08006dd0 	.word	0x08006dd0
 8000204:	20000800 	.word	0x20000800
 8000208:	200008b8 	.word	0x200008b8
 800020c:	200008b8 	.word	0x200008b8
 8000210:	20001400 	.word	0x20001400
 8000214:	08000160 	.word	0x08000160
 8000218:	08000160 	.word	0x08000160
 800021c:	08000160 	.word	0x08000160
 8000220:	08000160 	.word	0x08000160
	...

08000230 <_port_switch>:
 8000230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000234:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000238:	68c3      	ldr	r3, [r0, #12]
 800023a:	469d      	mov	sp, r3
 800023c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000240 <_port_thread_start>:
 8000240:	2300      	movs	r3, #0
 8000242:	f383 8811 	msr	BASEPRI, r3
 8000246:	4628      	mov	r0, r5
 8000248:	47a0      	blx	r4
 800024a:	2000      	movs	r0, #0
 800024c:	f003 fdf8 	bl	8003e40 <chThdExit>

08000250 <_port_switch_from_isr>:
 8000250:	f003 fae6 	bl	8003820 <chSchDoReschedule>

08000254 <_port_exit_from_isr>:
 8000254:	df00      	svc	0
 8000256:	e7fe      	b.n	8000256 <_port_exit_from_isr+0x2>
	...

08000260 <mtx5_setup.lto_priv.98>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000260:	4b02      	ldr	r3, [pc, #8]	; (800026c <mtx5_setup.lto_priv.98+0xc>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8000262:	2200      	movs	r2, #0
 8000264:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000266:	605b      	str	r3, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	4770      	bx	lr
 800026c:	2000083c 	.word	0x2000083c

08000270 <mtx4_setup.lto_priv.96>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000270:	4a04      	ldr	r2, [pc, #16]	; (8000284 <mtx4_setup.lto_priv.96+0x14>)
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <mtx4_setup.lto_priv.96+0x18>)
 8000274:	2100      	movs	r1, #0
 8000276:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000278:	6052      	str	r2, [r2, #4]
 800027a:	6091      	str	r1, [r2, #8]
 800027c:	6099      	str	r1, [r3, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800027e:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000280:	605b      	str	r3, [r3, #4]
 8000282:	4770      	bx	lr
 8000284:	2000083c 	.word	0x2000083c
 8000288:	2000084c 	.word	0x2000084c
 800028c:	00000000 	.word	0x00000000

08000290 <mtx1_setup.lto_priv.94>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000290:	4b02      	ldr	r3, [pc, #8]	; (800029c <mtx1_setup.lto_priv.94+0xc>)
 8000292:	2200      	movs	r2, #0
 8000294:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000296:	605b      	str	r3, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	4770      	bx	lr
 800029c:	2000083c 	.word	0x2000083c

080002a0 <sem3_setup.lto_priv.91>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80002a0:	4b02      	ldr	r3, [pc, #8]	; (80002ac <sem3_setup.lto_priv.91+0xc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 80002a2:	2200      	movs	r2, #0
 80002a4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80002a6:	605b      	str	r3, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	4770      	bx	lr
 80002ac:	20000830 	.word	0x20000830

080002b0 <sem2_setup.lto_priv.89>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80002b0:	4b02      	ldr	r3, [pc, #8]	; (80002bc <sem2_setup.lto_priv.89+0xc>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80002b6:	605b      	str	r3, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	4770      	bx	lr
 80002bc:	20000830 	.word	0x20000830

080002c0 <sem1_setup.lto_priv.87>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80002c0:	4b02      	ldr	r3, [pc, #8]	; (80002cc <sem1_setup.lto_priv.87+0xc>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80002c6:	605b      	str	r3, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	4770      	bx	lr
 80002cc:	20000830 	.word	0x20000830

080002d0 <mtx4_execute.lto_priv.97>:
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 80002d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80002d4:	4d84      	ldr	r5, [pc, #528]	; (80004e8 <mtx4_execute.lto_priv.97+0x218>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80002d6:	4b85      	ldr	r3, [pc, #532]	; (80004ec <mtx4_execute.lto_priv.97+0x21c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80002d8:	69aa      	ldr	r2, [r5, #24]
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 80002da:	b082      	sub	sp, #8
 80002dc:	6894      	ldr	r4, [r2, #8]
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80002de:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 80002e2:	1c67      	adds	r7, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80002e4:	463a      	mov	r2, r7
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	4881      	ldr	r0, [pc, #516]	; (80004f0 <mtx4_execute.lto_priv.97+0x220>)
 80002ea:	4b82      	ldr	r3, [pc, #520]	; (80004f4 <mtx4_execute.lto_priv.97+0x224>)
 80002ec:	f003 fb18 	bl	8003920 <chThdCreateStatic>
 80002f0:	4e81      	ldr	r6, [pc, #516]	; (80004f8 <mtx4_execute.lto_priv.97+0x228>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 80002f2:	4b82      	ldr	r3, [pc, #520]	; (80004fc <mtx4_execute.lto_priv.97+0x22c>)
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 80002f4:	f104 0802 	add.w	r8, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80002f8:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 80002fa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80002fe:	4642      	mov	r2, r8
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	487f      	ldr	r0, [pc, #508]	; (8000500 <mtx4_execute.lto_priv.97+0x230>)
 8000304:	4b7f      	ldr	r3, [pc, #508]	; (8000504 <mtx4_execute.lto_priv.97+0x234>)
 8000306:	f003 fb0b 	bl	8003920 <chThdCreateStatic>
 800030a:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 800030c:	487e      	ldr	r0, [pc, #504]	; (8000508 <mtx4_execute.lto_priv.97+0x238>)
 800030e:	f003 fd57 	bl	8003dc0 <chMtxLock>
 8000312:	69ab      	ldr	r3, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 8000314:	2001      	movs	r0, #1
 8000316:	6899      	ldr	r1, [r3, #8]
 8000318:	1a61      	subs	r1, r4, r1
 800031a:	fab1 f181 	clz	r1, r1
 800031e:	0949      	lsrs	r1, r1, #5
 8000320:	f002 f886 	bl	8002430 <_test_assert>
 8000324:	b110      	cbz	r0, 800032c <mtx4_execute.lto_priv.97+0x5c>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 8000326:	b002      	add	sp, #8
 8000328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 800032c:	2064      	movs	r0, #100	; 0x64
 800032e:	f003 fef7 	bl	8004120 <chThdSleep>
 8000332:	69ab      	ldr	r3, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 8000334:	2002      	movs	r0, #2
 8000336:	6899      	ldr	r1, [r3, #8]
 8000338:	1a79      	subs	r1, r7, r1
 800033a:	fab1 f181 	clz	r1, r1
 800033e:	0949      	lsrs	r1, r1, #5
 8000340:	f002 f876 	bl	8002430 <_test_assert>
 8000344:	2800      	cmp	r0, #0
 8000346:	d1ee      	bne.n	8000326 <mtx4_execute.lto_priv.97+0x56>
  chMtxLock(&m1);
 8000348:	4870      	ldr	r0, [pc, #448]	; (800050c <mtx4_execute.lto_priv.97+0x23c>)
 800034a:	f003 fd39 	bl	8003dc0 <chMtxLock>
 800034e:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 8000350:	2003      	movs	r0, #3
 8000352:	6899      	ldr	r1, [r3, #8]
 8000354:	1a79      	subs	r1, r7, r1
 8000356:	fab1 f181 	clz	r1, r1
 800035a:	0949      	lsrs	r1, r1, #5
 800035c:	f002 f868 	bl	8002430 <_test_assert>
 8000360:	2800      	cmp	r0, #0
 8000362:	d1e0      	bne.n	8000326 <mtx4_execute.lto_priv.97+0x56>
  chThdSleepMilliseconds(100);
 8000364:	2064      	movs	r0, #100	; 0x64
 8000366:	f003 fedb 	bl	8004120 <chThdSleep>
 800036a:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 800036c:	2004      	movs	r0, #4
 800036e:	6899      	ldr	r1, [r3, #8]
 8000370:	ebc1 0108 	rsb	r1, r1, r8
 8000374:	fab1 f181 	clz	r1, r1
 8000378:	0949      	lsrs	r1, r1, #5
 800037a:	f002 f859 	bl	8002430 <_test_assert>
 800037e:	2800      	cmp	r0, #0
 8000380:	d1d1      	bne.n	8000326 <mtx4_execute.lto_priv.97+0x56>
  chMtxUnlock(&m1);
 8000382:	4862      	ldr	r0, [pc, #392]	; (800050c <mtx4_execute.lto_priv.97+0x23c>)
 8000384:	f003 fc7c 	bl	8003c80 <chMtxUnlock>
 8000388:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 800038a:	2005      	movs	r0, #5
 800038c:	6899      	ldr	r1, [r3, #8]
 800038e:	1a79      	subs	r1, r7, r1
 8000390:	fab1 f181 	clz	r1, r1
 8000394:	0949      	lsrs	r1, r1, #5
 8000396:	f002 f84b 	bl	8002430 <_test_assert>
 800039a:	2800      	cmp	r0, #0
 800039c:	d1c3      	bne.n	8000326 <mtx4_execute.lto_priv.97+0x56>
  chThdSleepMilliseconds(100);
 800039e:	2064      	movs	r0, #100	; 0x64
 80003a0:	f003 febe 	bl	8004120 <chThdSleep>
 80003a4:	69ab      	ldr	r3, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 80003a6:	2006      	movs	r0, #6
 80003a8:	6899      	ldr	r1, [r3, #8]
 80003aa:	1a79      	subs	r1, r7, r1
 80003ac:	fab1 f181 	clz	r1, r1
 80003b0:	0949      	lsrs	r1, r1, #5
 80003b2:	f002 f83d 	bl	8002430 <_test_assert>
 80003b6:	2800      	cmp	r0, #0
 80003b8:	d1b5      	bne.n	8000326 <mtx4_execute.lto_priv.97+0x56>
  chMtxUnlockAll();
 80003ba:	f003 fc09 	bl	8003bd0 <chMtxUnlockAll>
 80003be:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 80003c0:	2007      	movs	r0, #7
 80003c2:	6899      	ldr	r1, [r3, #8]
 80003c4:	1a61      	subs	r1, r4, r1
 80003c6:	fab1 f181 	clz	r1, r1
 80003ca:	0949      	lsrs	r1, r1, #5
 80003cc:	f002 f830 	bl	8002430 <_test_assert>
 80003d0:	2800      	cmp	r0, #0
 80003d2:	d1a8      	bne.n	8000326 <mtx4_execute.lto_priv.97+0x56>
  test_wait_threads();
 80003d4:	f001 ffac 	bl	8002330 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 80003d8:	4b4d      	ldr	r3, [pc, #308]	; (8000510 <mtx4_execute.lto_priv.97+0x240>)
 80003da:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80003de:	9300      	str	r3, [sp, #0]
 80003e0:	463a      	mov	r2, r7
 80003e2:	4b44      	ldr	r3, [pc, #272]	; (80004f4 <mtx4_execute.lto_priv.97+0x224>)
 80003e4:	4842      	ldr	r0, [pc, #264]	; (80004f0 <mtx4_execute.lto_priv.97+0x220>)
 80003e6:	f003 fa9b 	bl	8003920 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 80003ea:	4b4a      	ldr	r3, [pc, #296]	; (8000514 <mtx4_execute.lto_priv.97+0x244>)
  chMtxUnlockAll();
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 80003ec:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 80003ee:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	4642      	mov	r2, r8
 80003f6:	4b43      	ldr	r3, [pc, #268]	; (8000504 <mtx4_execute.lto_priv.97+0x234>)
 80003f8:	4841      	ldr	r0, [pc, #260]	; (8000500 <mtx4_execute.lto_priv.97+0x230>)
 80003fa:	f003 fa91 	bl	8003920 <chThdCreateStatic>
 80003fe:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 8000400:	4841      	ldr	r0, [pc, #260]	; (8000508 <mtx4_execute.lto_priv.97+0x238>)
 8000402:	f003 fcdd 	bl	8003dc0 <chMtxLock>
 8000406:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 8000408:	2008      	movs	r0, #8
 800040a:	6899      	ldr	r1, [r3, #8]
 800040c:	1a61      	subs	r1, r4, r1
 800040e:	fab1 f181 	clz	r1, r1
 8000412:	0949      	lsrs	r1, r1, #5
 8000414:	f002 f80c 	bl	8002430 <_test_assert>
 8000418:	2800      	cmp	r0, #0
 800041a:	d184      	bne.n	8000326 <mtx4_execute.lto_priv.97+0x56>
  chThdSleepMilliseconds(100);
 800041c:	2064      	movs	r0, #100	; 0x64
 800041e:	f003 fe7f 	bl	8004120 <chThdSleep>
 8000422:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 8000424:	2009      	movs	r0, #9
 8000426:	6899      	ldr	r1, [r3, #8]
 8000428:	1a7b      	subs	r3, r7, r1
 800042a:	4259      	negs	r1, r3
 800042c:	4159      	adcs	r1, r3
 800042e:	f001 ffff 	bl	8002430 <_test_assert>
 8000432:	2800      	cmp	r0, #0
 8000434:	f47f af77 	bne.w	8000326 <mtx4_execute.lto_priv.97+0x56>
  chMtxLock(&m1);
 8000438:	4834      	ldr	r0, [pc, #208]	; (800050c <mtx4_execute.lto_priv.97+0x23c>)
 800043a:	f003 fcc1 	bl	8003dc0 <chMtxLock>
 800043e:	69ab      	ldr	r3, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 8000440:	200a      	movs	r0, #10
 8000442:	6899      	ldr	r1, [r3, #8]
 8000444:	ebc1 0c07 	rsb	ip, r1, r7
 8000448:	f1dc 0100 	rsbs	r1, ip, #0
 800044c:	eb41 010c 	adc.w	r1, r1, ip
 8000450:	f001 ffee 	bl	8002430 <_test_assert>
 8000454:	2800      	cmp	r0, #0
 8000456:	f47f af66 	bne.w	8000326 <mtx4_execute.lto_priv.97+0x56>
  chThdSleepMilliseconds(100);
 800045a:	2064      	movs	r0, #100	; 0x64
 800045c:	f003 fe60 	bl	8004120 <chThdSleep>
 8000460:	69ab      	ldr	r3, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 8000462:	200b      	movs	r0, #11
 8000464:	6899      	ldr	r1, [r3, #8]
 8000466:	ebc1 0e08 	rsb	lr, r1, r8
 800046a:	f1de 0100 	rsbs	r1, lr, #0
 800046e:	eb41 010e 	adc.w	r1, r1, lr
 8000472:	f001 ffdd 	bl	8002430 <_test_assert>
 8000476:	4606      	mov	r6, r0
 8000478:	2800      	cmp	r0, #0
 800047a:	f47f af54 	bne.w	8000326 <mtx4_execute.lto_priv.97+0x56>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800047e:	2320      	movs	r3, #32
 8000480:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chMtxUnlockS(&m1);
 8000484:	4821      	ldr	r0, [pc, #132]	; (800050c <mtx4_execute.lto_priv.97+0x23c>)
 8000486:	f003 fbd3 	bl	8003c30 <chMtxUnlockS>
  chSchRescheduleS();
 800048a:	f003 f9d1 	bl	8003830 <chSchRescheduleS>
 800048e:	f386 8811 	msr	BASEPRI, r6
 8000492:	69ab      	ldr	r3, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 8000494:	200c      	movs	r0, #12
 8000496:	6899      	ldr	r1, [r3, #8]
 8000498:	1a7e      	subs	r6, r7, r1
 800049a:	4271      	negs	r1, r6
 800049c:	4171      	adcs	r1, r6
 800049e:	f001 ffc7 	bl	8002430 <_test_assert>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	f47f af3f 	bne.w	8000326 <mtx4_execute.lto_priv.97+0x56>
  chThdSleepMilliseconds(100);
 80004a8:	2064      	movs	r0, #100	; 0x64
 80004aa:	f003 fe39 	bl	8004120 <chThdSleep>
 80004ae:	69ab      	ldr	r3, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 80004b0:	200d      	movs	r0, #13
 80004b2:	6899      	ldr	r1, [r3, #8]
 80004b4:	1a7a      	subs	r2, r7, r1
 80004b6:	4251      	negs	r1, r2
 80004b8:	4151      	adcs	r1, r2
 80004ba:	f001 ffb9 	bl	8002430 <_test_assert>
 80004be:	2800      	cmp	r0, #0
 80004c0:	f47f af31 	bne.w	8000326 <mtx4_execute.lto_priv.97+0x56>
  chMtxUnlockAll();
 80004c4:	f003 fb84 	bl	8003bd0 <chMtxUnlockAll>
 80004c8:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 80004ca:	200e      	movs	r0, #14
 80004cc:	6899      	ldr	r1, [r3, #8]
 80004ce:	1a63      	subs	r3, r4, r1
 80004d0:	4259      	negs	r1, r3
 80004d2:	4159      	adcs	r1, r3
 80004d4:	f001 ffac 	bl	8002430 <_test_assert>
 80004d8:	2800      	cmp	r0, #0
 80004da:	f47f af24 	bne.w	8000326 <mtx4_execute.lto_priv.97+0x56>
  test_wait_threads();
}
 80004de:	b002      	add	sp, #8
 80004e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 80004e4:	f001 bf24 	b.w	8002330 <test_wait_threads>
 80004e8:	200011a0 	.word	0x200011a0
 80004ec:	08006000 	.word	0x08006000
 80004f0:	20000928 	.word	0x20000928
 80004f4:	08000521 	.word	0x08000521
 80004f8:	200012f4 	.word	0x200012f4
 80004fc:	08006004 	.word	0x08006004
 8000500:	20000a70 	.word	0x20000a70
 8000504:	08000541 	.word	0x08000541
 8000508:	2000084c 	.word	0x2000084c
 800050c:	2000083c 	.word	0x2000083c
 8000510:	08006008 	.word	0x08006008
 8000514:	0800600c 	.word	0x0800600c
	...

08000520 <thread4a>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread4a, p) {
 8000520:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 8000522:	4c06      	ldr	r4, [pc, #24]	; (800053c <thread4a+0x1c>)
}

static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
 8000524:	2032      	movs	r0, #50	; 0x32
 8000526:	f003 fdfb 	bl	8004120 <chThdSleep>
  chMtxLock(&m2);
 800052a:	4620      	mov	r0, r4
 800052c:	f003 fc48 	bl	8003dc0 <chMtxLock>
  chMtxUnlock(&m2);
 8000530:	4620      	mov	r0, r4
}
 8000532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
  chMtxUnlock(&m2);
 8000536:	f003 bba3 	b.w	8003c80 <chMtxUnlock>
 800053a:	bf00      	nop
 800053c:	2000084c 	.word	0x2000084c

08000540 <thread4b>:
}

static THD_FUNCTION(thread4b, p) {
 8000540:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 8000542:	4c06      	ldr	r4, [pc, #24]	; (800055c <thread4b+0x1c>)
}

static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
 8000544:	2096      	movs	r0, #150	; 0x96
 8000546:	f003 fdeb 	bl	8004120 <chThdSleep>
  chMtxLock(&m1);
 800054a:	4620      	mov	r0, r4
 800054c:	f003 fc38 	bl	8003dc0 <chMtxLock>
  chMtxUnlock(&m1);
 8000550:	4620      	mov	r0, r4
}
 8000552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
 8000556:	f003 bb93 	b.w	8003c80 <chMtxUnlock>
 800055a:	bf00      	nop
 800055c:	2000083c 	.word	0x2000083c

08000560 <mtx1_execute.lto_priv.95>:
  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx1_execute(void) {
 8000560:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000562:	4e29      	ldr	r6, [pc, #164]	; (8000608 <mtx1_execute.lto_priv.95+0xa8>)
 8000564:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000566:	69b3      	ldr	r3, [r6, #24]

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8000568:	4828      	ldr	r0, [pc, #160]	; (800060c <mtx1_execute.lto_priv.95+0xac>)
 800056a:	689c      	ldr	r4, [r3, #8]
 800056c:	f003 fc28 	bl	8003dc0 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8000570:	4b27      	ldr	r3, [pc, #156]	; (8000610 <mtx1_execute.lto_priv.95+0xb0>)
 8000572:	1c62      	adds	r2, r4, #1
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800057a:	4b26      	ldr	r3, [pc, #152]	; (8000614 <mtx1_execute.lto_priv.95+0xb4>)
 800057c:	4826      	ldr	r0, [pc, #152]	; (8000618 <mtx1_execute.lto_priv.95+0xb8>)
 800057e:	f003 f9cf 	bl	8003920 <chThdCreateStatic>
 8000582:	4d26      	ldr	r5, [pc, #152]	; (800061c <mtx1_execute.lto_priv.95+0xbc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8000584:	4b26      	ldr	r3, [pc, #152]	; (8000620 <mtx1_execute.lto_priv.95+0xc0>)

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8000586:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8000588:	1ca2      	adds	r2, r4, #2
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000590:	4b20      	ldr	r3, [pc, #128]	; (8000614 <mtx1_execute.lto_priv.95+0xb4>)
 8000592:	4824      	ldr	r0, [pc, #144]	; (8000624 <mtx1_execute.lto_priv.95+0xc4>)
 8000594:	f003 f9c4 	bl	8003920 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <mtx1_execute.lto_priv.95+0xc8>)
static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800059a:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800059c:	1ce2      	adds	r2, r4, #3
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <mtx1_execute.lto_priv.95+0xb4>)
 80005a6:	4821      	ldr	r0, [pc, #132]	; (800062c <mtx1_execute.lto_priv.95+0xcc>)
 80005a8:	f003 f9ba 	bl	8003920 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <mtx1_execute.lto_priv.95+0xd0>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80005ae:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80005b0:	1d22      	adds	r2, r4, #4
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <mtx1_execute.lto_priv.95+0xb4>)
 80005ba:	481e      	ldr	r0, [pc, #120]	; (8000634 <mtx1_execute.lto_priv.95+0xd4>)
 80005bc:	f003 f9b0 	bl	8003920 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <mtx1_execute.lto_priv.95+0xd8>)
 80005c2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80005c6:	1d62      	adds	r2, r4, #5
  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80005c8:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	481b      	ldr	r0, [pc, #108]	; (800063c <mtx1_execute.lto_priv.95+0xdc>)
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <mtx1_execute.lto_priv.95+0xb4>)
 80005d0:	f003 f9a6 	bl	8003920 <chThdCreateStatic>
 80005d4:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 80005d6:	480d      	ldr	r0, [pc, #52]	; (800060c <mtx1_execute.lto_priv.95+0xac>)
 80005d8:	f003 fb52 	bl	8003c80 <chMtxUnlock>
  test_wait_threads();
 80005dc:	f001 fea8 	bl	8002330 <test_wait_threads>
 80005e0:	69b3      	ldr	r3, [r6, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 80005e2:	2001      	movs	r0, #1
 80005e4:	6899      	ldr	r1, [r3, #8]
 80005e6:	1a61      	subs	r1, r4, r1
 80005e8:	fab1 f181 	clz	r1, r1
 80005ec:	0949      	lsrs	r1, r1, #5
 80005ee:	f001 ff1f 	bl	8002430 <_test_assert>
 80005f2:	b108      	cbz	r0, 80005f8 <mtx1_execute.lto_priv.95+0x98>
  test_assert_sequence(2, "ABCDE");
}
 80005f4:	b002      	add	sp, #8
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 80005f8:	4911      	ldr	r1, [pc, #68]	; (8000640 <mtx1_execute.lto_priv.95+0xe0>)
 80005fa:	2002      	movs	r0, #2
}
 80005fc:	b002      	add	sp, #8
 80005fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8000602:	f001 beed 	b.w	80023e0 <_test_assert_sequence>
 8000606:	bf00      	nop
 8000608:	200011a0 	.word	0x200011a0
 800060c:	2000083c 	.word	0x2000083c
 8000610:	08006014 	.word	0x08006014
 8000614:	08000721 	.word	0x08000721
 8000618:	20000928 	.word	0x20000928
 800061c:	200012f4 	.word	0x200012f4
 8000620:	08006008 	.word	0x08006008
 8000624:	20000a70 	.word	0x20000a70
 8000628:	0800600c 	.word	0x0800600c
 800062c:	20000bb8 	.word	0x20000bb8
 8000630:	08006000 	.word	0x08006000
 8000634:	20000d00 	.word	0x20000d00
 8000638:	08006004 	.word	0x08006004
 800063c:	20000e48 	.word	0x20000e48
 8000640:	08006010 	.word	0x08006010
	...

08000650 <thd1_execute.lto_priv.83>:
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 8000650:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000652:	4f27      	ldr	r7, [pc, #156]	; (80006f0 <thd1_execute.lto_priv.83+0xa0>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8000654:	4e27      	ldr	r6, [pc, #156]	; (80006f4 <thd1_execute.lto_priv.83+0xa4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	4d27      	ldr	r5, [pc, #156]	; (80006f8 <thd1_execute.lto_priv.83+0xa8>)
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	4927      	ldr	r1, [pc, #156]	; (80006fc <thd1_execute.lto_priv.83+0xac>)
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 800065e:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8000660:	462b      	mov	r3, r5
 8000662:	9100      	str	r1, [sp, #0]
 8000664:	3a05      	subs	r2, #5
 8000666:	4630      	mov	r0, r6
 8000668:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800066c:	f003 f958 	bl	8003920 <chThdCreateStatic>
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	4c23      	ldr	r4, [pc, #140]	; (8000700 <thd1_execute.lto_priv.83+0xb0>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8000674:	689a      	ldr	r2, [r3, #8]
 8000676:	4923      	ldr	r1, [pc, #140]	; (8000704 <thd1_execute.lto_priv.83+0xb4>)
  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8000678:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800067a:	462b      	mov	r3, r5
 800067c:	9100      	str	r1, [sp, #0]
 800067e:	3a04      	subs	r2, #4
 8000680:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8000684:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000688:	f003 f94a 	bl	8003920 <chThdCreateStatic>
 800068c:	69bb      	ldr	r3, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800068e:	491e      	ldr	r1, [pc, #120]	; (8000708 <thd1_execute.lto_priv.83+0xb8>)
 8000690:	689a      	ldr	r2, [r3, #8]
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8000692:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8000694:	462b      	mov	r3, r5
 8000696:	9100      	str	r1, [sp, #0]
 8000698:	3a03      	subs	r2, #3
 800069a:	f506 7024 	add.w	r0, r6, #656	; 0x290
 800069e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80006a2:	f003 f93d 	bl	8003920 <chThdCreateStatic>
 80006a6:	69bb      	ldr	r3, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80006a8:	4918      	ldr	r1, [pc, #96]	; (800070c <thd1_execute.lto_priv.83+0xbc>)
 80006aa:	689a      	ldr	r2, [r3, #8]

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80006ac:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80006ae:	462b      	mov	r3, r5
 80006b0:	9100      	str	r1, [sp, #0]
 80006b2:	3a02      	subs	r2, #2
 80006b4:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80006b8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80006bc:	f003 f930 	bl	8003920 <chThdCreateStatic>
 80006c0:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80006c2:	4913      	ldr	r1, [pc, #76]	; (8000710 <thd1_execute.lto_priv.83+0xc0>)
 80006c4:	689a      	ldr	r2, [r3, #8]
static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80006c6:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80006c8:	3a01      	subs	r2, #1
 80006ca:	462b      	mov	r3, r5
 80006cc:	9100      	str	r1, [sp, #0]
 80006ce:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 80006d2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80006d6:	f003 f923 	bl	8003920 <chThdCreateStatic>
 80006da:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 80006dc:	f001 fe28 	bl	8002330 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 80006e0:	490c      	ldr	r1, [pc, #48]	; (8000714 <thd1_execute.lto_priv.83+0xc4>)
 80006e2:	2001      	movs	r0, #1
}
 80006e4:	b003      	add	sp, #12
 80006e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 80006ea:	f001 be79 	b.w	80023e0 <_test_assert_sequence>
 80006ee:	bf00      	nop
 80006f0:	200011a0 	.word	0x200011a0
 80006f4:	20000928 	.word	0x20000928
 80006f8:	08002491 	.word	0x08002491
 80006fc:	08006014 	.word	0x08006014
 8000700:	200012f4 	.word	0x200012f4
 8000704:	08006008 	.word	0x08006008
 8000708:	0800600c 	.word	0x0800600c
 800070c:	08006000 	.word	0x08006000
 8000710:	08006004 	.word	0x08006004
 8000714:	08006010 	.word	0x08006010
	...

08000720 <thread1.lto_priv.163>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread1, p) {
 8000720:	b538      	push	{r3, r4, r5, lr}
 8000722:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8000724:	4c05      	ldr	r4, [pc, #20]	; (800073c <thread1.lto_priv.163+0x1c>)
 8000726:	4620      	mov	r0, r4
 8000728:	f003 fb4a 	bl	8003dc0 <chMtxLock>
  test_emit_token(*(char *)p);
 800072c:	7828      	ldrb	r0, [r5, #0]
 800072e:	f001 fe97 	bl	8002460 <test_emit_token>
  chMtxUnlock(&m1);
 8000732:	4620      	mov	r0, r4
}
 8000734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread1, p) {

  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 8000738:	f003 baa2 	b.w	8003c80 <chMtxUnlock>
 800073c:	2000083c 	.word	0x2000083c

08000740 <thread1.lto_priv.162>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread1, p) {
 8000740:	b510      	push	{r4, lr}
 8000742:	4604      	mov	r4, r0

  chSemWait(&sem1);
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <thread1.lto_priv.162+0x14>)
 8000746:	f003 f963 	bl	8003a10 <chSemWait>
  test_emit_token(*(char *)p);
 800074a:	7820      	ldrb	r0, [r4, #0]
}
 800074c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static THD_FUNCTION(thread1, p) {

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
 8000750:	f001 be86 	b.w	8002460 <test_emit_token>
 8000754:	20000830 	.word	0x20000830
	...

08000760 <thread4>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static THD_FUNCTION(thread4, p) {
 8000760:	b508      	push	{r3, lr}
 8000762:	2220      	movs	r2, #32
 8000764:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 8000768:	6883      	ldr	r3, [r0, #8]
 800076a:	2b00      	cmp	r3, #0
 800076c:	dd05      	ble.n	800077a <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800076e:	f003 f85f 	bl	8003830 <chSchRescheduleS>
 8000772:	2300      	movs	r3, #0
 8000774:	f383 8811 	msr	BASEPRI, r3
 8000778:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 800077a:	f003 fb31 	bl	8003de0 <chSemSignalI>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800077e:	f003 f857 	bl	8003830 <chSchRescheduleS>
 8000782:	2300      	movs	r3, #0
 8000784:	f383 8811 	msr	BASEPRI, r3
 8000788:	bd08      	pop	{r3, pc}
 800078a:	bf00      	nop
 800078c:	0000      	movs	r0, r0
	...

08000790 <thread2>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread2, p) {
 8000790:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 8000792:	2032      	movs	r0, #50	; 0x32
 8000794:	f003 fcc4 	bl	8004120 <chThdSleep>
 8000798:	2320      	movs	r3, #32
 800079a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 800079e:	4804      	ldr	r0, [pc, #16]	; (80007b0 <thread2+0x20>)
 80007a0:	f003 fb1e 	bl	8003de0 <chSemSignalI>
  chSchRescheduleS();
 80007a4:	f003 f844 	bl	8003830 <chSchRescheduleS>
 80007a8:	2300      	movs	r3, #0
 80007aa:	f383 8811 	msr	BASEPRI, r3
 80007ae:	bd08      	pop	{r3, pc}
 80007b0:	20000830 	.word	0x20000830
	...

080007c0 <sem4_execute.lto_priv.93>:
static THD_FUNCTION(thread4, p) {

  chBSemSignal((binary_semaphore_t *)p);
}

static void sem4_execute(void) {
 80007c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c2:	b087      	sub	sp, #28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80007c4:	ad03      	add	r5, sp, #12
 80007c6:	2400      	movs	r4, #0
 80007c8:	9503      	str	r5, [sp, #12]
  tqp->p_prev = (thread_t *)tqp;
 80007ca:	9504      	str	r5, [sp, #16]
 80007cc:	9405      	str	r4, [sp, #20]
 80007ce:	2620      	movs	r6, #32
 80007d0:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 80007d4:	4628      	mov	r0, r5
 80007d6:	4621      	mov	r1, r4
 80007d8:	f003 fb1a 	bl	8003e10 <chSemResetI>
  chSchRescheduleS();
 80007dc:	f003 f828 	bl	8003830 <chSchRescheduleS>
 80007e0:	f384 8811 	msr	BASEPRI, r4
 80007e4:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->bs_sem.s_cnt > (cnt_t)0) ? false : true;
 80007e8:	9905      	ldr	r1, [sp, #20]
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 80007ea:	2001      	movs	r0, #1
 80007ec:	42a1      	cmp	r1, r4
 80007ee:	bfcc      	ite	gt
 80007f0:	2100      	movgt	r1, #0
 80007f2:	2101      	movle	r1, #1
 80007f4:	f001 fe1c 	bl	8002430 <_test_assert>
 80007f8:	4607      	mov	r7, r0
 80007fa:	b118      	cbz	r0, 8000804 <sem4_execute.lto_priv.93+0x44>
 80007fc:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8000800:	b007      	add	sp, #28
 8000802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000804:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000808:	4b3f      	ldr	r3, [pc, #252]	; (8000908 <sem4_execute.lto_priv.93+0x148>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800080a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	483e      	ldr	r0, [pc, #248]	; (800090c <sem4_execute.lto_priv.93+0x14c>)
 8000812:	689a      	ldr	r2, [r3, #8]
 8000814:	4b3e      	ldr	r3, [pc, #248]	; (8000910 <sem4_execute.lto_priv.93+0x150>)
 8000816:	3a01      	subs	r2, #1
 8000818:	9500      	str	r5, [sp, #0]
 800081a:	f003 f881 	bl	8003920 <chThdCreateStatic>
 800081e:	4b3d      	ldr	r3, [pc, #244]	; (8000914 <sem4_execute.lto_priv.93+0x154>)
 8000820:	6018      	str	r0, [r3, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8000822:	4628      	mov	r0, r5
 8000824:	f003 f8f4 	bl	8003a10 <chSemWait>
 8000828:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->bs_sem.s_cnt > (cnt_t)0) ? false : true;
 800082c:	9905      	ldr	r1, [sp, #20]
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 800082e:	2002      	movs	r0, #2
 8000830:	2900      	cmp	r1, #0
 8000832:	bfcc      	ite	gt
 8000834:	2100      	movgt	r1, #0
 8000836:	2101      	movle	r1, #1
 8000838:	f001 fdfa 	bl	8002430 <_test_assert>
 800083c:	b118      	cbz	r0, 8000846 <sem4_execute.lto_priv.93+0x86>
 800083e:	f387 8811 	msr	BASEPRI, r7

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8000842:	b007      	add	sp, #28
 8000844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000846:	f380 8811 	msr	BASEPRI, r0
 800084a:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 800084e:	9b05      	ldr	r3, [sp, #20]
 8000850:	2b00      	cmp	r3, #0
 8000852:	dd23      	ble.n	800089c <sem4_execute.lto_priv.93+0xdc>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8000854:	f002 ffec 	bl	8003830 <chSchRescheduleS>
 8000858:	2400      	movs	r4, #0
 800085a:	f384 8811 	msr	BASEPRI, r4
 800085e:	2720      	movs	r7, #32
 8000860:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 8000864:	9905      	ldr	r1, [sp, #20]
 8000866:	2003      	movs	r0, #3
 8000868:	42a1      	cmp	r1, r4
 800086a:	bfd4      	ite	le
 800086c:	2100      	movle	r1, #0
 800086e:	2101      	movgt	r1, #1
 8000870:	f001 fdde 	bl	8002430 <_test_assert>
 8000874:	4606      	mov	r6, r0
 8000876:	2800      	cmp	r0, #0
 8000878:	d1c0      	bne.n	80007fc <sem4_execute.lto_priv.93+0x3c>
 800087a:	f380 8811 	msr	BASEPRI, r0
 800087e:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8000882:	9905      	ldr	r1, [sp, #20]
 8000884:	2004      	movs	r0, #4
 8000886:	f1a1 0101 	sub.w	r1, r1, #1
 800088a:	fab1 f181 	clz	r1, r1
 800088e:	0949      	lsrs	r1, r1, #5
 8000890:	f001 fdce 	bl	8002430 <_test_assert>
 8000894:	b130      	cbz	r0, 80008a4 <sem4_execute.lto_priv.93+0xe4>
 8000896:	f386 8811 	msr	BASEPRI, r6
 800089a:	e7b1      	b.n	8000800 <sem4_execute.lto_priv.93+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 800089c:	4628      	mov	r0, r5
 800089e:	f003 fa9f 	bl	8003de0 <chSemSignalI>
 80008a2:	e7d7      	b.n	8000854 <sem4_execute.lto_priv.93+0x94>
 80008a4:	f380 8811 	msr	BASEPRI, r0
 80008a8:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 80008ac:	9b05      	ldr	r3, [sp, #20]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	dd23      	ble.n	80008fa <sem4_execute.lto_priv.93+0x13a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80008b2:	f002 ffbd 	bl	8003830 <chSchRescheduleS>
 80008b6:	2400      	movs	r4, #0
 80008b8:	f384 8811 	msr	BASEPRI, r4
 80008bc:	2620      	movs	r6, #32
 80008be:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 80008c2:	9905      	ldr	r1, [sp, #20]
 80008c4:	2003      	movs	r0, #3
 80008c6:	42a1      	cmp	r1, r4
 80008c8:	bfd4      	ite	le
 80008ca:	2100      	movle	r1, #0
 80008cc:	2101      	movgt	r1, #1
 80008ce:	f001 fdaf 	bl	8002430 <_test_assert>
 80008d2:	4605      	mov	r5, r0
 80008d4:	2800      	cmp	r0, #0
 80008d6:	d191      	bne.n	80007fc <sem4_execute.lto_priv.93+0x3c>
 80008d8:	f380 8811 	msr	BASEPRI, r0
 80008dc:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 80008e0:	9905      	ldr	r1, [sp, #20]
 80008e2:	2005      	movs	r0, #5
 80008e4:	f1a1 0101 	sub.w	r1, r1, #1
 80008e8:	fab1 f181 	clz	r1, r1
 80008ec:	0949      	lsrs	r1, r1, #5
 80008ee:	f001 fd9f 	bl	8002430 <_test_assert>
 80008f2:	b130      	cbz	r0, 8000902 <sem4_execute.lto_priv.93+0x142>
 80008f4:	f385 8811 	msr	BASEPRI, r5
 80008f8:	e782      	b.n	8000800 <sem4_execute.lto_priv.93+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 80008fa:	4628      	mov	r0, r5
 80008fc:	f003 fa70 	bl	8003de0 <chSemSignalI>
 8000900:	e7d7      	b.n	80008b2 <sem4_execute.lto_priv.93+0xf2>
 8000902:	f380 8811 	msr	BASEPRI, r0
 8000906:	e77b      	b.n	8000800 <sem4_execute.lto_priv.93+0x40>
 8000908:	200011a0 	.word	0x200011a0
 800090c:	20000928 	.word	0x20000928
 8000910:	08000761 	.word	0x08000761
 8000914:	200012f4 	.word	0x200012f4
	...

08000920 <sem3_execute.lto_priv.92>:
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static void sem3_execute(void) {
 8000920:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000922:	4a1e      	ldr	r2, [pc, #120]	; (800099c <sem3_execute.lto_priv.92+0x7c>)
 8000924:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000926:	6992      	ldr	r2, [r2, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8000928:	2300      	movs	r3, #0
 800092a:	6892      	ldr	r2, [r2, #8]
 800092c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000930:	3201      	adds	r2, #1
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	481a      	ldr	r0, [pc, #104]	; (80009a0 <sem3_execute.lto_priv.92+0x80>)
 8000936:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <sem3_execute.lto_priv.92+0x84>)
 8000938:	f002 fff2 	bl	8003920 <chThdCreateStatic>
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (const thread_t *)tqp);
 800093c:	4c1a      	ldr	r4, [pc, #104]	; (80009a8 <sem3_execute.lto_priv.92+0x88>)
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <sem3_execute.lto_priv.92+0x8c>)
 8000940:	6018      	str	r0, [r3, #0]
  chSemSignalWait(&sem1, &sem1);
 8000942:	f000 fcdd 	bl	8001300 <chSemSignalWait.constprop.58>
 8000946:	6821      	ldr	r1, [r4, #0]
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 8000948:	2001      	movs	r0, #1
 800094a:	1b09      	subs	r1, r1, r4
 800094c:	fab1 f181 	clz	r1, r1
 8000950:	0949      	lsrs	r1, r1, #5
 8000952:	f001 fd6d 	bl	8002430 <_test_assert>
 8000956:	b108      	cbz	r0, 800095c <sem3_execute.lto_priv.92+0x3c>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 8000958:	b002      	add	sp, #8
 800095a:	bd10      	pop	{r4, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 800095c:	68a1      	ldr	r1, [r4, #8]
 800095e:	2002      	movs	r0, #2
 8000960:	fab1 f181 	clz	r1, r1
 8000964:	0949      	lsrs	r1, r1, #5
 8000966:	f001 fd63 	bl	8002430 <_test_assert>
 800096a:	2800      	cmp	r0, #0
 800096c:	d1f4      	bne.n	8000958 <sem3_execute.lto_priv.92+0x38>

  chSemSignalWait(&sem1, &sem1);
 800096e:	f000 fcc7 	bl	8001300 <chSemSignalWait.constprop.58>
 8000972:	6821      	ldr	r1, [r4, #0]
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 8000974:	2003      	movs	r0, #3
 8000976:	1b09      	subs	r1, r1, r4
 8000978:	fab1 f181 	clz	r1, r1
 800097c:	0949      	lsrs	r1, r1, #5
 800097e:	f001 fd57 	bl	8002430 <_test_assert>
 8000982:	2800      	cmp	r0, #0
 8000984:	d1e8      	bne.n	8000958 <sem3_execute.lto_priv.92+0x38>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8000986:	68a1      	ldr	r1, [r4, #8]
 8000988:	2004      	movs	r0, #4
 800098a:	fab1 f181 	clz	r1, r1
 800098e:	0949      	lsrs	r1, r1, #5
}
 8000990:	b002      	add	sp, #8
 8000992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8000996:	f001 bd4b 	b.w	8002430 <_test_assert>
 800099a:	bf00      	nop
 800099c:	200011a0 	.word	0x200011a0
 80009a0:	20000928 	.word	0x20000928
 80009a4:	080009b1 	.word	0x080009b1
 80009a8:	20000830 	.word	0x20000830
 80009ac:	200012f4 	.word	0x200012f4

080009b0 <thread3>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread3, p) {
 80009b0:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 80009b2:	4c04      	ldr	r4, [pc, #16]	; (80009c4 <thread3+0x14>)
 80009b4:	4620      	mov	r0, r4
 80009b6:	f003 f82b 	bl	8003a10 <chSemWait>
  chSemSignal(&sem1);
 80009ba:	4620      	mov	r0, r4
}
 80009bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread3, p) {

  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
 80009c0:	f002 bf8e 	b.w	80038e0 <chSemSignal>
 80009c4:	20000830 	.word	0x20000830
	...

080009d0 <sem2_execute.lto_priv.90>:
  chSemSignalI(&sem1); /* For coverage reasons */
  chSchRescheduleS();
  chSysUnlock();
}

static void sem2_execute(void) {
 80009d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d2:	2520      	movs	r5, #32
 80009d4:	b083      	sub	sp, #12
 80009d6:	f385 8811 	msr	BASEPRI, r5
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
  msg_t msg;

  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
 80009da:	4c55      	ldr	r4, [pc, #340]	; (8000b30 <sem2_execute.lto_priv.90+0x160>)
 80009dc:	2100      	movs	r1, #0
 80009de:	4620      	mov	r0, r4
 80009e0:	f003 fafe 	bl	8003fe0 <chSemWaitTimeoutS>
 80009e4:	2300      	movs	r3, #0
 80009e6:	4601      	mov	r1, r0
 80009e8:	f383 8811 	msr	BASEPRI, r3

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 80009ec:	f1a1 31ff 	sub.w	r1, r1, #4294967295	; 0xffffffff
 80009f0:	fab1 f181 	clz	r1, r1
 80009f4:	2001      	movs	r0, #1
 80009f6:	0949      	lsrs	r1, r1, #5
 80009f8:	f001 fd1a 	bl	8002430 <_test_assert>
 80009fc:	b108      	cbz	r0, 8000a02 <sem2_execute.lto_priv.90+0x32>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 80009fe:	b003      	add	sp, #12
 8000a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a02:	6821      	ldr	r1, [r4, #0]
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 8000a04:	2002      	movs	r0, #2
 8000a06:	1b09      	subs	r1, r1, r4
 8000a08:	fab1 f181 	clz	r1, r1
 8000a0c:	0949      	lsrs	r1, r1, #5
 8000a0e:	f001 fd0f 	bl	8002430 <_test_assert>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d1f3      	bne.n	80009fe <sem2_execute.lto_priv.90+0x2e>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 8000a16:	68a1      	ldr	r1, [r4, #8]
 8000a18:	2003      	movs	r0, #3
 8000a1a:	fab1 f181 	clz	r1, r1
 8000a1e:	0949      	lsrs	r1, r1, #5
 8000a20:	f001 fd06 	bl	8002430 <_test_assert>
 8000a24:	4606      	mov	r6, r0
 8000a26:	2800      	cmp	r0, #0
 8000a28:	d1e9      	bne.n	80009fe <sem2_execute.lto_priv.90+0x2e>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000a2a:	4b42      	ldr	r3, [pc, #264]	; (8000b34 <sem2_execute.lto_priv.90+0x164>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8000a2c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4841      	ldr	r0, [pc, #260]	; (8000b38 <sem2_execute.lto_priv.90+0x168>)
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <sem2_execute.lto_priv.90+0x16c>)
 8000a38:	3a01      	subs	r2, #1
 8000a3a:	9600      	str	r6, [sp, #0]
 8000a3c:	f002 ff70 	bl	8003920 <chThdCreateStatic>
 8000a40:	4b3f      	ldr	r3, [pc, #252]	; (8000b40 <sem2_execute.lto_priv.90+0x170>)
 8000a42:	6018      	str	r0, [r3, #0]
 8000a44:	f385 8811 	msr	BASEPRI, r5
 8000a48:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	f003 fac7 	bl	8003fe0 <chSemWaitTimeoutS>
 8000a52:	4607      	mov	r7, r0
 8000a54:	f386 8811 	msr	BASEPRI, r6
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
  test_wait_threads();
 8000a58:	f001 fc6a 	bl	8002330 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 8000a5c:	fab7 f187 	clz	r1, r7
 8000a60:	2004      	movs	r0, #4
 8000a62:	0949      	lsrs	r1, r1, #5
 8000a64:	f001 fce4 	bl	8002430 <_test_assert>
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	d1c8      	bne.n	80009fe <sem2_execute.lto_priv.90+0x2e>
 8000a6c:	6821      	ldr	r1, [r4, #0]
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 8000a6e:	2005      	movs	r0, #5
 8000a70:	1b09      	subs	r1, r1, r4
 8000a72:	fab1 f181 	clz	r1, r1
 8000a76:	0949      	lsrs	r1, r1, #5
 8000a78:	f001 fcda 	bl	8002430 <_test_assert>
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	d1be      	bne.n	80009fe <sem2_execute.lto_priv.90+0x2e>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 8000a80:	68a1      	ldr	r1, [r4, #8]
 8000a82:	2006      	movs	r0, #6
 8000a84:	fab1 f181 	clz	r1, r1
 8000a88:	0949      	lsrs	r1, r1, #5
 8000a8a:	f001 fcd1 	bl	8002430 <_test_assert>
 8000a8e:	4606      	mov	r6, r0
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d1b4      	bne.n	80009fe <sem2_execute.lto_priv.90+0x2e>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 8000a94:	f001 fc3c 	bl	8002310 <test_wait_tick>
 8000a98:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aa0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8000aa2:	f386 8811 	msr	BASEPRI, r6
 8000aa6:	2641      	movs	r6, #65	; 0x41
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8000aa8:	4630      	mov	r0, r6
 8000aaa:	f001 fcd9 	bl	8002460 <test_emit_token>
 8000aae:	f385 8811 	msr	BASEPRI, r5
 8000ab2:	2132      	movs	r1, #50	; 0x32
 8000ab4:	481e      	ldr	r0, [pc, #120]	; (8000b30 <sem2_execute.lto_priv.90+0x160>)
 8000ab6:	f003 fa93 	bl	8003fe0 <chSemWaitTimeoutS>
 8000aba:	2300      	movs	r3, #0
 8000abc:	4601      	mov	r1, r0
 8000abe:	f383 8811 	msr	BASEPRI, r3
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8000ac2:	f1a1 31ff 	sub.w	r1, r1, #4294967295	; 0xffffffff
 8000ac6:	fab1 f181 	clz	r1, r1
 8000aca:	2007      	movs	r0, #7
 8000acc:	0949      	lsrs	r1, r1, #5
 8000ace:	f001 fcaf 	bl	8002430 <_test_assert>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	d193      	bne.n	80009fe <sem2_execute.lto_priv.90+0x2e>
 8000ad6:	6821      	ldr	r1, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8000ad8:	2008      	movs	r0, #8
 8000ada:	1b09      	subs	r1, r1, r4
 8000adc:	fab1 f181 	clz	r1, r1
 8000ae0:	0949      	lsrs	r1, r1, #5
 8000ae2:	f001 fca5 	bl	8002430 <_test_assert>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	d189      	bne.n	80009fe <sem2_execute.lto_priv.90+0x2e>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 8000aea:	68a1      	ldr	r1, [r4, #8]
 8000aec:	2009      	movs	r0, #9
 8000aee:	fab1 f181 	clz	r1, r1
 8000af2:	0949      	lsrs	r1, r1, #5
 8000af4:	f001 fc9c 	bl	8002430 <_test_assert>
 8000af8:	3601      	adds	r6, #1
 8000afa:	b2f6      	uxtb	r6, r6
 8000afc:	2800      	cmp	r0, #0
 8000afe:	f47f af7e 	bne.w	80009fe <sem2_execute.lto_priv.90+0x2e>
  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
 8000b02:	2e46      	cmp	r6, #70	; 0x46
 8000b04:	d1d0      	bne.n	8000aa8 <sem2_execute.lto_priv.90+0xd8>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
 8000b06:	200a      	movs	r0, #10
 8000b08:	490e      	ldr	r1, [pc, #56]	; (8000b44 <sem2_execute.lto_priv.90+0x174>)
 8000b0a:	f001 fc69 	bl	80023e0 <_test_assert_sequence>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	f47f af75 	bne.w	80009fe <sem2_execute.lto_priv.90+0x2e>
 8000b14:	b2bf      	uxth	r7, r7

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
 8000b16:	f107 01fa 	add.w	r1, r7, #250	; 0xfa
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8000b1a:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8000b1e:	b289      	uxth	r1, r1
 8000b20:	b292      	uxth	r2, r2
 8000b22:	200b      	movs	r0, #11
}
 8000b24:	b003      	add	sp, #12
 8000b26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8000b2a:	f001 bc31 	b.w	8002390 <_test_assert_time_window>
 8000b2e:	bf00      	nop
 8000b30:	20000830 	.word	0x20000830
 8000b34:	200011a0 	.word	0x200011a0
 8000b38:	20000928 	.word	0x20000928
 8000b3c:	08000791 	.word	0x08000791
 8000b40:	200012f4 	.word	0x200012f4
 8000b44:	08006010 	.word	0x08006010
	...

08000b50 <sem1_execute.lto_priv.88>:

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 8000b50:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000b52:	4d4b      	ldr	r5, [pc, #300]	; (8000c80 <sem1_execute.lto_priv.88+0x130>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8000b54:	4f4b      	ldr	r7, [pc, #300]	; (8000c84 <sem1_execute.lto_priv.88+0x134>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000b56:	69ab      	ldr	r3, [r5, #24]

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 8000b58:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8000b5a:	689a      	ldr	r2, [r3, #8]
 8000b5c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000b60:	3205      	adds	r2, #5
 8000b62:	4b49      	ldr	r3, [pc, #292]	; (8000c88 <sem1_execute.lto_priv.88+0x138>)
 8000b64:	4849      	ldr	r0, [pc, #292]	; (8000c8c <sem1_execute.lto_priv.88+0x13c>)
 8000b66:	9700      	str	r7, [sp, #0]
 8000b68:	f002 feda 	bl	8003920 <chThdCreateStatic>
 8000b6c:	69ab      	ldr	r3, [r5, #24]
 8000b6e:	4c48      	ldr	r4, [pc, #288]	; (8000c90 <sem1_execute.lto_priv.88+0x140>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	4b48      	ldr	r3, [pc, #288]	; (8000c94 <sem1_execute.lto_priv.88+0x144>)
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8000b74:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8000b76:	3201      	adds	r2, #1
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000b7e:	4b42      	ldr	r3, [pc, #264]	; (8000c88 <sem1_execute.lto_priv.88+0x138>)
 8000b80:	4845      	ldr	r0, [pc, #276]	; (8000c98 <sem1_execute.lto_priv.88+0x148>)
 8000b82:	f002 fecd 	bl	8003920 <chThdCreateStatic>
 8000b86:	69aa      	ldr	r2, [r5, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8000b88:	4b44      	ldr	r3, [pc, #272]	; (8000c9c <sem1_execute.lto_priv.88+0x14c>)
 8000b8a:	6892      	ldr	r2, [r2, #8]
 8000b8c:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8000b90:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8000b92:	3203      	adds	r2, #3
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	4842      	ldr	r0, [pc, #264]	; (8000ca0 <sem1_execute.lto_priv.88+0x150>)
 8000b98:	4b3b      	ldr	r3, [pc, #236]	; (8000c88 <sem1_execute.lto_priv.88+0x138>)
 8000b9a:	f002 fec1 	bl	8003920 <chThdCreateStatic>
 8000b9e:	69aa      	ldr	r2, [r5, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8000ba0:	4b40      	ldr	r3, [pc, #256]	; (8000ca4 <sem1_execute.lto_priv.88+0x154>)
 8000ba2:	6892      	ldr	r2, [r2, #8]
 8000ba4:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8000ba8:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8000baa:	3204      	adds	r2, #4
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	483e      	ldr	r0, [pc, #248]	; (8000ca8 <sem1_execute.lto_priv.88+0x158>)
 8000bb0:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <sem1_execute.lto_priv.88+0x138>)
 8000bb2:	f002 feb5 	bl	8003920 <chThdCreateStatic>
 8000bb6:	69aa      	ldr	r2, [r5, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8000bb8:	4b3c      	ldr	r3, [pc, #240]	; (8000cac <sem1_execute.lto_priv.88+0x15c>)
 8000bba:	6892      	ldr	r2, [r2, #8]
 8000bbc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000bc0:	3202      	adds	r2, #2
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8000bc2:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	483a      	ldr	r0, [pc, #232]	; (8000cb0 <sem1_execute.lto_priv.88+0x160>)
 8000bc8:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <sem1_execute.lto_priv.88+0x138>)
 8000bca:	f002 fea9 	bl	8003920 <chThdCreateStatic>
 8000bce:	6120      	str	r0, [r4, #16]
  chSemSignal(&sem1);
 8000bd0:	4838      	ldr	r0, [pc, #224]	; (8000cb4 <sem1_execute.lto_priv.88+0x164>)
 8000bd2:	f002 fe85 	bl	80038e0 <chSemSignal>
  chSemSignal(&sem1);
 8000bd6:	4837      	ldr	r0, [pc, #220]	; (8000cb4 <sem1_execute.lto_priv.88+0x164>)
 8000bd8:	f002 fe82 	bl	80038e0 <chSemSignal>
  chSemSignal(&sem1);
 8000bdc:	4835      	ldr	r0, [pc, #212]	; (8000cb4 <sem1_execute.lto_priv.88+0x164>)
 8000bde:	f002 fe7f 	bl	80038e0 <chSemSignal>
  chSemSignal(&sem1);
 8000be2:	4834      	ldr	r0, [pc, #208]	; (8000cb4 <sem1_execute.lto_priv.88+0x164>)
 8000be4:	f002 fe7c 	bl	80038e0 <chSemSignal>
  chSemSignal(&sem1);
 8000be8:	4832      	ldr	r0, [pc, #200]	; (8000cb4 <sem1_execute.lto_priv.88+0x164>)
 8000bea:	f002 fe79 	bl	80038e0 <chSemSignal>
  test_wait_threads();
 8000bee:	f001 fb9f 	bl	8002330 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	4930      	ldr	r1, [pc, #192]	; (8000cb8 <sem1_execute.lto_priv.88+0x168>)
 8000bf6:	f001 fbf3 	bl	80023e0 <_test_assert_sequence>
 8000bfa:	4606      	mov	r6, r0
 8000bfc:	b108      	cbz	r0, 8000c02 <sem1_execute.lto_priv.88+0xb2>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 8000bfe:	b003      	add	sp, #12
 8000c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c02:	69ab      	ldr	r3, [r5, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8000c04:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	4820      	ldr	r0, [pc, #128]	; (8000c8c <sem1_execute.lto_priv.88+0x13c>)
 8000c0c:	3205      	adds	r2, #5
 8000c0e:	9700      	str	r7, [sp, #0]
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <sem1_execute.lto_priv.88+0x138>)
 8000c12:	f002 fe85 	bl	8003920 <chThdCreateStatic>
 8000c16:	2320      	movs	r3, #32
 8000c18:	6020      	str	r0, [r4, #0]
 8000c1a:	f383 8811 	msr	BASEPRI, r3
 8000c1e:	4c25      	ldr	r4, [pc, #148]	; (8000cb4 <sem1_execute.lto_priv.88+0x164>)
 8000c20:	2502      	movs	r5, #2
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
    if (++sp->s_cnt <= (cnt_t)0) {
 8000c22:	4627      	mov	r7, r4
 8000c24:	e002      	b.n	8000c2c <sem1_execute.lto_priv.88+0xdc>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8000c26:	2d01      	cmp	r5, #1
 8000c28:	d00e      	beq.n	8000c48 <sem1_execute.lto_priv.88+0xf8>
 8000c2a:	2501      	movs	r5, #1
    if (++sp->s_cnt <= (cnt_t)0) {
 8000c2c:	68a3      	ldr	r3, [r4, #8]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	60a3      	str	r3, [r4, #8]
 8000c34:	dcf7      	bgt.n	8000c26 <sem1_execute.lto_priv.88+0xd6>
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000c36:	6838      	ldr	r0, [r7, #0]

  tqp->p_next = tp->p_next;
 8000c38:	6803      	ldr	r3, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000c3a:	605f      	str	r7, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000c3c:	603b      	str	r3, [r7, #0]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8000c3e:	f002 ff2f 	bl	8003aa0 <chSchReadyI>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8000c42:	2d01      	cmp	r5, #1
    if (++sp->s_cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8000c44:	6206      	str	r6, [r0, #32]
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8000c46:	d1f0      	bne.n	8000c2a <sem1_execute.lto_priv.88+0xda>
  chSysLock();
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
 8000c48:	f002 fdf2 	bl	8003830 <chSchRescheduleS>
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_wait_threads();
 8000c52:	f001 fb6d 	bl	8002330 <test_wait_threads>
 8000c56:	2320      	movs	r3, #32
 8000c58:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 8000c5c:	68a1      	ldr	r1, [r4, #8]
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f1a1 0101 	sub.w	r1, r1, #1
 8000c64:	fab1 f181 	clz	r1, r1
 8000c68:	0949      	lsrs	r1, r1, #5
 8000c6a:	f001 fbe1 	bl	8002430 <_test_assert>
 8000c6e:	b918      	cbnz	r0, 8000c78 <sem1_execute.lto_priv.88+0x128>
 8000c70:	f380 8811 	msr	BASEPRI, r0
}
 8000c74:	b003      	add	sp, #12
 8000c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c78:	f385 8811 	msr	BASEPRI, r5
 8000c7c:	b003      	add	sp, #12
 8000c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c80:	200011a0 	.word	0x200011a0
 8000c84:	08006004 	.word	0x08006004
 8000c88:	08000741 	.word	0x08000741
 8000c8c:	20000928 	.word	0x20000928
 8000c90:	200012f4 	.word	0x200012f4
 8000c94:	08006000 	.word	0x08006000
 8000c98:	20000a70 	.word	0x20000a70
 8000c9c:	0800600c 	.word	0x0800600c
 8000ca0:	20000bb8 	.word	0x20000bb8
 8000ca4:	08006008 	.word	0x08006008
 8000ca8:	20000d00 	.word	0x20000d00
 8000cac:	08006014 	.word	0x08006014
 8000cb0:	20000e48 	.word	0x20000e48
 8000cb4:	20000830 	.word	0x20000830
 8000cb8:	08006010 	.word	0x08006010
 8000cbc:	00000000 	.word	0x00000000

08000cc0 <thd2_execute.lto_priv.84>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8000cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000cc4:	4e47      	ldr	r6, [pc, #284]	; (8000de4 <thd2_execute.lto_priv.84+0x124>)

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8000cc6:	4d48      	ldr	r5, [pc, #288]	; (8000de8 <thd2_execute.lto_priv.84+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000cc8:	69b3      	ldr	r3, [r6, #24]
 8000cca:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8000e00 <thd2_execute.lto_priv.84+0x140>
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	4946      	ldr	r1, [pc, #280]	; (8000dec <thd2_execute.lto_priv.84+0x12c>)
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8000cd2:	b083      	sub	sp, #12

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8000cd4:	464b      	mov	r3, r9
 8000cd6:	9100      	str	r1, [sp, #0]
 8000cd8:	3a04      	subs	r2, #4
 8000cda:	4628      	mov	r0, r5
 8000cdc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000ce0:	f002 fe1e 	bl	8003920 <chThdCreateStatic>
 8000ce4:	69b3      	ldr	r3, [r6, #24]
 8000ce6:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8000e04 <thd2_execute.lto_priv.84+0x144>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	4940      	ldr	r1, [pc, #256]	; (8000df0 <thd2_execute.lto_priv.84+0x130>)
 8000cee:	f5a5 74a4 	sub.w	r4, r5, #328	; 0x148
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8000cf2:	f8c8 0004 	str.w	r0, [r8, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	9100      	str	r1, [sp, #0]
 8000cfa:	3a05      	subs	r2, #5
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000d02:	f002 fe0d 	bl	8003920 <chThdCreateStatic>
 8000d06:	69b3      	ldr	r3, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8000d08:	493a      	ldr	r1, [pc, #232]	; (8000df4 <thd2_execute.lto_priv.84+0x134>)
 8000d0a:	689a      	ldr	r2, [r3, #8]
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8000d0c:	f8c8 0000 	str.w	r0, [r8]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8000d10:	464b      	mov	r3, r9
 8000d12:	9100      	str	r1, [sp, #0]
 8000d14:	3a01      	subs	r2, #1
 8000d16:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8000d1a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000d1e:	f002 fdff 	bl	8003920 <chThdCreateStatic>
 8000d22:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8000d24:	4934      	ldr	r1, [pc, #208]	; (8000df8 <thd2_execute.lto_priv.84+0x138>)
 8000d26:	689a      	ldr	r2, [r3, #8]

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8000d28:	f8c8 0010 	str.w	r0, [r8, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8000d2c:	9100      	str	r1, [sp, #0]
 8000d2e:	3a02      	subs	r2, #2
 8000d30:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8000d34:	464b      	mov	r3, r9
 8000d36:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000d3a:	f002 fdf1 	bl	8003920 <chThdCreateStatic>
 8000d3e:	2220      	movs	r2, #32
 8000d40:	f8c8 000c 	str.w	r0, [r8, #12]
 8000d44:	f382 8811 	msr	BASEPRI, r2
 8000d48:	69b3      	ldr	r3, [r6, #24]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000d4a:	6971      	ldr	r1, [r6, #20]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8000d4c:	689b      	ldr	r3, [r3, #8]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000d4e:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8000e08 <thd2_execute.lto_priv.84+0x148>
 8000d52:	f1a3 0a03 	sub.w	sl, r3, #3
 8000d56:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8000e0c <thd2_execute.lto_priv.84+0x14c>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000d5a:	f505 73a4 	add.w	r3, r5, #328	; 0x148
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000d5e:	2700      	movs	r7, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000d60:	f505 7b1b 	add.w	fp, r5, #620	; 0x26c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000d64:	f8c4 a298 	str.w	sl, [r4, #664]	; 0x298
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000d68:	f8c4 a2cc 	str.w	sl, [r4, #716]	; 0x2cc

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000d6c:	f8c4 93b4 	str.w	r9, [r4, #948]	; 0x3b4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000d70:	2002      	movs	r0, #2
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000d72:	f505 79b6 	add.w	r9, r5, #364	; 0x16c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000d76:	f04f 0a01 	mov.w	sl, #1
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000d7a:	f505 75b8 	add.w	r5, r5, #368	; 0x170
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000d7e:	f8c4 62a0 	str.w	r6, [r4, #672]	; 0x2a0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000d82:	f8c4 b29c 	str.w	fp, [r4, #668]	; 0x29c
 8000d86:	f8c4 c3b8 	str.w	ip, [r4, #952]	; 0x3b8
 8000d8a:	f8c4 e3d4 	str.w	lr, [r4, #980]	; 0x3d4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000d8e:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000d92:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000d96:	f884 72ad 	strb.w	r7, [r4, #685]	; 0x2ad
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000d9a:	f8c4 72c8 	str.w	r7, [r4, #712]	; 0x2c8
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000d9e:	f8c4 72c4 	str.w	r7, [r4, #708]	; 0x2c4
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000da2:	f8c4 72a8 	str.w	r7, [r4, #680]	; 0x2a8
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000da6:	f884 a2ae 	strb.w	sl, [r4, #686]	; 0x2ae
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000daa:	610b      	str	r3, [r1, #16]
 8000dac:	6173      	str	r3, [r6, #20]
 8000dae:	f8c8 3008 	str.w	r3, [r8, #8]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000db2:	f8c4 92b4 	str.w	r9, [r4, #692]	; 0x2b4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000db6:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
  tqp->p_prev = (thread_t *)tqp;
 8000dba:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
 8000dbe:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  chThdStart(threads[2]);
 8000dc2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8000dc6:	f382 8811 	msr	BASEPRI, r2
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 8000dca:	f002 fe69 	bl	8003aa0 <chSchReadyI>
 8000dce:	f387 8811 	msr	BASEPRI, r7
  test_wait_threads();
 8000dd2:	f001 faad 	bl	8002330 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8000dd6:	4650      	mov	r0, sl
 8000dd8:	4908      	ldr	r1, [pc, #32]	; (8000dfc <thd2_execute.lto_priv.84+0x13c>)
}
 8000dda:	b003      	add	sp, #12
 8000ddc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8000de0:	f001 bafe 	b.w	80023e0 <_test_assert_sequence>
 8000de4:	200011a0 	.word	0x200011a0
 8000de8:	20000a70 	.word	0x20000a70
 8000dec:	08006008 	.word	0x08006008
 8000df0:	08006014 	.word	0x08006014
 8000df4:	08006004 	.word	0x08006004
 8000df8:	08006000 	.word	0x08006000
 8000dfc:	08006010 	.word	0x08006010
 8000e00:	08002491 	.word	0x08002491
 8000e04:	200012f4 	.word	0x200012f4
 8000e08:	0800600c 	.word	0x0800600c
 8000e0c:	08000241 	.word	0x08000241

08000e10 <thd4_execute.lto_priv.86>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 8000e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  systime_t time;

  test_wait_tick();
 8000e12:	f001 fa7d 	bl	8002310 <test_wait_tick>
 8000e16:	2620      	movs	r6, #32
 8000e18:	f386 8811 	msr	BASEPRI, r6
 8000e1c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000e20:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8000e22:	2300      	movs	r3, #0
 8000e24:	b2a4      	uxth	r4, r4
 8000e26:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 8000e2a:	2064      	movs	r0, #100	; 0x64
 8000e2c:	f003 f978 	bl	8004120 <chThdSleep>
  test_assert_time_window(1,
 8000e30:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8000e34:	f104 0267 	add.w	r2, r4, #103	; 0x67
 8000e38:	b289      	uxth	r1, r1
 8000e3a:	b292      	uxth	r2, r2
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f001 faa7 	bl	8002390 <_test_assert_time_window>
 8000e42:	b100      	cbz	r0, 8000e46 <thd4_execute.lto_priv.86+0x36>
 8000e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e46:	f386 8811 	msr	BASEPRI, r6
 8000e4a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8000e4c:	b2a4      	uxth	r4, r4
 8000e4e:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 8000e52:	2064      	movs	r0, #100	; 0x64
 8000e54:	f003 f964 	bl	8004120 <chThdSleep>
  test_assert_time_window(2,
 8000e58:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8000e5c:	f104 0267 	add.w	r2, r4, #103	; 0x67
 8000e60:	b289      	uxth	r1, r1
 8000e62:	b292      	uxth	r2, r2
 8000e64:	2002      	movs	r0, #2
 8000e66:	f001 fa93 	bl	8002390 <_test_assert_time_window>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d1ea      	bne.n	8000e44 <thd4_execute.lto_priv.86+0x34>
 8000e6e:	f386 8811 	msr	BASEPRI, r6
 8000e72:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8000e74:	b2a4      	uxth	r4, r4
 8000e76:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 8000e7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e7e:	f003 f94f 	bl	8004120 <chThdSleep>
  test_assert_time_window(3,
 8000e82:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
 8000e86:	f204 32eb 	addw	r2, r4, #1003	; 0x3eb
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	b292      	uxth	r2, r2
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f001 fa7e 	bl	8002390 <_test_assert_time_window>
 8000e94:	2800      	cmp	r0, #0
 8000e96:	d1d5      	bne.n	8000e44 <thd4_execute.lto_priv.86+0x34>
 8000e98:	f386 8811 	msr	BASEPRI, r6
 8000e9c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 8000ea4:	f104 0764 	add.w	r7, r4, #100	; 0x64
 8000ea8:	b2bf      	uxth	r7, r7
 8000eaa:	f386 8811 	msr	BASEPRI, r6
 8000eae:	6a69      	ldr	r1, [r5, #36]	; 0x24
 * @api
 */
void chThdSleepUntil(systime_t time) {

  chSysLock();
  time -= chVTGetSystemTimeX();
 8000eb0:	1a79      	subs	r1, r7, r1
 8000eb2:	b289      	uxth	r1, r1
  if (time > (systime_t)0) {
 8000eb4:	b959      	cbnz	r1, 8000ece <thd4_execute.lto_priv.86+0xbe>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f383 8811 	msr	BASEPRI, r3
  chThdSleepUntil(time);
  test_assert_time_window(4,
 8000ebc:	f104 0267 	add.w	r2, r4, #103	; 0x67
 8000ec0:	4639      	mov	r1, r7
                          time,
                          time + CH_CFG_ST_TIMEDELTA + 1);
}
 8000ec2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 8000ec6:	b292      	uxth	r2, r2
 8000ec8:	2004      	movs	r0, #4
 8000eca:	f001 ba61 	b.w	8002390 <_test_assert_time_window>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8000ece:	2008      	movs	r0, #8
 8000ed0:	f003 f85e 	bl	8003f90 <chSchGoSleepTimeoutS>
 8000ed4:	e7ef      	b.n	8000eb6 <thd4_execute.lto_priv.86+0xa6>
 8000ed6:	bf00      	nop
	...

08000ee0 <thd3_execute.lto_priv.85>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 8000ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000ee2:	4e49      	ldr	r6, [pc, #292]	; (8001008 <thd3_execute.lto_priv.85+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000ee4:	69b3      	ldr	r3, [r6, #24]
 8000ee6:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8000ee8:	1c65      	adds	r5, r4, #1
 8000eea:	4628      	mov	r0, r5
 8000eec:	f002 fcb0 	bl	8003850 <chThdSetPriority>
 8000ef0:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 8000ef2:	1b39      	subs	r1, r7, r4
 8000ef4:	fab1 f181 	clz	r1, r1
 8000ef8:	2001      	movs	r0, #1
 8000efa:	0949      	lsrs	r1, r1, #5
 8000efc:	f001 fa98 	bl	8002430 <_test_assert>
 8000f00:	b100      	cbz	r0, 8000f04 <thd3_execute.lto_priv.85+0x24>
 8000f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f04:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 8000f06:	2002      	movs	r0, #2
 8000f08:	6899      	ldr	r1, [r3, #8]
 8000f0a:	1a69      	subs	r1, r5, r1
 8000f0c:	fab1 f181 	clz	r1, r1
 8000f10:	0949      	lsrs	r1, r1, #5
 8000f12:	f001 fa8d 	bl	8002430 <_test_assert>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	d1f3      	bne.n	8000f02 <thd3_execute.lto_priv.85+0x22>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 8000f1a:	4638      	mov	r0, r7
 8000f1c:	f002 fc98 	bl	8003850 <chThdSetPriority>
  test_assert(3, p1 == prio + 1,
 8000f20:	1a29      	subs	r1, r5, r0
 8000f22:	fab1 f181 	clz	r1, r1
 8000f26:	2003      	movs	r0, #3
 8000f28:	0949      	lsrs	r1, r1, #5
 8000f2a:	f001 fa81 	bl	8002430 <_test_assert>
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	d1e7      	bne.n	8000f02 <thd3_execute.lto_priv.85+0x22>
 8000f32:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 8000f34:	2004      	movs	r0, #4
 8000f36:	6899      	ldr	r1, [r3, #8]
 8000f38:	1a61      	subs	r1, r4, r1
 8000f3a:	fab1 f181 	clz	r1, r1
 8000f3e:	0949      	lsrs	r1, r1, #5
 8000f40:	f001 fa76 	bl	8002430 <_test_assert>
 8000f44:	2800      	cmp	r0, #0
 8000f46:	d1dc      	bne.n	8000f02 <thd3_execute.lto_priv.85+0x22>
 8000f48:	2320      	movs	r3, #32
 8000f4a:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000f4e:	69b2      	ldr	r2, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 8000f50:	6893      	ldr	r3, [r2, #8]
 8000f52:	3302      	adds	r3, #2
 8000f54:	6093      	str	r3, [r2, #8]
 8000f56:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000f5a:	69b3      	ldr	r3, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 8000f5c:	1ca7      	adds	r7, r4, #2
 8000f5e:	6899      	ldr	r1, [r3, #8]
 8000f60:	2005      	movs	r0, #5
 8000f62:	1a79      	subs	r1, r7, r1
 8000f64:	fab1 f181 	clz	r1, r1
 8000f68:	0949      	lsrs	r1, r1, #5
 8000f6a:	f001 fa61 	bl	8002430 <_test_assert>
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	d1c7      	bne.n	8000f02 <thd3_execute.lto_priv.85+0x22>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 8000f72:	4628      	mov	r0, r5
 8000f74:	f002 fc6c 	bl	8003850 <chThdSetPriority>
  test_assert(6, p1 == prio,
 8000f78:	1b01      	subs	r1, r0, r4
 8000f7a:	fab1 f181 	clz	r1, r1
 8000f7e:	2006      	movs	r0, #6
 8000f80:	0949      	lsrs	r1, r1, #5
 8000f82:	f001 fa55 	bl	8002430 <_test_assert>
 8000f86:	2800      	cmp	r0, #0
 8000f88:	d1bb      	bne.n	8000f02 <thd3_execute.lto_priv.85+0x22>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 8000f8a:	69b3      	ldr	r3, [r6, #24]
 8000f8c:	2007      	movs	r0, #7
 8000f8e:	6899      	ldr	r1, [r3, #8]
 8000f90:	1a79      	subs	r1, r7, r1
 8000f92:	fab1 f181 	clz	r1, r1
 8000f96:	0949      	lsrs	r1, r1, #5
 8000f98:	f001 fa4a 	bl	8002430 <_test_assert>
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	d1b0      	bne.n	8000f02 <thd3_execute.lto_priv.85+0x22>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 8000fa0:	69b3      	ldr	r3, [r6, #24]
 8000fa2:	2008      	movs	r0, #8
 8000fa4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000fa6:	1a69      	subs	r1, r5, r1
 8000fa8:	fab1 f181 	clz	r1, r1
 8000fac:	0949      	lsrs	r1, r1, #5
 8000fae:	f001 fa3f 	bl	8002430 <_test_assert>
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d1a5      	bne.n	8000f02 <thd3_execute.lto_priv.85+0x22>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 8000fb6:	1ce7      	adds	r7, r4, #3
 8000fb8:	4638      	mov	r0, r7
 8000fba:	f002 fc49 	bl	8003850 <chThdSetPriority>
  test_assert(9, p1 == prio + 1,
 8000fbe:	1a28      	subs	r0, r5, r0
 8000fc0:	4241      	negs	r1, r0
 8000fc2:	4141      	adcs	r1, r0
 8000fc4:	2009      	movs	r0, #9
 8000fc6:	f001 fa33 	bl	8002430 <_test_assert>
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d199      	bne.n	8000f02 <thd3_execute.lto_priv.85+0x22>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 8000fce:	69b3      	ldr	r3, [r6, #24]
 8000fd0:	200a      	movs	r0, #10
 8000fd2:	6899      	ldr	r1, [r3, #8]
 8000fd4:	1a7a      	subs	r2, r7, r1
 8000fd6:	4251      	negs	r1, r2
 8000fd8:	4151      	adcs	r1, r2
 8000fda:	f001 fa29 	bl	8002430 <_test_assert>
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	d18f      	bne.n	8000f02 <thd3_execute.lto_priv.85+0x22>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 8000fe2:	69b3      	ldr	r3, [r6, #24]
 8000fe4:	200b      	movs	r0, #11
 8000fe6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000fe8:	1a7b      	subs	r3, r7, r1
 8000fea:	4259      	negs	r1, r3
 8000fec:	4159      	adcs	r1, r3
 8000fee:	f001 fa1f 	bl	8002430 <_test_assert>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d185      	bne.n	8000f02 <thd3_execute.lto_priv.85+0x22>
 8000ff6:	2320      	movs	r3, #32
 8000ff8:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000ffc:	69b3      	ldr	r3, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 8000ffe:	609c      	str	r4, [r3, #8]
  chThdGetSelfX()->p_realprio = prio;
 8001000:	63dc      	str	r4, [r3, #60]	; 0x3c
 8001002:	f380 8811 	msr	BASEPRI, r0
 8001006:	e77c      	b.n	8000f02 <thd3_execute.lto_priv.85+0x22>
 8001008:	200011a0 	.word	0x200011a0
 800100c:	00000000 	.word	0x00000000

08001010 <chTMStartMeasurementX.constprop.66>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001010:	4b01      	ldr	r3, [pc, #4]	; (8001018 <chTMStartMeasurementX.constprop.66+0x8>)
 8001012:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8001014:	6083      	str	r3, [r0, #8]
 8001016:	4770      	bx	lr
 8001018:	e0001000 	.word	0xe0001000
 800101c:	00000000 	.word	0x00000000

08001020 <Thread1>:

/*
 * Red LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8001020:	b580      	push	{r7, lr}

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palClearPad(GPIOC, DEBUG_LED1);
 8001022:	2740      	movs	r7, #64	; 0x40
 8001024:	46b8      	mov	r8, r7
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <Thread1+0x98>)
 8001028:	4a24      	ldr	r2, [pc, #144]	; (80010bc <Thread1+0x9c>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4c24      	ldr	r4, [pc, #144]	; (80010c0 <Thread1+0xa0>)
 800102e:	619a      	str	r2, [r3, #24]
 8001030:	f8c4 8014 	str.w	r8, [r4, #20]
    chThdSleepMilliseconds(500);
 8001034:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001038:	f003 f872 	bl	8004120 <chThdSleep>
    palSetPad(GPIOC, DEBUG_LED1);
 800103c:	6127      	str	r7, [r4, #16]
    chThdSleepMilliseconds(500);
 800103e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001042:	f003 f86d 	bl	8004120 <chThdSleep>
    palClearPad(GPIOC, DEBUG_LED1);
    chThdSleepMilliseconds(500);
    palClearPad(GPIOC, DEBUG_LED2);
 8001046:	2580      	movs	r5, #128	; 0x80
  while (true) {
    palClearPad(GPIOC, DEBUG_LED1);
    chThdSleepMilliseconds(500);
    palSetPad(GPIOC, DEBUG_LED1);
    chThdSleepMilliseconds(500);
    palClearPad(GPIOC, DEBUG_LED1);
 8001048:	6167      	str	r7, [r4, #20]
    chThdSleepMilliseconds(500);
 800104a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800104e:	f003 f867 	bl	8004120 <chThdSleep>
    palClearPad(GPIOC, DEBUG_LED2);
 8001052:	6165      	str	r5, [r4, #20]
    chThdSleepMilliseconds(500);
 8001054:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001058:	f003 f862 	bl	8004120 <chThdSleep>
    palSetPad(GPIOC, DEBUG_LED2);
 800105c:	6125      	str	r5, [r4, #16]
    chThdSleepMilliseconds(500);
 800105e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001062:	f003 f85d 	bl	8004120 <chThdSleep>
    palClearPad(GPIOC, DEBUG_LED2);
    chThdSleepMilliseconds(500);
    palClearPad(GPIOC, DEBUG_LED3);
 8001066:	f44f 7680 	mov.w	r6, #256	; 0x100
    chThdSleepMilliseconds(500);
    palClearPad(GPIOC, DEBUG_LED2);
    chThdSleepMilliseconds(500);
    palSetPad(GPIOC, DEBUG_LED2);
    chThdSleepMilliseconds(500);
    palClearPad(GPIOC, DEBUG_LED2);
 800106a:	6165      	str	r5, [r4, #20]
    chThdSleepMilliseconds(500);
 800106c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001070:	f003 f856 	bl	8004120 <chThdSleep>
    palClearPad(GPIOC, DEBUG_LED3);
 8001074:	6166      	str	r6, [r4, #20]
    chThdSleepMilliseconds(500);
 8001076:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800107a:	f003 f851 	bl	8004120 <chThdSleep>
    palSetPad(GPIOC, DEBUG_LED3);
 800107e:	6126      	str	r6, [r4, #16]
    chThdSleepMilliseconds(500);
 8001080:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001084:	f003 f84c 	bl	8004120 <chThdSleep>
    palClearPad(GPIOC, DEBUG_LED3);
    chThdSleepMilliseconds(500);
    palClearPad(GPIOC, DEBUG_LED4);
 8001088:	f44f 7500 	mov.w	r5, #512	; 0x200
    chThdSleepMilliseconds(500);
    palClearPad(GPIOC, DEBUG_LED3);
    chThdSleepMilliseconds(500);
    palSetPad(GPIOC, DEBUG_LED3);
    chThdSleepMilliseconds(500);
    palClearPad(GPIOC, DEBUG_LED3);
 800108c:	6166      	str	r6, [r4, #20]
    chThdSleepMilliseconds(500);
 800108e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001092:	f003 f845 	bl	8004120 <chThdSleep>
    palClearPad(GPIOC, DEBUG_LED4);
 8001096:	6165      	str	r5, [r4, #20]
    chThdSleepMilliseconds(500);
 8001098:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800109c:	f003 f840 	bl	8004120 <chThdSleep>
    palSetPad(GPIOC, DEBUG_LED4);
 80010a0:	6125      	str	r5, [r4, #16]
    chThdSleepMilliseconds(500);
 80010a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a6:	f003 f83b 	bl	8004120 <chThdSleep>
    palClearPad(GPIOC, DEBUG_LED4);
 80010aa:	6165      	str	r5, [r4, #20]
    chThdSleepMilliseconds(500);
 80010ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b0:	f003 f836 	bl	8004120 <chThdSleep>
 80010b4:	e7bc      	b.n	8001030 <Thread1+0x10>
 80010b6:	bf00      	nop
 80010b8:	200011a0 	.word	0x200011a0
 80010bc:	080064e0 	.word	0x080064e0
 80010c0:	40011000 	.word	0x40011000
	...

080010d0 <bmk13_execute>:
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 80010d0:	b510      	push	{r4, lr}

  test_print("--- System: ");
 80010d2:	482f      	ldr	r0, [pc, #188]	; (8001190 <bmk13_execute+0xc0>)
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 80010d4:	4c2f      	ldr	r4, [pc, #188]	; (8001194 <bmk13_execute+0xc4>)
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 80010d6:	f001 fa03 	bl	80024e0 <test_print>
  test_printn(sizeof(ch_system_t));
 80010da:	f44f 70a8 	mov.w	r0, #336	; 0x150
 80010de:	f001 fa0f 	bl	8002500 <test_printn>
  test_println(" bytes");
 80010e2:	4620      	mov	r0, r4
 80010e4:	f001 f9dc 	bl	80024a0 <test_println>
  test_print("--- Thread: ");
 80010e8:	482b      	ldr	r0, [pc, #172]	; (8001198 <bmk13_execute+0xc8>)
 80010ea:	f001 f9f9 	bl	80024e0 <test_print>
  test_printn(sizeof(thread_t));
 80010ee:	2044      	movs	r0, #68	; 0x44
 80010f0:	f001 fa06 	bl	8002500 <test_printn>
  test_println(" bytes");
 80010f4:	4620      	mov	r0, r4
 80010f6:	f001 f9d3 	bl	80024a0 <test_println>
  test_print("--- Timer : ");
 80010fa:	4828      	ldr	r0, [pc, #160]	; (800119c <bmk13_execute+0xcc>)
 80010fc:	f001 f9f0 	bl	80024e0 <test_print>
  test_printn(sizeof(virtual_timer_t));
 8001100:	2014      	movs	r0, #20
 8001102:	f001 f9fd 	bl	8002500 <test_printn>
  test_println(" bytes");
 8001106:	4620      	mov	r0, r4
 8001108:	f001 f9ca 	bl	80024a0 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 800110c:	4824      	ldr	r0, [pc, #144]	; (80011a0 <bmk13_execute+0xd0>)
 800110e:	f001 f9e7 	bl	80024e0 <test_print>
  test_printn(sizeof(semaphore_t));
 8001112:	200c      	movs	r0, #12
 8001114:	f001 f9f4 	bl	8002500 <test_printn>
  test_println(" bytes");
 8001118:	4620      	mov	r0, r4
 800111a:	f001 f9c1 	bl	80024a0 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 800111e:	4821      	ldr	r0, [pc, #132]	; (80011a4 <bmk13_execute+0xd4>)
 8001120:	f001 f9de 	bl	80024e0 <test_print>
  test_printn(sizeof(event_source_t));
 8001124:	2004      	movs	r0, #4
 8001126:	f001 f9eb 	bl	8002500 <test_printn>
  test_println(" bytes");
 800112a:	4620      	mov	r0, r4
 800112c:	f001 f9b8 	bl	80024a0 <test_println>
  test_print("--- EventL: ");
 8001130:	481d      	ldr	r0, [pc, #116]	; (80011a8 <bmk13_execute+0xd8>)
 8001132:	f001 f9d5 	bl	80024e0 <test_print>
  test_printn(sizeof(event_listener_t));
 8001136:	2014      	movs	r0, #20
 8001138:	f001 f9e2 	bl	8002500 <test_printn>
  test_println(" bytes");
 800113c:	4620      	mov	r0, r4
 800113e:	f001 f9af 	bl	80024a0 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 8001142:	481a      	ldr	r0, [pc, #104]	; (80011ac <bmk13_execute+0xdc>)
 8001144:	f001 f9cc 	bl	80024e0 <test_print>
  test_printn(sizeof(mutex_t));
 8001148:	2010      	movs	r0, #16
 800114a:	f001 f9d9 	bl	8002500 <test_printn>
  test_println(" bytes");
 800114e:	4620      	mov	r0, r4
 8001150:	f001 f9a6 	bl	80024a0 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 8001154:	4816      	ldr	r0, [pc, #88]	; (80011b0 <bmk13_execute+0xe0>)
 8001156:	f001 f9c3 	bl	80024e0 <test_print>
  test_printn(sizeof(condition_variable_t));
 800115a:	2008      	movs	r0, #8
 800115c:	f001 f9d0 	bl	8002500 <test_printn>
  test_println(" bytes");
 8001160:	4620      	mov	r0, r4
 8001162:	f001 f99d 	bl	80024a0 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 8001166:	4813      	ldr	r0, [pc, #76]	; (80011b4 <bmk13_execute+0xe4>)
 8001168:	f001 f9ba 	bl	80024e0 <test_print>
  test_printn(sizeof(io_queue_t));
 800116c:	2024      	movs	r0, #36	; 0x24
 800116e:	f001 f9c7 	bl	8002500 <test_printn>
  test_println(" bytes");
 8001172:	4620      	mov	r0, r4
 8001174:	f001 f994 	bl	80024a0 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 8001178:	480f      	ldr	r0, [pc, #60]	; (80011b8 <bmk13_execute+0xe8>)
 800117a:	f001 f9b1 	bl	80024e0 <test_print>
  test_printn(sizeof(mailbox_t));
 800117e:	2028      	movs	r0, #40	; 0x28
 8001180:	f001 f9be 	bl	8002500 <test_printn>
  test_println(" bytes");
 8001184:	4620      	mov	r0, r4
#endif
}
 8001186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 800118a:	f001 b989 	b.w	80024a0 <test_println>
 800118e:	bf00      	nop
 8001190:	080064e8 	.word	0x080064e8
 8001194:	080064f8 	.word	0x080064f8
 8001198:	08006500 	.word	0x08006500
 800119c:	08006510 	.word	0x08006510
 80011a0:	08006520 	.word	0x08006520
 80011a4:	08006530 	.word	0x08006530
 80011a8:	08006540 	.word	0x08006540
 80011ac:	08006550 	.word	0x08006550
 80011b0:	08006560 	.word	0x08006560
 80011b4:	08006570 	.word	0x08006570
 80011b8:	08006580 	.word	0x08006580
 80011bc:	00000000 	.word	0x00000000

080011c0 <chThdCreateFromHeap.constprop.63>:
 *                      the thread into the working space area.
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 80011c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011c4:	4607      	mov	r7, r0
 80011c6:	4688      	mov	r8, r1
                              tprio_t prio, tfunc_t pf, void *arg) {
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 80011c8:	481e      	ldr	r0, [pc, #120]	; (8001244 <chThdCreateFromHeap.constprop.63+0x84>)
 80011ca:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80011ce:	f001 fa8f 	bl	80026f0 <chHeapAlloc>
  if (wsp == NULL) {
 80011d2:	4604      	mov	r4, r0
 80011d4:	b398      	cbz	r0, 800123e <chThdCreateFromHeap.constprop.63+0x7e>
 80011d6:	2320      	movs	r3, #32
 80011d8:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80011dc:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <chThdCreateFromHeap.constprop.63+0x88>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80011de:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800124c <chThdCreateFromHeap.constprop.63+0x8c>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80011e2:	f8d2 c014 	ldr.w	ip, [r2, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80011e6:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8001250 <chThdCreateFromHeap.constprop.63+0x90>
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80011ea:	2500      	movs	r5, #0
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80011ec:	f04f 0e01 	mov.w	lr, #1
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80011f0:	f100 0328 	add.w	r3, r0, #40	; 0x28

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80011f4:	f500 7b92 	add.w	fp, r0, #292	; 0x124
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80011f8:	f100 0624 	add.w	r6, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80011fc:	2102      	movs	r1, #2
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80011fe:	6087      	str	r7, [r0, #8]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001200:	f8c0 b00c 	str.w	fp, [r0, #12]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001204:	7701      	strb	r1, [r0, #28]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001206:	6102      	str	r2, [r0, #16]
 8001208:	f8c0 c014 	str.w	ip, [r0, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800120c:	f8c0 8128 	str.w	r8, [r0, #296]	; 0x128
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001210:	63c7      	str	r7, [r0, #60]	; 0x3c

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001212:	f8c0 a124 	str.w	sl, [r0, #292]	; 0x124
 8001216:	f8c0 9144 	str.w	r9, [r0, #324]	; 0x144
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800121a:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800121c:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800121e:	6185      	str	r5, [r0, #24]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001220:	f880 e01e 	strb.w	lr, [r0, #30]
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8001224:	4629      	mov	r1, r5
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001226:	f8cc 0010 	str.w	r0, [ip, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800122a:	6246      	str	r6, [r0, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
 800122c:	f880 e01d 	strb.w	lr, [r0, #29]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001230:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8001232:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001234:	6150      	str	r0, [r2, #20]
  chSchWakeupS(tp, MSG_OK);
 8001236:	f002 fb23 	bl	8003880 <chSchWakeupS>
 800123a:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800123e:	4620      	mov	r0, r4
 8001240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001244:	20001320 	.word	0x20001320
 8001248:	200011a0 	.word	0x200011a0
 800124c:	080050d1 	.word	0x080050d1
 8001250:	08000241 	.word	0x08000241
	...

08001260 <chThdCreateFromMemoryPool.constprop.62>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8001260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8001264:	4e21      	ldr	r6, [pc, #132]	; (80012ec <chThdCreateFromMemoryPool.constprop.62+0x8c>)
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8001266:	4680      	mov	r8, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8001268:	4630      	mov	r0, r6
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 800126a:	4689      	mov	r9, r1
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 800126c:	f001 f9b8 	bl	80025e0 <chPoolAlloc>
  if (wsp == NULL) {
 8001270:	4604      	mov	r4, r0
 8001272:	2800      	cmp	r0, #0
 8001274:	d037      	beq.n	80012e6 <chThdCreateFromMemoryPool.constprop.62+0x86>
 8001276:	2320      	movs	r3, #32
 8001278:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800127c:	6873      	ldr	r3, [r6, #4]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <chThdCreateFromMemoryPool.constprop.62+0x90>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001280:	3b24      	subs	r3, #36	; 0x24
 8001282:	4d1c      	ldr	r5, [pc, #112]	; (80012f4 <chThdCreateFromMemoryPool.constprop.62+0x94>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001284:	f8d2 a014 	ldr.w	sl, [r2, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001288:	eb00 0e03 	add.w	lr, r0, r3
 800128c:	491a      	ldr	r1, [pc, #104]	; (80012f8 <chThdCreateFromMemoryPool.constprop.62+0x98>)
 800128e:	f8c0 e00c 	str.w	lr, [r0, #12]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001292:	f04f 0c02 	mov.w	ip, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001296:	50c5      	str	r5, [r0, r3]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8001298:	f100 0724 	add.w	r7, r0, #36	; 0x24
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800129c:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800129e:	f100 0328 	add.w	r3, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80012a2:	f04f 0b01 	mov.w	fp, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80012a6:	f8ce 9004 	str.w	r9, [lr, #4]
 80012aa:	f8ce 1020 	str.w	r1, [lr, #32]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80012ae:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80012b2:	6102      	str	r2, [r0, #16]
 80012b4:	f8c0 a014 	str.w	sl, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80012b8:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80012bc:	f880 b01e 	strb.w	fp, [r0, #30]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80012c0:	f880 c01c 	strb.w	ip, [r0, #28]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80012c4:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80012c6:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80012c8:	6185      	str	r5, [r0, #24]

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 80012ca:	4629      	mov	r1, r5
  REG_INSERT(tp);
 80012cc:	f8ca 0010 	str.w	r0, [sl, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80012d0:	6247      	str	r7, [r0, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MPOOL;
 80012d2:	f880 c01d 	strb.w	ip, [r0, #29]
  tp->p_mpool = mp;
 80012d6:	6406      	str	r6, [r0, #64]	; 0x40
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80012d8:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 80012da:	62c3      	str	r3, [r0, #44]	; 0x2c
 80012dc:	6150      	str	r0, [r2, #20]
  chSchWakeupS(tp, MSG_OK);
 80012de:	f002 facf 	bl	8003880 <chSchWakeupS>
 80012e2:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 80012e6:	4620      	mov	r0, r4
 80012e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012ec:	20000f94 	.word	0x20000f94
 80012f0:	200011a0 	.word	0x200011a0
 80012f4:	080050d1 	.word	0x080050d1
 80012f8:	08000241 	.word	0x08000241
 80012fc:	00000000 	.word	0x00000000

08001300 <chSemSignalWait.constprop.58>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8001300:	b510      	push	{r4, lr}
 8001302:	2320      	movs	r3, #32
 8001304:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= (cnt_t)0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
 8001308:	4c15      	ldr	r4, [pc, #84]	; (8001360 <chSemSignalWait.constprop.58+0x60>)
 800130a:	68a3      	ldr	r3, [r4, #8]
 800130c:	3301      	adds	r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	60a3      	str	r3, [r4, #8]
 8001312:	dd1b      	ble.n	800134c <chSemSignalWait.constprop.58+0x4c>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
 8001314:	3b01      	subs	r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	60a3      	str	r3, [r4, #8]
 800131a:	4a11      	ldr	r2, [pc, #68]	; (8001360 <chSemSignalWait.constprop.58+0x60>)
 800131c:	db06      	blt.n	800132c <chSemSignalWait.constprop.58+0x2c>
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 800131e:	f002 fa87 	bl	8003830 <chSchRescheduleS>
    msg = MSG_OK;
 8001322:	2000      	movs	r0, #0
 8001324:	2300      	movs	r3, #0
 8001326:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 800132a:	bd10      	pop	{r4, pc}
  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
 800132c:	490d      	ldr	r1, [pc, #52]	; (8001364 <chSemSignalWait.constprop.58+0x64>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800132e:	6853      	ldr	r3, [r2, #4]
 8001330:	698c      	ldr	r4, [r1, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 8001332:	2005      	movs	r0, #5
 8001334:	e884 000c 	stmia.w	r4, {r2, r3}
  tp->p_prev->p_next = tp;
 8001338:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
 800133a:	6222      	str	r2, [r4, #32]
  tqp->p_prev = tp;
 800133c:	6054      	str	r4, [r2, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 800133e:	f002 fb2f 	bl	80039a0 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 8001342:	6a20      	ldr	r0, [r4, #32]
 8001344:	2300      	movs	r3, #0
 8001346:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 800134a:	bd10      	pop	{r4, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800134c:	6820      	ldr	r0, [r4, #0]

  tqp->p_next = tp->p_next;
 800134e:	6803      	ldr	r3, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001350:	605c      	str	r4, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001352:	6023      	str	r3, [r4, #0]
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 8001354:	f002 fba4 	bl	8003aa0 <chSchReadyI>
 8001358:	2200      	movs	r2, #0
 800135a:	68a3      	ldr	r3, [r4, #8]
 800135c:	6202      	str	r2, [r0, #32]
 800135e:	e7d9      	b.n	8001314 <chSemSignalWait.constprop.58+0x14>
 8001360:	20000830 	.word	0x20000830
 8001364:	200011a0 	.word	0x200011a0
	...

08001370 <chCondSignal.constprop.54>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8001370:	b508      	push	{r3, lr}
 8001372:	2320      	movs	r3, #32
 8001374:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <chCondSignal.constprop.54+0x24>)
 800137a:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue)) {
 800137c:	4298      	cmp	r0, r3
 800137e:	d005      	beq.n	800138c <chCondSignal.constprop.54+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001380:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 8001382:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001384:	6053      	str	r3, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	f002 fa7a 	bl	8003880 <chSchWakeupS>
 800138c:	2300      	movs	r3, #0
 800138e:	f383 8811 	msr	BASEPRI, r3
 8001392:	bd08      	pop	{r3, pc}
 8001394:	20000828 	.word	0x20000828
	...

080013a0 <chCondSignalI.constprop.53>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <chCondSignalI.constprop.53+0x20>)
 80013a2:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d00a      	beq.n	80013be <chCondSignalI.constprop.53+0x1e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80013a8:	6811      	ldr	r1, [r2, #0]
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondSignalI(condition_variable_t *cp) {
 80013aa:	b410      	push	{r4}
  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 80013ac:	2400      	movs	r4, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80013ae:	604b      	str	r3, [r1, #4]
 80013b0:	6214      	str	r4, [r2, #32]
    (void) chSchReadyI(tp);
 80013b2:	4610      	mov	r0, r2
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80013b4:	6019      	str	r1, [r3, #0]
  }
}
 80013b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
 80013ba:	f002 bb71 	b.w	8003aa0 <chSchReadyI>
 80013be:	4770      	bx	lr
 80013c0:	20000828 	.word	0x20000828
	...

080013d0 <chEvtGetAndClearEvents.constprop.45>:
 80013d0:	2320      	movs	r3, #32
 80013d2:	f383 8811 	msr	BASEPRI, r3
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <chEvtGetAndClearEvents.constprop.45+0x18>)
  currp->p_epending &= ~events;
 80013d8:	2300      	movs	r3, #0
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 80013da:	6992      	ldr	r2, [r2, #24]
 80013dc:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->p_epending &= ~events;
 80013de:	6353      	str	r3, [r2, #52]	; 0x34
 80013e0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	200011a0 	.word	0x200011a0
 80013ec:	00000000 	.word	0x00000000

080013f0 <chEvtWaitOne.constprop.41>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 80013f0:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <chEvtWaitOne.constprop.41+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 80013f2:	b510      	push	{r4, lr}
 80013f4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80013f6:	6994      	ldr	r4, [r2, #24]
 80013f8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 80013fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80013fe:	b933      	cbnz	r3, 800140e <chEvtWaitOne.constprop.41+0x1e>
    ctp->p_u.ewmask = events;
 8001400:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001404:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8001406:	200a      	movs	r0, #10
 8001408:	f002 faca 	bl	80039a0 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800140c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 800140e:	4258      	negs	r0, r3
 8001410:	4018      	ands	r0, r3
  ctp->p_epending &= ~m;
 8001412:	ea23 0300 	bic.w	r3, r3, r0
 8001416:	6363      	str	r3, [r4, #52]	; 0x34
 8001418:	2300      	movs	r3, #0
 800141a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800141e:	bd10      	pop	{r4, pc}
 8001420:	200011a0 	.word	0x200011a0
	...

08001430 <chEvtWaitAny.constprop.40>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8001430:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <chEvtWaitAny.constprop.40+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8001432:	b510      	push	{r4, lr}
 8001434:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8001436:	6994      	ldr	r4, [r2, #24]
 8001438:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800143c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800143e:	b930      	cbnz	r0, 800144e <chEvtWaitAny.constprop.40+0x1e>
    ctp->p_u.ewmask = events;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    chSchGoSleepS(CH_STATE_WTOREVT);
 8001444:	200a      	movs	r0, #10
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
    ctp->p_u.ewmask = events;
 8001446:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8001448:	f002 faaa 	bl	80039a0 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800144c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 800144e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001450:	2200      	movs	r2, #0
 8001452:	ea23 0300 	bic.w	r3, r3, r0
 8001456:	6363      	str	r3, [r4, #52]	; 0x34
 8001458:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return m;
}
 800145c:	bd10      	pop	{r4, pc}
 800145e:	bf00      	nop
 8001460:	200011a0 	.word	0x200011a0
	...

08001470 <chMBPost.constprop.26>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8001470:	b570      	push	{r4, r5, r6, lr}
 8001472:	2320      	movs	r3, #32
 8001474:	4606      	mov	r6, r0
 8001476:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 800147a:	4c0d      	ldr	r4, [pc, #52]	; (80014b0 <chMBPost.constprop.26+0x40>)
 800147c:	f104 001c 	add.w	r0, r4, #28
 8001480:	f002 fdae 	bl	8003fe0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8001484:	4605      	mov	r5, r0
 8001486:	b970      	cbnz	r0, 80014a6 <chMBPost.constprop.26+0x36>
    *mbp->mb_wrptr++ = msg;
 8001488:	68a2      	ldr	r2, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
 800148a:	6861      	ldr	r1, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 800148c:	1d13      	adds	r3, r2, #4
    if (mbp->mb_wrptr >= mbp->mb_top) {
 800148e:	428b      	cmp	r3, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8001490:	60a3      	str	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 8001492:	bf28      	it	cs
 8001494:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8001496:	6016      	str	r6, [r2, #0]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_fullsem);
 8001498:	4806      	ldr	r0, [pc, #24]	; (80014b4 <chMBPost.constprop.26+0x44>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 800149a:	bf28      	it	cs
 800149c:	60a3      	strcs	r3, [r4, #8]
    }
    chSemSignalI(&mbp->mb_fullsem);
 800149e:	f002 fc9f 	bl	8003de0 <chSemSignalI>
    chSchRescheduleS();
 80014a2:	f002 f9c5 	bl	8003830 <chSchRescheduleS>
 80014a6:	2300      	movs	r3, #0
 80014a8:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 80014ac:	4628      	mov	r0, r5
 80014ae:	bd70      	pop	{r4, r5, r6, pc}
 80014b0:	20000800 	.word	0x20000800
 80014b4:	20000810 	.word	0x20000810
	...

080014c0 <chMBPostI.constprop.25>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 80014c0:	b538      	push	{r3, r4, r5, lr}
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <chMBPostI.constprop.25+0x34>)
 80014c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 80014c6:	2a00      	cmp	r2, #0
 80014c8:	dd10      	ble.n	80014ec <chMBPostI.constprop.25+0x2c>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 80014ca:	689c      	ldr	r4, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top) {
 80014cc:	685d      	ldr	r5, [r3, #4]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 80014ce:	1d21      	adds	r1, r4, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 80014d0:	3a01      	subs	r2, #1
  if (mbp->mb_wrptr >= mbp->mb_top) {
 80014d2:	42a9      	cmp	r1, r5
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
     mbp->mb_wrptr = mbp->mb_buffer;
 80014d6:	bf28      	it	cs
 80014d8:	681a      	ldrcs	r2, [r3, #0]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 80014da:	6099      	str	r1, [r3, #8]
 80014dc:	6020      	str	r0, [r4, #0]
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);
 80014de:	4806      	ldr	r0, [pc, #24]	; (80014f8 <chMBPostI.constprop.25+0x38>)
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
 80014e0:	bf28      	it	cs
 80014e2:	609a      	strcs	r2, [r3, #8]
  }
  chSemSignalI(&mbp->mb_fullsem);
 80014e4:	f002 fc7c 	bl	8003de0 <chSemSignalI>

  return MSG_OK;
 80014e8:	2000      	movs	r0, #0
 80014ea:	bd38      	pop	{r3, r4, r5, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);

  return MSG_OK;
}
 80014f0:	bd38      	pop	{r3, r4, r5, pc}
 80014f2:	bf00      	nop
 80014f4:	20000800 	.word	0x20000800
 80014f8:	20000810 	.word	0x20000810
 80014fc:	00000000 	.word	0x00000000

08001500 <chMBPostAhead.constprop.24>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8001500:	b570      	push	{r4, r5, r6, lr}
 8001502:	2320      	movs	r3, #32
 8001504:	4606      	mov	r6, r0
 8001506:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 800150a:	4c0e      	ldr	r4, [pc, #56]	; (8001544 <chMBPostAhead.constprop.24+0x44>)
 800150c:	f104 001c 	add.w	r0, r4, #28
 8001510:	f002 fd66 	bl	8003fe0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8001514:	4605      	mov	r5, r0
 8001516:	b958      	cbnz	r0, 8001530 <chMBPostAhead.constprop.24+0x30>
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8001518:	68e3      	ldr	r3, [r4, #12]
 800151a:	6822      	ldr	r2, [r4, #0]
 800151c:	3b04      	subs	r3, #4
 800151e:	4293      	cmp	r3, r2
 8001520:	60e3      	str	r3, [r4, #12]
 8001522:	d30a      	bcc.n	800153a <chMBPostAhead.constprop.24+0x3a>
      mbp->mb_rdptr = mbp->mb_top - 1;
    }
    *mbp->mb_rdptr = msg;
 8001524:	601e      	str	r6, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 8001526:	4808      	ldr	r0, [pc, #32]	; (8001548 <chMBPostAhead.constprop.24+0x48>)
 8001528:	f002 fc5a 	bl	8003de0 <chSemSignalI>
    chSchRescheduleS();
 800152c:	f002 f980 	bl	8003830 <chSchRescheduleS>
 8001530:	2300      	movs	r3, #0
 8001532:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 8001536:	4628      	mov	r0, r5
 8001538:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
      mbp->mb_rdptr = mbp->mb_top - 1;
 800153a:	6863      	ldr	r3, [r4, #4]
 800153c:	3b04      	subs	r3, #4
 800153e:	60e3      	str	r3, [r4, #12]
 8001540:	e7f0      	b.n	8001524 <chMBPostAhead.constprop.24+0x24>
 8001542:	bf00      	nop
 8001544:	20000800 	.word	0x20000800
 8001548:	20000810 	.word	0x20000810
 800154c:	00000000 	.word	0x00000000

08001550 <chMBPostAheadI.constprop.23>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8001550:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <chMBPostAheadI.constprop.23+0x34>)
 8001552:	6a51      	ldr	r1, [r2, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8001554:	2900      	cmp	r1, #0
 8001556:	dd11      	ble.n	800157c <chMBPostAheadI.constprop.23+0x2c>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8001558:	68d3      	ldr	r3, [r2, #12]
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 800155a:	b510      	push	{r4, lr}

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 800155c:	6814      	ldr	r4, [r2, #0]
 800155e:	3b04      	subs	r3, #4
 8001560:	3901      	subs	r1, #1
 8001562:	42a3      	cmp	r3, r4
 8001564:	6251      	str	r1, [r2, #36]	; 0x24
 8001566:	60d3      	str	r3, [r2, #12]
 8001568:	d202      	bcs.n	8001570 <chMBPostAheadI.constprop.23+0x20>
    mbp->mb_rdptr = mbp->mb_top - 1;
 800156a:	6853      	ldr	r3, [r2, #4]
 800156c:	3b04      	subs	r3, #4
 800156e:	60d3      	str	r3, [r2, #12]
  }
  *mbp->mb_rdptr = msg;
 8001570:	6018      	str	r0, [r3, #0]
  chSemSignalI(&mbp->mb_fullsem);
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <chMBPostAheadI.constprop.23+0x38>)
 8001574:	f002 fc34 	bl	8003de0 <chSemSignalI>

  return MSG_OK;
 8001578:	2000      	movs	r0, #0
 800157a:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 800157c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000800 	.word	0x20000800
 8001588:	20000810 	.word	0x20000810
 800158c:	00000000 	.word	0x00000000

08001590 <chMBFetch.constprop.22>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 8001590:	b570      	push	{r4, r5, r6, lr}
 8001592:	2320      	movs	r3, #32
 8001594:	4606      	mov	r6, r0
 8001596:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
 800159a:	4c0e      	ldr	r4, [pc, #56]	; (80015d4 <chMBFetch.constprop.22+0x44>)
 800159c:	f104 0010 	add.w	r0, r4, #16
 80015a0:	f002 fd1e 	bl	8003fe0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 80015a4:	4605      	mov	r5, r0
 80015a6:	b978      	cbnz	r0, 80015c8 <chMBFetch.constprop.22+0x38>
    *msgp = *mbp->mb_rdptr++;
 80015a8:	68e3      	ldr	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
 80015aa:	6862      	ldr	r2, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 80015ac:	6819      	ldr	r1, [r3, #0]
 80015ae:	3304      	adds	r3, #4
    if (mbp->mb_rdptr >= mbp->mb_top) {
 80015b0:	4293      	cmp	r3, r2
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 80015b2:	60e3      	str	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 80015b4:	bf28      	it	cs
 80015b6:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 80015b8:	6031      	str	r1, [r6, #0]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_emptysem);
 80015ba:	4807      	ldr	r0, [pc, #28]	; (80015d8 <chMBFetch.constprop.22+0x48>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 80015bc:	bf28      	it	cs
 80015be:	60e3      	strcs	r3, [r4, #12]
    }
    chSemSignalI(&mbp->mb_emptysem);
 80015c0:	f002 fc0e 	bl	8003de0 <chSemSignalI>
    chSchRescheduleS();
 80015c4:	f002 f934 	bl	8003830 <chSchRescheduleS>
 80015c8:	2300      	movs	r3, #0
 80015ca:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, timeout);
  chSysUnlock();

  return rdymsg;
}
 80015ce:	4628      	mov	r0, r5
 80015d0:	bd70      	pop	{r4, r5, r6, pc}
 80015d2:	bf00      	nop
 80015d4:	20000800 	.word	0x20000800
 80015d8:	2000081c 	.word	0x2000081c
 80015dc:	00000000 	.word	0x00000000

080015e0 <chMBFetchI.constprop.21>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <chMBFetchI.constprop.21+0x34>)
 80015e2:	699a      	ldr	r2, [r3, #24]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
 80015e4:	2a00      	cmp	r2, #0
 80015e6:	dd12      	ble.n	800160e <chMBFetchI.constprop.21+0x2e>
 80015e8:	1e51      	subs	r1, r2, #1
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80015ea:	68da      	ldr	r2, [r3, #12]
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 80015ec:	b510      	push	{r4, lr}
 80015ee:	6199      	str	r1, [r3, #24]
  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
 80015f0:	6859      	ldr	r1, [r3, #4]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80015f2:	6814      	ldr	r4, [r2, #0]
 80015f4:	3204      	adds	r2, #4
  if (mbp->mb_rdptr >= mbp->mb_top) {
 80015f6:	428a      	cmp	r2, r1

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80015f8:	60da      	str	r2, [r3, #12]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 80015fa:	bf28      	it	cs
 80015fc:	681a      	ldrcs	r2, [r3, #0]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80015fe:	6004      	str	r4, [r0, #0]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_emptysem);
 8001600:	4805      	ldr	r0, [pc, #20]	; (8001618 <chMBFetchI.constprop.21+0x38>)
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 8001602:	bf28      	it	cs
 8001604:	60da      	strcs	r2, [r3, #12]
  }
  chSemSignalI(&mbp->mb_emptysem);
 8001606:	f002 fbeb 	bl	8003de0 <chSemSignalI>

  return MSG_OK;
 800160a:	2000      	movs	r0, #0
 800160c:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 800160e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001612:	4770      	bx	lr
 8001614:	20000800 	.word	0x20000800
 8001618:	2000081c 	.word	0x2000081c
 800161c:	00000000 	.word	0x00000000

08001620 <test_start_timer.constprop.2>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 8001620:	b508      	push	{r3, lr}

  systime_t duration = MS2ST(ms);
  test_timer_done = FALSE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <test_start_timer.constprop.2+0x30>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	2320      	movs	r3, #32
 800162a:	f383 8811 	msr	BASEPRI, r3
 800162e:	4809      	ldr	r0, [pc, #36]	; (8001654 <test_start_timer.constprop.2+0x34>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8001630:	68c3      	ldr	r3, [r0, #12]
 8001632:	b10b      	cbz	r3, 8001638 <test_start_timer.constprop.2+0x18>
    chVTDoResetI(vtp);
 8001634:	f002 fc2c 	bl	8003e90 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8001638:	4806      	ldr	r0, [pc, #24]	; (8001654 <test_start_timer.constprop.2+0x34>)
 800163a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800163e:	4a06      	ldr	r2, [pc, #24]	; (8001658 <test_start_timer.constprop.2+0x38>)
 8001640:	2300      	movs	r3, #0
 8001642:	f002 fc65 	bl	8003f10 <chVTDoSetI>
 8001646:	2300      	movs	r3, #0
 8001648:	f383 8811 	msr	BASEPRI, r3
 800164c:	bd08      	pop	{r3, pc}
 800164e:	bf00      	nop
 8001650:	20001111 	.word	0x20001111
 8001654:	20001308 	.word	0x20001308
 8001658:	08001d61 	.word	0x08001d61
 800165c:	00000000 	.word	0x00000000

08001660 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8001660:	2100      	movs	r1, #0
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001662:	460a      	mov	r2, r1
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001664:	460e      	mov	r6, r1
 8001666:	4bc3      	ldr	r3, [pc, #780]	; (8001974 <main+0x314>)
 8001668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800166c:	691c      	ldr	r4, [r3, #16]
}

/*
 * Application entry point.
 */
int main(void) {
 800166e:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001672:	6118      	str	r0, [r3, #16]
 8001674:	6119      	str	r1, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8001676:	68dc      	ldr	r4, [r3, #12]
 8001678:	60d8      	str	r0, [r3, #12]
 800167a:	60d9      	str	r1, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800167c:	69d8      	ldr	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800167e:	4cbe      	ldr	r4, [pc, #760]	; (8001978 <main+0x318>)
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8001680:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001684:	61d8      	str	r0, [r3, #28]
  rccEnableBKPInterface(FALSE);
 8001686:	69d8      	ldr	r0, [r3, #28]
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
 8001688:	4dbc      	ldr	r5, [pc, #752]	; (800197c <main+0x31c>)
 800168a:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
 800168e:	61d8      	str	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	48bb      	ldr	r0, [pc, #748]	; (8001980 <main+0x320>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001698:	4fba      	ldr	r7, [pc, #744]	; (8001984 <main+0x324>)
 800169a:	6023      	str	r3, [r4, #0]
 800169c:	b08b      	sub	sp, #44	; 0x2c
 800169e:	6029      	str	r1, [r5, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
 80016a0:	6843      	ldr	r3, [r0, #4]
 80016a2:	2500      	movs	r5, #0
 80016a4:	601e      	str	r6, [r3, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 80016a6:	f847 6032 	str.w	r6, [r7, r2, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80016aa:	3201      	adds	r2, #1
 80016ac:	2a07      	cmp	r2, #7
 80016ae:	f100 0014 	add.w	r0, r0, #20
 80016b2:	d1f5      	bne.n	80016a0 <main+0x40>

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80016b4:	f64b 3c7f 	movw	ip, #47999	; 0xbb7f
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80016b8:	f64f 74ff 	movw	r4, #65535	; 0xffff
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 80016bc:	4bb2      	ldr	r3, [pc, #712]	; (8001988 <main+0x328>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 80016be:	f64f 0bff 	movw	fp, #63743	; 0xf8ff
 80016c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80016c6:	4fab      	ldr	r7, [pc, #684]	; (8001974 <main+0x314>)
 80016c8:	6059      	str	r1, [r3, #4]
 80016ca:	f8d7 8018 	ldr.w	r8, [r7, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80016ce:	f8df e2fc 	ldr.w	lr, [pc, #764]	; 80019cc <main+0x36c>
  GPIOA->CRH = config->PAData.crh;
 80016d2:	4aae      	ldr	r2, [pc, #696]	; (800198c <main+0x32c>)
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80016d4:	f048 087d 	orr.w	r8, r8, #125	; 0x7d
 80016d8:	f8c7 8018 	str.w	r8, [r7, #24]
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 80016dc:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 80019d0 <main+0x370>
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80016e0:	f46f 4828 	mvn.w	r8, #43008	; 0xa800
 80016e4:	f8ce 800c 	str.w	r8, [lr, #12]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 80016e8:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 80016ec:	f8ce 2004 	str.w	r2, [lr, #4]
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 80016f0:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 80019d4 <main+0x374>
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 80016f4:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80016f8:	f8ce 2000 	str.w	r2, [lr]
  GPIOB->ODR = config->PBData.odr;
 80016fc:	60d9      	str	r1, [r3, #12]
  GPIOB->CRH = config->PBData.crh;
 80016fe:	f8c3 9004 	str.w	r9, [r3, #4]
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 8001702:	f04f 3933 	mov.w	r9, #858993459	; 0x33333333
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 8001706:	f8c3 8000 	str.w	r8, [r3]
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 800170a:	4ea1      	ldr	r6, [pc, #644]	; (8001990 <main+0x330>)
  GPIOC->ODR = config->PCData.odr;
 800170c:	f8ce 180c 	str.w	r1, [lr, #2060]	; 0x80c
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8001710:	f108 4809 	add.w	r8, r8, #2298478592	; 0x89000000
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 8001714:	f8ce 9804 	str.w	r9, [lr, #2052]	; 0x804
  GPIOC->CRL = config->PCData.crl;
 8001718:	f8ce 9800 	str.w	r9, [lr, #2048]	; 0x800
 800171c:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 80019d8 <main+0x378>
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8001720:	489b      	ldr	r0, [pc, #620]	; (8001990 <main+0x330>)
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8001722:	f50e 6e00 	add.w	lr, lr, #2048	; 0x800
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8001726:	f2a8 5844 	subw	r8, r8, #1348	; 0x544
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 800172a:	f8c3 180c 	str.w	r1, [r3, #2060]	; 0x80c
  GPIOD->CRH = config->PDData.crh;
 800172e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  GPIOD->CRL = config->PDData.crl;
 8001732:	f8c3 8800 	str.w	r8, [r3, #2048]	; 0x800
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8001736:	f8ce 180c 	str.w	r1, [lr, #2060]	; 0x80c
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800173a:	4b96      	ldr	r3, [pc, #600]	; (8001994 <main+0x334>)
  GPIOE->CRH = config->PEData.crh;
 800173c:	f8ce 2804 	str.w	r2, [lr, #2052]	; 0x804

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8001740:	f8df 8298 	ldr.w	r8, [pc, #664]	; 80019dc <main+0x37c>
  GPIOE->CRL = config->PEData.crl;
 8001744:	f8ce 2800 	str.w	r2, [lr, #2048]	; 0x800
 8001748:	f846 9b04 	str.w	r9, [r6], #4
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 800174c:	6046      	str	r6, [r0, #4]
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 800174e:	f5ae 4e3c 	sub.w	lr, lr, #48128	; 0xbc00
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001752:	f100 060c 	add.w	r6, r0, #12
 8001756:	60c6      	str	r6, [r0, #12]
  tqp->p_prev = (thread_t *)tqp;
 8001758:	6106      	str	r6, [r0, #16]
 800175a:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 800175e:	f1a8 0614 	sub.w	r6, r8, #20
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001762:	f103 0e0c 	add.w	lr, r3, #12
  iqp->q_buffer  = bp;
 8001766:	f100 0954 	add.w	r9, r0, #84	; 0x54
 800176a:	631e      	str	r6, [r3, #48]	; 0x30
 800176c:	f8c3 e00c 	str.w	lr, [r3, #12]
 8001770:	2601      	movs	r6, #1
  tqp->p_prev = (thread_t *)tqp;
 8001772:	f8c3 e010 	str.w	lr, [r3, #16]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8001776:	f04f 0e10 	mov.w	lr, #16
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800177a:	6145      	str	r5, [r0, #20]
  i2cp->config = NULL;
 800177c:	605d      	str	r5, [r3, #4]
 800177e:	615d      	str	r5, [r3, #20]
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 8001780:	61dd      	str	r5, [r3, #28]
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8001782:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8001786:	701e      	strb	r6, [r3, #0]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8001788:	7206      	strb	r6, [r0, #8]
  iqp->q_buffer  = bp;
 800178a:	f8c0 9018 	str.w	r9, [r0, #24]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800178e:	f8c0 e038 	str.w	lr, [r0, #56]	; 0x38

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001792:	69fb      	ldr	r3, [r7, #28]
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state      = UART_STOP;
 8001794:	4a80      	ldr	r2, [pc, #512]	; (8001998 <main+0x338>)
 8001796:	4333      	orrs	r3, r6
 8001798:	7016      	strb	r6, [r2, #0]
  uartp->txstate    = UART_TX_IDLE;
 800179a:	7055      	strb	r5, [r2, #1]
  uartp->rxstate    = UART_RX_IDLE;
 800179c:	7095      	strb	r5, [r2, #2]
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
 800179e:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80017a2:	f8df a23c 	ldr.w	sl, [pc, #572]	; 80019e0 <main+0x380>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80017a6:	61fb      	str	r3, [r7, #28]
  iqp->q_wrptr   = bp;
 80017a8:	f8c0 9020 	str.w	r9, [r0, #32]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 80017ac:	f100 0974 	add.w	r9, r0, #116	; 0x74
 80017b0:	f8c0 9040 	str.w	r9, [r0, #64]	; 0x40
  oqp->q_notify  = onfy;
 80017b4:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80019e4 <main+0x384>

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80017b8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80017bc:	f8c0 904c 	str.w	r9, [r0, #76]	; 0x4c
  SD2.usart = USART2;
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
  SD3.usart = USART3;
 80017c0:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80019e8 <main+0x388>
 80017c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80017c8:	6285      	str	r5, [r0, #40]	; 0x28
  uartp->config     = NULL;
 80017ca:	6055      	str	r5, [r2, #4]
 80017cc:	f8c0 9074 	str.w	r9, [r0, #116]	; 0x74
  iqp->q_link    = link;
 80017d0:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 80017d2:	6500      	str	r0, [r0, #80]	; 0x50
 80017d4:	f8ca 3004 	str.w	r3, [sl, #4]
void uart_lld_init(void) {

#if STM32_UART_USE_USART1
  uartObjectInit(&UARTD1);
  UARTD1.usart   = USART1;
  UARTD1.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 80017d8:	2308      	movs	r3, #8
 80017da:	60d3      	str	r3, [r2, #12]
 */
void uart_lld_init(void) {

#if STM32_UART_USE_USART1
  uartObjectInit(&UARTD1);
  UARTD1.usart   = USART1;
 80017dc:	f509 4970 	add.w	r9, r9, #61440	; 0xf000
  UARTD1.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD1.dmarx   = STM32_DMA_STREAM(STM32_UART_USART1_RX_DMA_STREAM);
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
 80017e0:	f1a8 033c 	sub.w	r3, r8, #60	; 0x3c
 */
void uart_lld_init(void) {

#if STM32_UART_USE_USART1
  uartObjectInit(&UARTD1);
  UARTD1.usart   = USART1;
 80017e4:	f8c2 9008 	str.w	r9, [r2, #8]
  UARTD1.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD1.dmarx   = STM32_DMA_STREAM(STM32_UART_USART1_RX_DMA_STREAM);
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
 80017e8:	6153      	str	r3, [r2, #20]

#if STM32_UART_USE_USART1
  uartObjectInit(&UARTD1);
  UARTD1.usart   = USART1;
  UARTD1.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD1.dmarx   = STM32_DMA_STREAM(STM32_UART_USART1_RX_DMA_STREAM);
 80017ea:	f1a8 0928 	sub.w	r9, r8, #40	; 0x28

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80017ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017f2:	f8c2 9010 	str.w	r9, [r2, #16]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80017f6:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80019ec <main+0x38c>
 80017fa:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 80017fe:	4a67      	ldr	r2, [pc, #412]	; (800199c <main+0x33c>)
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001800:	62dc      	str	r4, [r3, #44]	; 0x2c
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8001802:	f100 0c64 	add.w	ip, r0, #100	; 0x64
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001806:	f100 0430 	add.w	r4, r0, #48	; 0x30
  STM32_ST_TIM->CCMR1  = 0;
 800180a:	619d      	str	r5, [r3, #24]
 800180c:	f04f 0980 	mov.w	r9, #128	; 0x80
 8001810:	f8c0 c01c 	str.w	ip, [r0, #28]
  STM32_ST_TIM->CCR[0] = 0;
 8001814:	635d      	str	r5, [r3, #52]	; 0x34
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8001816:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
  STM32_ST_TIM->DIER   = 0;
 800181a:	60dd      	str	r5, [r3, #12]
  oqp->q_rdptr   = bp;
 800181c:	f8c0 c048 	str.w	ip, [r0, #72]	; 0x48
  STM32_ST_TIM->CR2    = 0;
 8001820:	605d      	str	r5, [r3, #4]
 8001822:	6304      	str	r4, [r0, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 8001824:	6344      	str	r4, [r0, #52]	; 0x34
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001826:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  oqp->q_wrptr   = bp;
 800182a:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800182e:	615e      	str	r6, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001830:	601e      	str	r6, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001832:	f888 931c 	strb.w	r9, [r8, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001836:	f8c8 4180 	str.w	r4, [r8, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800183a:	f8c8 4000 	str.w	r4, [r8]
 800183e:	6095      	str	r5, [r2, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001840:	68d4      	ldr	r4, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001842:	4b57      	ldr	r3, [pc, #348]	; (80019a0 <main+0x340>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8001844:	ea0b 0b04 	and.w	fp, fp, r4
  reg_value  =  (reg_value                                   |
 8001848:	ea43 030b 	orr.w	r3, r3, fp

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800184c:	4c55      	ldr	r4, [pc, #340]	; (80019a4 <main+0x344>)
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800184e:	60d3      	str	r3, [r2, #12]
 8001850:	68e3      	ldr	r3, [r4, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001852:	4855      	ldr	r0, [pc, #340]	; (80019a8 <main+0x348>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001854:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001858:	60e3      	str	r3, [r4, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800185a:	6803      	ldr	r3, [r0, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800185c:	4c53      	ldr	r4, [pc, #332]	; (80019ac <main+0x34c>)
 800185e:	4333      	orrs	r3, r6
 8001860:	6003      	str	r3, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001862:	f04f 0a20 	mov.w	sl, #32
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8001866:	f104 031c 	add.w	r3, r4, #28
 800186a:	f882 e01f 	strb.w	lr, [r2, #31]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800186e:	eb0d 000e 	add.w	r0, sp, lr
 8001872:	f882 a022 	strb.w	sl, [r2, #34]	; 0x22

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8001876:	2200      	movs	r2, #0
 8001878:	61e3      	str	r3, [r4, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 800187a:	6223      	str	r3, [r4, #32]
 800187c:	6024      	str	r4, [r4, #0]
 800187e:	2300      	movs	r3, #0
  tqp->p_prev = (thread_t *)tqp;
 8001880:	6064      	str	r4, [r4, #4]
 8001882:	e9cd 2308 	strd	r2, r3, [sp, #32]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8001886:	9104      	str	r1, [sp, #16]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001888:	84a1      	strh	r1, [r4, #36]	; 0x24
  tmp->worst      = (rtcnt_t)0;
 800188a:	9505      	str	r5, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 800188c:	9506      	str	r5, [sp, #24]
  tmp->n          = (ucnt_t)0;
 800188e:	9507      	str	r5, [sp, #28]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8001890:	60a5      	str	r5, [r4, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8001892:	6124      	str	r4, [r4, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8001894:	6164      	str	r4, [r4, #20]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8001896:	84e5      	strh	r5, [r4, #38]	; 0x26
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8001898:	6725      	str	r5, [r4, #112]	; 0x70
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800189a:	f7ff fbb9 	bl	8001010 <chTMStartMeasurementX.constprop.66>
  chTMStopMeasurementX(&tm);
 800189e:	a804      	add	r0, sp, #16
 80018a0:	f001 ff66 	bl	8003770 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80018a4:	4b42      	ldr	r3, [pc, #264]	; (80019b0 <main+0x350>)
  ch.tm.offset = tm.last;
 80018a6:	9806      	ldr	r0, [sp, #24]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80018a8:	f103 0e10 	add.w	lr, r3, #16
 80018ac:	f8df c140 	ldr.w	ip, [pc, #320]	; 80019f0 <main+0x390>
 80018b0:	f8d4 b014 	ldr.w	fp, [r4, #20]
 80018b4:	f8c3 e010 	str.w	lr, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 80018b8:	f8c3 e014 	str.w	lr, [r3, #20]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80018bc:	493d      	ldr	r1, [pc, #244]	; (80019b4 <main+0x354>)
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80018be:	f04f 0e40 	mov.w	lr, #64	; 0x40
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80018c2:	4a3d      	ldr	r2, [pc, #244]	; (80019b8 <main+0x358>)
 80018c4:	f8c3 c000 	str.w	ip, [r3]
 80018c8:	6720      	str	r0, [r4, #112]	; 0x70
 80018ca:	619d      	str	r5, [r3, #24]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80018cc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80018d0:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80018d4:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
  default_heap.h_free.h.u.next = NULL;
 80018d8:	609d      	str	r5, [r3, #8]
  default_heap.h_free.h.size = 0;
 80018da:	60dd      	str	r5, [r3, #12]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80018dc:	f8df e114 	ldr.w	lr, [pc, #276]	; 80019f4 <main+0x394>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80018e0:	4b36      	ldr	r3, [pc, #216]	; (80019bc <main+0x35c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80018e2:	f021 0107 	bic.w	r1, r1, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80018e6:	f022 0207 	bic.w	r2, r2, #7
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80018ea:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80018ee:	6665      	str	r5, [r4, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80018f0:	6625      	str	r5, [r4, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80018f2:	f884 604a 	strb.w	r6, [r4, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80018f6:	6465      	str	r5, [r4, #68]	; 0x44
  REG_INSERT(tp);
 80018f8:	63e4      	str	r4, [r4, #60]	; 0x3c
 80018fa:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80018fe:	f104 0c50 	add.w	ip, r4, #80	; 0x50
 8001902:	f8cb 0010 	str.w	r0, [fp, #16]
 8001906:	6160      	str	r0, [r4, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8001908:	61a0      	str	r0, [r4, #24]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800190a:	f104 0054 	add.w	r0, r4, #84	; 0x54
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800190e:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001912:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001916:	6560      	str	r0, [r4, #84]	; 0x54
  tqp->p_prev = (thread_t *)tqp;
 8001918:	65a0      	str	r0, [r4, #88]	; 0x58
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800191a:	f8ce 1000 	str.w	r1, [lr]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	f385 8811 	msr	BASEPRI, r5
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001924:	b662      	cpsie	i
 8001926:	4926      	ldr	r1, [pc, #152]	; (80019c0 <main+0x360>)
 8001928:	69a3      	ldr	r3, [r4, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 800192a:	4632      	mov	r2, r6
 800192c:	6199      	str	r1, [r3, #24]
 800192e:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8001932:	21d8      	movs	r1, #216	; 0xd8
 8001934:	9500      	str	r5, [sp, #0]
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <main+0x364>)
 8001938:	f001 fff2 	bl	8003920 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800193c:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <main+0x368>)
 800193e:	6183      	str	r3, [r0, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001940:	f38a 8811 	msr	BASEPRI, sl
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <main+0x330>)
 8001946:	7a1b      	ldrb	r3, [r3, #8]
 8001948:	42b3      	cmp	r3, r6
 800194a:	d10a      	bne.n	8001962 <main+0x302>
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
      rccEnableUSART3(FALSE);
 800194c:	69fb      	ldr	r3, [r7, #28]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800194e:	22c0      	movs	r2, #192	; 0xc0
 8001950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	f888 2327 	strb.w	r2, [r8, #807]	; 0x327
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800195a:	f8c8 9184 	str.w	r9, [r8, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800195e:	f8c8 9004 	str.w	r9, [r8, #4]
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8001962:	f240 2271 	movw	r2, #625	; 0x271
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001966:	f244 0140 	movw	r1, #16448	; 0x4040
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800196a:	f242 102c 	movw	r0, #8492	; 0x212c
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <main+0x330>)
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001970:	2401      	movs	r4, #1
 8001972:	e041      	b.n	80019f8 <main+0x398>
 8001974:	40021000 	.word	0x40021000
 8001978:	40007000 	.word	0x40007000
 800197c:	200012f0 	.word	0x200012f0
 8001980:	08006360 	.word	0x08006360
 8001984:	200008f0 	.word	0x200008f0
 8001988:	40020000 	.word	0x40020000
 800198c:	888884b8 	.word	0x888884b8
 8001990:	20001114 	.word	0x20001114
 8001994:	200008b8 	.word	0x200008b8
 8001998:	20001344 	.word	0x20001344
 800199c:	e000ed00 	.word	0xe000ed00
 80019a0:	05fa0300 	.word	0x05fa0300
 80019a4:	e000edf0 	.word	0xe000edf0
 80019a8:	e0001000 	.word	0xe0001000
 80019ac:	200011a0 	.word	0x200011a0
 80019b0:	200010f0 	.word	0x200010f0
 80019b4:	20001407 	.word	0x20001407
 80019b8:	20005000 	.word	0x20005000
 80019bc:	200010ec 	.word	0x200010ec
 80019c0:	080060b0 	.word	0x080060b0
 80019c4:	08003671 	.word	0x08003671
 80019c8:	08006670 	.word	0x08006670
 80019cc:	40010800 	.word	0x40010800
 80019d0:	88884b88 	.word	0x88884b88
 80019d4:	ff888888 	.word	0xff888888
 80019d8:	08006110 	.word	0x08006110
 80019dc:	080063d8 	.word	0x080063d8
 80019e0:	e0042000 	.word	0xe0042000
 80019e4:	08001d71 	.word	0x08001d71
 80019e8:	40004800 	.word	0x40004800
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	08002071 	.word	0x08002071
 80019f4:	20001360 	.word	0x20001360
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 80019f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 80019fa:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 80019fc:	2200      	movs	r2, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80019fe:	6119      	str	r1, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001a00:	615c      	str	r4, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001a02:	60d8      	str	r0, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8001a04:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8001a06:	6818      	ldr	r0, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8001a08:	685b      	ldr	r3, [r3, #4]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <main+0x3d0>)
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	7219      	strb	r1, [r3, #8]
 8001a10:	f382 8811 	msr	BASEPRI, r2
 8001a14:	4c07      	ldr	r4, [pc, #28]	; (8001a34 <main+0x3d4>)
  sdStart(&SD3, NULL);

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8001a16:	9200      	str	r2, [sp, #0]
 8001a18:	4807      	ldr	r0, [pc, #28]	; (8001a38 <main+0x3d8>)
 8001a1a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001a1e:	2240      	movs	r2, #64	; 0x40
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <main+0x3dc>)
 8001a22:	f001 ff7d 	bl	8003920 <chThdCreateStatic>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8001a26:	46a2      	mov	sl, r4
 8001a28:	4e05      	ldr	r6, [pc, #20]	; (8001a40 <main+0x3e0>)
 8001a2a:	f8df b018 	ldr.w	fp, [pc, #24]	; 8001a44 <main+0x3e4>
 8001a2e:	e00f      	b.n	8001a50 <main+0x3f0>
 8001a30:	20001114 	.word	0x20001114
 8001a34:	200010e8 	.word	0x200010e8
 8001a38:	20000fa0 	.word	0x20000fa0
 8001a3c:	08001021 	.word	0x08001021
 8001a40:	20001340 	.word	0x20001340
 8001a44:	200012f4 	.word	0x200012f4
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!palReadPad(GPIOA, AUDIO_BUTTON))
      TestThread(&SD3);
    chThdSleepMilliseconds(500);
 8001a48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a4c:	f002 fb68 	bl	8004120 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!palReadPad(GPIOA, AUDIO_BUTTON))
 8001a50:	4b9e      	ldr	r3, [pc, #632]	; (8001ccc <main+0x66c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	05db      	lsls	r3, r3, #23
 8001a56:	d4f7      	bmi.n	8001a48 <main+0x3e8>
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
  int i, j;

  chp = p;
 8001a58:	4b9d      	ldr	r3, [pc, #628]	; (8001cd0 <main+0x670>)
  test_println("");
 8001a5a:	489e      	ldr	r0, [pc, #632]	; (8001cd4 <main+0x674>)
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
  int i, j;

  chp = p;
 8001a5c:	6023      	str	r3, [r4, #0]
  test_println("");
 8001a5e:	f000 fd1f 	bl	80024a0 <test_println>
  test_println("*** ChibiOS/RT test suite");
 8001a62:	489d      	ldr	r0, [pc, #628]	; (8001cd8 <main+0x678>)
 8001a64:	f000 fd1c 	bl	80024a0 <test_println>
  test_println("***");
 8001a68:	4d9c      	ldr	r5, [pc, #624]	; (8001cdc <main+0x67c>)
 8001a6a:	489d      	ldr	r0, [pc, #628]	; (8001ce0 <main+0x680>)
 8001a6c:	f000 fd18 	bl	80024a0 <test_println>
 8001a70:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8001a72:	6820      	ldr	r0, [r4, #0]
 8001a74:	6803      	ldr	r3, [r0, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001a7a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001a7e:	2900      	cmp	r1, #0
 8001a80:	d1f7      	bne.n	8001a72 <main+0x412>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 8001a82:	4898      	ldr	r0, [pc, #608]	; (8001ce4 <main+0x684>)
 8001a84:	4d98      	ldr	r5, [pc, #608]	; (8001ce8 <main+0x688>)
 8001a86:	f000 fd0b 	bl	80024a0 <test_println>
 8001a8a:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8001a8c:	6820      	ldr	r0, [r4, #0]
 8001a8e:	6803      	ldr	r3, [r0, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001a94:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001a98:	2900      	cmp	r1, #0
 8001a9a:	d1f7      	bne.n	8001a8c <main+0x42c>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8001a9c:	4893      	ldr	r0, [pc, #588]	; (8001cec <main+0x68c>)
 8001a9e:	4d94      	ldr	r5, [pc, #592]	; (8001cf0 <main+0x690>)
 8001aa0:	f000 fcfe 	bl	80024a0 <test_println>
 8001aa4:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8001aa6:	6820      	ldr	r0, [r4, #0]
 8001aa8:	6803      	ldr	r3, [r0, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001aae:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001ab2:	2900      	cmp	r1, #0
 8001ab4:	d1f7      	bne.n	8001aa6 <main+0x446>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 8001ab6:	488f      	ldr	r0, [pc, #572]	; (8001cf4 <main+0x694>)
 8001ab8:	4d8f      	ldr	r5, [pc, #572]	; (8001cf8 <main+0x698>)
 8001aba:	f000 fcf1 	bl	80024a0 <test_println>
 8001abe:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8001ac0:	6820      	ldr	r0, [r4, #0]
 8001ac2:	6803      	ldr	r3, [r0, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001ac8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001acc:	2900      	cmp	r1, #0
 8001ace:	d1f7      	bne.n	8001ac0 <main+0x460>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 8001ad0:	488a      	ldr	r0, [pc, #552]	; (8001cfc <main+0x69c>)
 8001ad2:	4d8b      	ldr	r5, [pc, #556]	; (8001d00 <main+0x6a0>)
 8001ad4:	f000 fce4 	bl	80024a0 <test_println>
 8001ad8:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8001ada:	6820      	ldr	r0, [r4, #0]
 8001adc:	6803      	ldr	r3, [r0, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001ae2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001ae6:	2900      	cmp	r1, #0
 8001ae8:	d1f7      	bne.n	8001ada <main+0x47a>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 8001aea:	4886      	ldr	r0, [pc, #536]	; (8001d04 <main+0x6a4>)
 8001aec:	4d86      	ldr	r5, [pc, #536]	; (8001d08 <main+0x6a8>)
 8001aee:	f000 fcd7 	bl	80024a0 <test_println>
 8001af2:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8001af4:	6820      	ldr	r0, [r4, #0]
 8001af6:	6803      	ldr	r3, [r0, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001afc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001b00:	2900      	cmp	r1, #0
 8001b02:	d1f7      	bne.n	8001af4 <main+0x494>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 8001b04:	4881      	ldr	r0, [pc, #516]	; (8001d0c <main+0x6ac>)
 8001b06:	4d82      	ldr	r5, [pc, #520]	; (8001d10 <main+0x6b0>)
 8001b08:	f000 fcca 	bl	80024a0 <test_println>
 8001b0c:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8001b0e:	6820      	ldr	r0, [r4, #0]
 8001b10:	6803      	ldr	r3, [r0, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001b16:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001b1a:	2900      	cmp	r1, #0
 8001b1c:	d1f7      	bne.n	8001b0e <main+0x4ae>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8001b1e:	487d      	ldr	r0, [pc, #500]	; (8001d14 <main+0x6b4>)
 8001b20:	4d7d      	ldr	r5, [pc, #500]	; (8001d18 <main+0x6b8>)
 8001b22:	f000 fcbd 	bl	80024a0 <test_println>
 8001b26:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8001b28:	6820      	ldr	r0, [r4, #0]
 8001b2a:	6803      	ldr	r3, [r0, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001b30:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001b34:	2900      	cmp	r1, #0
 8001b36:	d1f7      	bne.n	8001b28 <main+0x4c8>
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8001b38:	4878      	ldr	r0, [pc, #480]	; (8001d1c <main+0x6bc>)
 8001b3a:	9102      	str	r1, [sp, #8]
 8001b3c:	f000 fcb0 	bl	80024a0 <test_println>
#endif
  test_println("");
 8001b40:	4864      	ldr	r0, [pc, #400]	; (8001cd4 <main+0x674>)
 8001b42:	f000 fcad 	bl	80024a0 <test_println>

  test_global_fail = FALSE;
 8001b46:	4b76      	ldr	r3, [pc, #472]	; (8001d20 <main+0x6c0>)
 8001b48:	9902      	ldr	r1, [sp, #8]
 8001b4a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8001d54 <main+0x6f4>
 8001b4e:	7019      	strb	r1, [r3, #0]
 8001b50:	4b74      	ldr	r3, [pc, #464]	; (8001d24 <main+0x6c4>)
 8001b52:	9303      	str	r3, [sp, #12]
 8001b54:	9b02      	ldr	r3, [sp, #8]
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8001b56:	2700      	movs	r7, #0
 8001b58:	3301      	adds	r3, #1
 8001b5a:	9302      	str	r3, [sp, #8]

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8001b5c:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 8001b60:	eb09 0587 	add.w	r5, r9, r7, lsl #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 808a 	beq.w	8001c7e <main+0x61e>
      print_line();
 8001b6a:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8001d58 <main+0x6f8>
 8001b6e:	f000 fbb7 	bl	80022e0 <print_line.lto_priv.144>
 8001b72:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8001b74:	6820      	ldr	r0, [r4, #0]
 8001b76:	6803      	ldr	r3, [r0, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001b7c:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8001b80:	2900      	cmp	r1, #0
 8001b82:	d1f7      	bne.n	8001b74 <main+0x514>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8001b84:	9802      	ldr	r0, [sp, #8]
 8001b86:	f000 fcbb 	bl	8002500 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8001b8a:	f8da 0000 	ldr.w	r0, [sl]
 8001b8e:	212e      	movs	r1, #46	; 0x2e
 8001b90:	6803      	ldr	r3, [r0, #0]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8001b92:	3701      	adds	r7, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	4798      	blx	r3
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8001b98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001d5c <main+0x6fc>
 8001b9c:	4638      	mov	r0, r7
 8001b9e:	f000 fcaf 	bl	8002500 <test_printn>
 8001ba2:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8001ba4:	6820      	ldr	r0, [r4, #0]
 8001ba6:	6803      	ldr	r3, [r0, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001bac:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8001bb0:	2900      	cmp	r1, #0
 8001bb2:	d1f7      	bne.n	8001ba4 <main+0x544>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 8001bb4:	682b      	ldr	r3, [r5, #0]
 8001bb6:	f8d3 8000 	ldr.w	r8, [r3]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001bba:	f898 1000 	ldrb.w	r1, [r8]
 8001bbe:	b139      	cbz	r1, 8001bd0 <main+0x570>
    chSequentialStreamPut(chp, *msgp++);
 8001bc0:	6820      	ldr	r0, [r4, #0]
 8001bc2:	6803      	ldr	r3, [r0, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001bc8:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8001bcc:	2900      	cmp	r1, #0
 8001bce:	d1f7      	bne.n	8001bc0 <main+0x560>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 8001bd0:	4855      	ldr	r0, [pc, #340]	; (8001d28 <main+0x6c8>)
 8001bd2:	f000 fc65 	bl	80024a0 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 8001bd6:	20c8      	movs	r0, #200	; 0xc8
 8001bd8:	f002 faa2 	bl	8004120 <chThdSleep>
#endif
      execute_test(patterns[i][j]);
 8001bdc:	682d      	ldr	r5, [r5, #0]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8001bde:	2300      	movs	r3, #0
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8001be0:	4952      	ldr	r1, [pc, #328]	; (8001d2c <main+0x6cc>)

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8001be2:	f8cb 3000 	str.w	r3, [fp]
 8001be6:	f8cb 3004 	str.w	r3, [fp, #4]
 8001bea:	f8cb 3008 	str.w	r3, [fp, #8]
 8001bee:	f8cb 300c 	str.w	r3, [fp, #12]
 8001bf2:	f8cb 3010 	str.w	r3, [fp, #16]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8001bf6:	6031      	str	r1, [r6, #0]
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8001bf8:	686a      	ldr	r2, [r5, #4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8001bfa:	494d      	ldr	r1, [pc, #308]	; (8001d30 <main+0x6d0>)
 8001bfc:	700b      	strb	r3, [r1, #0]
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8001bfe:	b102      	cbz	r2, 8001c02 <main+0x5a2>
    tcp->setup();
 8001c00:	4790      	blx	r2
  tcp->execute();
 8001c02:	68eb      	ldr	r3, [r5, #12]
 8001c04:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8001c06:	68ab      	ldr	r3, [r5, #8]
 8001c08:	b103      	cbz	r3, 8001c0c <main+0x5ac>
    tcp->teardown();
 8001c0a:	4798      	blx	r3

  test_wait_threads();
 8001c0c:	f000 fb90 	bl	8002330 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 8001c10:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <main+0x6d0>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d050      	beq.n	8001cba <main+0x65a>
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8001c18:	4d46      	ldr	r5, [pc, #280]	; (8001d34 <main+0x6d4>)
 8001c1a:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8001c1c:	6820      	ldr	r0, [r4, #0]
 8001c1e:	6803      	ldr	r3, [r0, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001c24:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001c28:	2900      	cmp	r1, #0
 8001c2a:	d1f7      	bne.n	8001c1c <main+0x5bc>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 8001c2c:	4b42      	ldr	r3, [pc, #264]	; (8001d38 <main+0x6d8>)
 8001c2e:	4d43      	ldr	r5, [pc, #268]	; (8001d3c <main+0x6dc>)
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	f000 fc65 	bl	8002500 <test_printn>
 8001c36:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8001c38:	6820      	ldr	r0, [r4, #0]
 8001c3a:	6803      	ldr	r3, [r0, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001c40:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001c44:	2900      	cmp	r1, #0
 8001c46:	d1f7      	bne.n	8001c38 <main+0x5d8>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8001c48:	6833      	ldr	r3, [r6, #0]
 8001c4a:	4a38      	ldr	r2, [pc, #224]	; (8001d2c <main+0x6cc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d909      	bls.n	8001c64 <main+0x604>
 8001c50:	4d36      	ldr	r5, [pc, #216]	; (8001d2c <main+0x6cc>)
    chSequentialStreamPut(chp, *cp++);
 8001c52:	6820      	ldr	r0, [r4, #0]
 8001c54:	f815 1b01 	ldrb.w	r1, [r5], #1
 8001c58:	6803      	ldr	r3, [r0, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4798      	blx	r3
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8001c5e:	6833      	ldr	r3, [r6, #0]
 8001c60:	429d      	cmp	r5, r3
 8001c62:	d3f6      	bcc.n	8001c52 <main+0x5f2>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 8001c64:	4836      	ldr	r0, [pc, #216]	; (8001d40 <main+0x6e0>)
 8001c66:	f000 fc1b 	bl	80024a0 <test_println>
 8001c6a:	9b03      	ldr	r3, [sp, #12]
 8001c6c:	f8d3 9000 	ldr.w	r9, [r3]

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8001c70:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 8001c74:	eb09 0587 	add.w	r5, r9, r7, lsl #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f47f af76 	bne.w	8001b6a <main+0x50a>
#endif
  test_println("");

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 8001c7e:	9b03      	ldr	r3, [sp, #12]
 8001c80:	f853 9f04 	ldr.w	r9, [r3, #4]!
 8001c84:	9303      	str	r3, [sp, #12]
 8001c86:	f1b9 0f00 	cmp.w	r9, #0
 8001c8a:	f47f af63 	bne.w	8001b54 <main+0x4f4>
        test_println("--- Result: SUCCESS");
      j++;
    }
    i++;
  }
  print_line();
 8001c8e:	f000 fb27 	bl	80022e0 <print_line.lto_priv.144>
  test_println("");
 8001c92:	4d2c      	ldr	r5, [pc, #176]	; (8001d44 <main+0x6e4>)
 8001c94:	480f      	ldr	r0, [pc, #60]	; (8001cd4 <main+0x674>)
 8001c96:	f000 fc03 	bl	80024a0 <test_println>
 8001c9a:	2146      	movs	r1, #70	; 0x46
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8001c9c:	6820      	ldr	r0, [r4, #0]
 8001c9e:	6803      	ldr	r3, [r0, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001ca4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001ca8:	2900      	cmp	r1, #0
 8001caa:	d1f7      	bne.n	8001c9c <main+0x63c>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
 8001cac:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <main+0x6c0>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	b93b      	cbnz	r3, 8001cc2 <main+0x662>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8001cb2:	4825      	ldr	r0, [pc, #148]	; (8001d48 <main+0x6e8>)
 8001cb4:	f000 fbf4 	bl	80024a0 <test_println>
 8001cb8:	e6c6      	b.n	8001a48 <main+0x3e8>
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 8001cba:	4824      	ldr	r0, [pc, #144]	; (8001d4c <main+0x6ec>)
 8001cbc:	f000 fbf0 	bl	80024a0 <test_println>
 8001cc0:	e74c      	b.n	8001b5c <main+0x4fc>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
 8001cc2:	4823      	ldr	r0, [pc, #140]	; (8001d50 <main+0x6f0>)
 8001cc4:	f000 fbec 	bl	80024a0 <test_println>
 8001cc8:	e6be      	b.n	8001a48 <main+0x3e8>
 8001cca:	bf00      	nop
 8001ccc:	40010800 	.word	0x40010800
 8001cd0:	20001114 	.word	0x20001114
 8001cd4:	08006d90 	.word	0x08006d90
 8001cd8:	08006678 	.word	0x08006678
 8001cdc:	08006590 	.word	0x08006590
 8001ce0:	08006694 	.word	0x08006694
 8001ce4:	080066bc 	.word	0x080066bc
 8001ce8:	080065a4 	.word	0x080065a4
 8001cec:	080066c4 	.word	0x080066c4
 8001cf0:	080065b8 	.word	0x080065b8
 8001cf4:	080066dc 	.word	0x080066dc
 8001cf8:	080065cc 	.word	0x080065cc
 8001cfc:	080066fc 	.word	0x080066fc
 8001d00:	080065e0 	.word	0x080065e0
 8001d04:	08006704 	.word	0x08006704
 8001d08:	080065f4 	.word	0x080065f4
 8001d0c:	08006710 	.word	0x08006710
 8001d10:	08006608 	.word	0x08006608
 8001d14:	08006728 	.word	0x08006728
 8001d18:	0800661c 	.word	0x0800661c
 8001d1c:	08006754 	.word	0x08006754
 8001d20:	20001110 	.word	0x20001110
 8001d24:	080062a0 	.word	0x080062a0
 8001d28:	08006698 	.word	0x08006698
 8001d2c:	20001190 	.word	0x20001190
 8001d30:	2000118c 	.word	0x2000118c
 8001d34:	08006644 	.word	0x08006644
 8001d38:	20000f90 	.word	0x20000f90
 8001d3c:	0800665c 	.word	0x0800665c
 8001d40:	0800669c 	.word	0x0800669c
 8001d44:	08006660 	.word	0x08006660
 8001d48:	080066ac 	.word	0x080066ac
 8001d4c:	080066a0 	.word	0x080066a0
 8001d50:	080066b4 	.word	0x080066b4
 8001d54:	08006050 	.word	0x08006050
 8001d58:	08006630 	.word	0x08006630
 8001d5c:	08006640 	.word	0x08006640

08001d60 <tmr.lto_priv.69>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8001d60:	4b01      	ldr	r3, [pc, #4]	; (8001d68 <tmr.lto_priv.69+0x8>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
 8001d66:	4770      	bx	lr
 8001d68:	20001111 	.word	0x20001111
 8001d6c:	00000000 	.word	0x00000000

08001d70 <notify3.lto_priv.71>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
 8001d70:	4a02      	ldr	r2, [pc, #8]	; (8001d7c <notify3.lto_priv.71+0xc>)
 8001d72:	68d3      	ldr	r3, [r2, #12]
 8001d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d78:	60d3      	str	r3, [r2, #12]
 8001d7a:	4770      	bx	lr
 8001d7c:	40004800 	.word	0x40004800

08001d80 <_port_irq_epilogue>:
 8001d80:	2320      	movs	r3, #32
 8001d82:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <_port_irq_epilogue+0x44>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001d8e:	d102      	bne.n	8001d96 <_port_irq_epilogue+0x16>
 8001d90:	f383 8811 	msr	BASEPRI, r3
 8001d94:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001d96:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8001d9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d9e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8001da2:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001da6:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8001daa:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <_port_irq_epilogue+0x48>)
 8001dac:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8001dae:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8001db0:	6889      	ldr	r1, [r1, #8]
 8001db2:	6892      	ldr	r2, [r2, #8]
 8001db4:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8001db6:	bf8c      	ite	hi
 8001db8:	4a04      	ldrhi	r2, [pc, #16]	; (8001dcc <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8001dba:	4a05      	ldrls	r2, [pc, #20]	; (8001dd0 <_port_irq_epilogue+0x50>)
 8001dbc:	f843 2c08 	str.w	r2, [r3, #-8]
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00
 8001dc8:	200011a0 	.word	0x200011a0
 8001dcc:	08000251 	.word	0x08000251
 8001dd0:	08000254 	.word	0x08000254
	...

08001de0 <VectorD4>:
/**
 * @brief   USART1 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8001de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t cr1 = u->CR1;

  sr = u->SR;   /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8001de2:	f240 130f 	movw	r3, #271	; 0x10f
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
 8001de6:	4e1c      	ldr	r6, [pc, #112]	; (8001e58 <VectorD4+0x78>)
 8001de8:	68b4      	ldr	r4, [r6, #8]
  uint32_t cr1 = u->CR1;
 8001dea:	68e7      	ldr	r7, [r4, #12]

  sr = u->SR;   /* SR reset step 1.*/
 8001dec:	6825      	ldr	r5, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8001dee:	6862      	ldr	r2, [r4, #4]

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8001df0:	402b      	ands	r3, r5
 8001df2:	b1eb      	cbz	r3, 8001e30 <VectorD4+0x50>
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8001df4:	6872      	ldr	r2, [r6, #4]
  sr = u->SR;   /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
 8001df6:	f46f 7380 	mvn.w	r3, #256	; 0x100
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8001dfa:	6912      	ldr	r2, [r2, #16]
  sr = u->SR;   /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
 8001dfc:	6023      	str	r3, [r4, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8001dfe:	b1ba      	cbz	r2, 8001e30 <VectorD4+0x50>
static void serve_usart_irq(UARTDriver *uartp) {
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
  uint32_t cr1 = u->CR1;

  sr = u->SR;   /* SR reset step 1.*/
 8001e00:	b2ab      	uxth	r3, r5
 */
static uartflags_t translate_errors(uint16_t sr) {
  uartflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= UART_OVERRUN_ERROR;
 8001e02:	f013 0f08 	tst.w	r3, #8
 8001e06:	bf0c      	ite	eq
 8001e08:	2100      	moveq	r1, #0
 8001e0a:	2110      	movne	r1, #16
  if (sr & USART_SR_PE)
 8001e0c:	07d8      	lsls	r0, r3, #31
    sts |= UART_PARITY_ERROR;
 8001e0e:	bf48      	it	mi
 8001e10:	f041 0104 	orrmi.w	r1, r1, #4
  if (sr & USART_SR_FE)
 8001e14:	0798      	lsls	r0, r3, #30
    sts |= UART_FRAMING_ERROR;
 8001e16:	bf48      	it	mi
 8001e18:	f041 0108 	orrmi.w	r1, r1, #8
  if (sr & USART_SR_NE)
 8001e1c:	0758      	lsls	r0, r3, #29
    sts |= UART_NOISE_ERROR;
 8001e1e:	bf48      	it	mi
 8001e20:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_LBD)
 8001e24:	05d8      	lsls	r0, r3, #23
    sts |= UART_BREAK_DETECTED;
 8001e26:	bf48      	it	mi
 8001e28:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8001e2c:	480a      	ldr	r0, [pc, #40]	; (8001e58 <VectorD4+0x78>)
 8001e2e:	4790      	blx	r2
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8001e30:	066a      	lsls	r2, r5, #25
 8001e32:	d50c      	bpl.n	8001e4e <VectorD4+0x6e>
 8001e34:	067b      	lsls	r3, r7, #25
 8001e36:	d50a      	bpl.n	8001e4e <VectorD4+0x6e>
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;

    /* End of transmission, a callback is generated.*/
    _uart_tx2_isr_code(uartp);
 8001e38:	6873      	ldr	r3, [r6, #4]
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001e3a:	f027 0740 	bic.w	r7, r7, #64	; 0x40

    /* End of transmission, a callback is generated.*/
    _uart_tx2_isr_code(uartp);
 8001e3e:	685b      	ldr	r3, [r3, #4]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
 8001e40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e44:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001e46:	60e7      	str	r7, [r4, #12]

    /* End of transmission, a callback is generated.*/
    _uart_tx2_isr_code(uartp);
 8001e48:	b10b      	cbz	r3, 8001e4e <VectorD4+0x6e>
 8001e4a:	4803      	ldr	r0, [pc, #12]	; (8001e58 <VectorD4+0x78>)
 8001e4c:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD1);

  OSAL_IRQ_EPILOGUE();
}
 8001e4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD1);

  OSAL_IRQ_EPILOGUE();
 8001e52:	f7ff bf95 	b.w	8001d80 <_port_irq_epilogue>
 8001e56:	bf00      	nop
 8001e58:	20001344 	.word	0x20001344
 8001e5c:	00000000 	.word	0x00000000

08001e60 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001e64:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001e68:	6923      	ldr	r3, [r4, #16]
 8001e6a:	079b      	lsls	r3, r3, #30
 8001e6c:	d403      	bmi.n	8001e76 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8001e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001e72:	f7ff bf85 	b.w	8001d80 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8001e76:	2700      	movs	r7, #0
 8001e78:	6127      	str	r7, [r4, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001e7a:	2520      	movs	r5, #32
 8001e7c:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8001e80:	4e1e      	ldr	r6, [pc, #120]	; (8001efc <VectorB0+0x9c>)
 8001e82:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8001e84:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8001e88:	69f3      	ldr	r3, [r6, #28]
 8001e8a:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8001e8c:	ebce 0100 	rsb	r1, lr, r0
 8001e90:	891a      	ldrh	r2, [r3, #8]
 8001e92:	b289      	uxth	r1, r1
 8001e94:	4291      	cmp	r1, r2
 8001e96:	f106 081c 	add.w	r8, r6, #28
 8001e9a:	d31b      	bcc.n	8001ed4 <VectorB0+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001e9c:	6819      	ldr	r1, [r3, #0]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8001e9e:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8001ea0:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8001ea2:	84f2      	strh	r2, [r6, #38]	; 0x26

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8001ea4:	68da      	ldr	r2, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001ea6:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8001eaa:	61f1      	str	r1, [r6, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8001eac:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8001eae:	bf08      	it	eq
 8001eb0:	60e7      	streq	r7, [r4, #12]
 8001eb2:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8001eb6:	6918      	ldr	r0, [r3, #16]
 8001eb8:	4790      	blx	r2
 8001eba:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001ebe:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8001ec0:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8001ec4:	69f3      	ldr	r3, [r6, #28]
 8001ec6:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8001ec8:	ebce 0100 	rsb	r1, lr, r0
 8001ecc:	891a      	ldrh	r2, [r3, #8]
 8001ece:	b289      	uxth	r1, r1
 8001ed0:	428a      	cmp	r2, r1
 8001ed2:	d9e3      	bls.n	8001e9c <VectorB0+0x3c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8001ed4:	4543      	cmp	r3, r8
 8001ed6:	d00a      	beq.n	8001eee <VectorB0+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8001ed8:	4472      	add	r2, lr
 8001eda:	1a12      	subs	r2, r2, r0
 8001edc:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8001ede:	2a01      	cmp	r2, #1
 8001ee0:	bf98      	it	ls
 8001ee2:	2202      	movls	r2, #2
  }
  port_timer_set_alarm(now + delta);
 8001ee4:	4402      	add	r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001ee6:	b292      	uxth	r2, r2
 8001ee8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eec:	635a      	str	r2, [r3, #52]	; 0x34
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8001ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001ef8:	f7ff bf42 	b.w	8001d80 <_port_irq_epilogue>
 8001efc:	200011a0 	.word	0x200011a0

08001f00 <Vector84>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <Vector84+0x28>)
 8001f02:	6819      	ldr	r1, [r3, #0]
 8001f04:	f3c1 6103 	ubfx	r1, r1, #24, #4
 8001f08:	b159      	cbz	r1, 8001f22 <Vector84+0x22>
 8001f0a:	4808      	ldr	r0, [pc, #32]	; (8001f2c <Vector84+0x2c>)
/**
 * @brief   DMA1 stream 7 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8001f0c:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8001f0e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001f10:	060a      	lsls	r2, r1, #24
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	b10c      	cbz	r4, 8001f1a <Vector84+0x1a>
 8001f16:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001f18:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);

  OSAL_IRQ_EPILOGUE();
 8001f1e:	f7ff bf2f 	b.w	8001d80 <_port_irq_epilogue>
 8001f22:	f7ff bf2d 	b.w	8001d80 <_port_irq_epilogue>
 8001f26:	bf00      	nop
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	200008f0 	.word	0x200008f0

08001f30 <Vector80>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <Vector80+0x28>)
 8001f32:	6819      	ldr	r1, [r3, #0]
 8001f34:	f3c1 5103 	ubfx	r1, r1, #20, #4
 8001f38:	b159      	cbz	r1, 8001f52 <Vector80+0x22>
 8001f3a:	4808      	ldr	r0, [pc, #32]	; (8001f5c <Vector80+0x2c>)
/**
 * @brief   DMA1 stream 6 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8001f3c:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8001f3e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001f40:	050a      	lsls	r2, r1, #20
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	b10c      	cbz	r4, 8001f4a <Vector80+0x1a>
 8001f46:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001f48:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);

  OSAL_IRQ_EPILOGUE();
 8001f4e:	f7ff bf17 	b.w	8001d80 <_port_irq_epilogue>
 8001f52:	f7ff bf15 	b.w	8001d80 <_port_irq_epilogue>
 8001f56:	bf00      	nop
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	200008f0 	.word	0x200008f0

08001f60 <Vector7C>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <Vector7C+0x28>)
 8001f62:	6819      	ldr	r1, [r3, #0]
 8001f64:	f3c1 4103 	ubfx	r1, r1, #16, #4
 8001f68:	b159      	cbz	r1, 8001f82 <Vector7C+0x22>
 8001f6a:	4808      	ldr	r0, [pc, #32]	; (8001f8c <Vector7C+0x2c>)
/**
 * @brief   DMA1 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8001f6c:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8001f6e:	6a04      	ldr	r4, [r0, #32]
 8001f70:	040a      	lsls	r2, r1, #16
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	b10c      	cbz	r4, 8001f7a <Vector7C+0x1a>
 8001f76:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001f78:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);

  OSAL_IRQ_EPILOGUE();
 8001f7e:	f7ff beff 	b.w	8001d80 <_port_irq_epilogue>
 8001f82:	f7ff befd 	b.w	8001d80 <_port_irq_epilogue>
 8001f86:	bf00      	nop
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	200008f0 	.word	0x200008f0

08001f90 <Vector78>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <Vector78+0x28>)
 8001f92:	6819      	ldr	r1, [r3, #0]
 8001f94:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8001f98:	b159      	cbz	r1, 8001fb2 <Vector78+0x22>
 8001f9a:	4808      	ldr	r0, [pc, #32]	; (8001fbc <Vector78+0x2c>)
/**
 * @brief   DMA1 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8001f9c:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8001f9e:	6984      	ldr	r4, [r0, #24]
 8001fa0:	030a      	lsls	r2, r1, #12
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	b10c      	cbz	r4, 8001faa <Vector78+0x1a>
 8001fa6:	69c0      	ldr	r0, [r0, #28]
 8001fa8:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);

  OSAL_IRQ_EPILOGUE();
 8001fae:	f7ff bee7 	b.w	8001d80 <_port_irq_epilogue>
 8001fb2:	f7ff bee5 	b.w	8001d80 <_port_irq_epilogue>
 8001fb6:	bf00      	nop
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	200008f0 	.word	0x200008f0

08001fc0 <Vector74>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <Vector74+0x28>)
 8001fc2:	6819      	ldr	r1, [r3, #0]
 8001fc4:	f3c1 2103 	ubfx	r1, r1, #8, #4
 8001fc8:	b159      	cbz	r1, 8001fe2 <Vector74+0x22>
 8001fca:	4808      	ldr	r0, [pc, #32]	; (8001fec <Vector74+0x2c>)
/**
 * @brief   DMA1 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8001fcc:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8001fce:	6904      	ldr	r4, [r0, #16]
 8001fd0:	020a      	lsls	r2, r1, #8
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	b10c      	cbz	r4, 8001fda <Vector74+0x1a>
 8001fd6:	6940      	ldr	r0, [r0, #20]
 8001fd8:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);

  OSAL_IRQ_EPILOGUE();
 8001fde:	f7ff becf 	b.w	8001d80 <_port_irq_epilogue>
 8001fe2:	f7ff becd 	b.w	8001d80 <_port_irq_epilogue>
 8001fe6:	bf00      	nop
 8001fe8:	40020000 	.word	0x40020000
 8001fec:	200008f0 	.word	0x200008f0

08001ff0 <Vector70>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <Vector70+0x28>)
 8001ff2:	6819      	ldr	r1, [r3, #0]
 8001ff4:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8001ff8:	b159      	cbz	r1, 8002012 <Vector70+0x22>
 8001ffa:	4808      	ldr	r0, [pc, #32]	; (800201c <Vector70+0x2c>)
/**
 * @brief   DMA1 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8001ffc:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8001ffe:	6884      	ldr	r4, [r0, #8]
 8002000:	010a      	lsls	r2, r1, #4
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	b10c      	cbz	r4, 800200a <Vector70+0x1a>
 8002006:	68c0      	ldr	r0, [r0, #12]
 8002008:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 800200a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);

  OSAL_IRQ_EPILOGUE();
 800200e:	f7ff beb7 	b.w	8001d80 <_port_irq_epilogue>
 8002012:	f7ff beb5 	b.w	8001d80 <_port_irq_epilogue>
 8002016:	bf00      	nop
 8002018:	40020000 	.word	0x40020000
 800201c:	200008f0 	.word	0x200008f0

08002020 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8002020:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <Vector6C+0x20>)
 8002024:	6819      	ldr	r1, [r3, #0]
 8002026:	f011 010f 	ands.w	r1, r1, #15
 800202a:	d005      	beq.n	8002038 <Vector6C+0x18>
 800202c:	4a05      	ldr	r2, [pc, #20]	; (8002044 <Vector6C+0x24>)
 800202e:	6059      	str	r1, [r3, #4]
 8002030:	6813      	ldr	r3, [r2, #0]
 8002032:	b10b      	cbz	r3, 8002038 <Vector6C+0x18>
 8002034:	6850      	ldr	r0, [r2, #4]
 8002036:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);

  OSAL_IRQ_EPILOGUE();
 800203c:	f7ff bea0 	b.w	8001d80 <_port_irq_epilogue>
 8002040:	40020000 	.word	0x40020000
 8002044:	200008f0 	.word	0x200008f0
	...

08002050 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8002050:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8002054:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8002056:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800205a:	2300      	movs	r3, #0
 800205c:	f383 8811 	msr	BASEPRI, r3
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
	...

08002070 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8002070:	b410      	push	{r4}
 8002072:	2320      	movs	r3, #32
 8002074:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8002078:	4c09      	ldr	r4, [pc, #36]	; (80020a0 <chCoreAlloc+0x30>)
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <chCoreAlloc+0x34>)
 800207c:	6822      	ldr	r2, [r4, #0]
 800207e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8002080:	1dc3      	adds	r3, r0, #7
 8002082:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8002086:	1a89      	subs	r1, r1, r2
 8002088:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800208a:	bf9d      	ittte	ls
 800208c:	189b      	addls	r3, r3, r2
 800208e:	6023      	strls	r3, [r4, #0]

  return p;
 8002090:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8002092:	2000      	movhi	r0, #0
 8002094:	2300      	movs	r3, #0
 8002096:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800209a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	20001360 	.word	0x20001360
 80020a4:	200010ec 	.word	0x200010ec
	...

080020b0 <VectorBC>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80020b0:	4a3b      	ldr	r2, [pc, #236]	; (80021a0 <VectorBC+0xf0>)
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 80020b2:	b538      	push	{r3, r4, r5, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80020b4:	6b54      	ldr	r4, [r2, #52]	; 0x34
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80020b6:	493b      	ldr	r1, [pc, #236]	; (80021a4 <VectorBC+0xf4>)
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t regSR2 = dp->SR2;
 80020b8:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 80020ba:	6965      	ldr	r5, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80020bc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80020c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80020c4:	428b      	cmp	r3, r1
 80020c6:	d04c      	beq.n	8002162 <VectorBC+0xb2>
 80020c8:	d81e      	bhi.n	8002108 <VectorBC+0x58>
 80020ca:	3907      	subs	r1, #7
 80020cc:	428b      	cmp	r3, r1
 80020ce:	d03c      	beq.n	800214a <VectorBC+0x9a>
 80020d0:	3101      	adds	r1, #1
 80020d2:	428b      	cmp	r3, r1
 80020d4:	d110      	bne.n	80020f8 <VectorBC+0x48>
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
 80020d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80020d8:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80020da:	685b      	ldr	r3, [r3, #4]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80020dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020e0:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 80020ea:	6862      	ldr	r2, [r4, #4]
 80020ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020f0:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d94e      	bls.n	8002196 <VectorBC+0xe6>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 80020f8:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 80020fc:	bf18      	it	ne
 80020fe:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 8002100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8002104:	f7ff be3c 	b.w	8001d80 <_port_irq_epilogue>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002108:	4927      	ldr	r1, [pc, #156]	; (80021a8 <VectorBC+0xf8>)
 800210a:	428b      	cmp	r3, r1
 800210c:	d012      	beq.n	8002134 <VectorBC+0x84>
 800210e:	3102      	adds	r1, #2
 8002110:	428b      	cmp	r3, r1
 8002112:	d1f1      	bne.n	80020f8 <VectorBC+0x48>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8002114:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	b33b      	cbz	r3, 800216c <VectorBC+0xbc>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800211c:	6823      	ldr	r3, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800211e:	8c11      	ldrh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8002120:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 8002124:	f041 0101 	orr.w	r1, r1, #1
 8002128:	8411      	strh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800212a:	6023      	str	r3, [r4, #0]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 800212c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8002130:	f7ff be26 	b.w	8001d80 <_port_irq_epilogue>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002134:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8002136:	6b12      	ldr	r2, [r2, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 800213c:	6852      	ldr	r2, [r2, #4]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800213e:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8002140:	6813      	ldr	r3, [r2, #0]
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	e7d6      	b.n	80020f8 <VectorBC+0x48>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 800214a:	8c13      	ldrh	r3, [r2, #32]
 800214c:	0a1a      	lsrs	r2, r3, #8
 800214e:	d00b      	beq.n	8002168 <VectorBC+0xb8>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002158:	f002 0206 	and.w	r2, r2, #6
 800215c:	4313      	orrs	r3, r2
 800215e:	6123      	str	r3, [r4, #16]
 8002160:	e7ca      	b.n	80020f8 <VectorBC+0x48>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8002162:	8c13      	ldrh	r3, [r2, #32]
 8002164:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8002168:	6123      	str	r3, [r4, #16]
 800216a:	e7c5      	b.n	80020f8 <VectorBC+0x48>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800216c:	6861      	ldr	r1, [r4, #4]
 800216e:	2020      	movs	r0, #32
 8002170:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8002174:	6061      	str	r1, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8002176:	6821      	ldr	r1, [r4, #0]
 8002178:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800217c:	6021      	str	r1, [r4, #0]
 800217e:	f380 8811 	msr	BASEPRI, r0
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8002182:	69d0      	ldr	r0, [r2, #28]
 8002184:	b118      	cbz	r0, 800218e <VectorBC+0xde>

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 8002186:	6203      	str	r3, [r0, #32]
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8002188:	61d3      	str	r3, [r2, #28]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 800218a:	f001 fc89 	bl	8003aa0 <chSchReadyI>
 800218e:	2300      	movs	r3, #0
 8002190:	f383 8811 	msr	BASEPRI, r3
 8002194:	e7b0      	b.n	80020f8 <VectorBC+0x48>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800219c:	6023      	str	r3, [r4, #0]
 800219e:	e7ab      	b.n	80020f8 <VectorBC+0x48>
 80021a0:	200008b8 	.word	0x200008b8
 80021a4:	00030008 	.word	0x00030008
 80021a8:	00070082 	.word	0x00070082
 80021ac:	00000000 	.word	0x00000000

080021b0 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 80021b0:	4a38      	ldr	r2, [pc, #224]	; (8002294 <VectorC0+0xe4>)
}

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 80021b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 80021b4:	6b50      	ldr	r0, [r2, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80021b6:	6b15      	ldr	r5, [r2, #48]	; 0x30

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 80021b8:	6947      	ldr	r7, [r0, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80021ba:	f8d5 e004 	ldr.w	lr, [r5, #4]

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 80021be:	b2b9      	uxth	r1, r7

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 80021c0:	f401 435f 	and.w	r3, r1, #57088	; 0xdf00
 80021c4:	43db      	mvns	r3, r3
 80021c6:	6143      	str	r3, [r0, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80021c8:	f8de 6000 	ldr.w	r6, [lr]
  dmaStreamDisable(i2cp->dmarx);
 80021cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80021ce:	f026 060f 	bic.w	r6, r6, #15
 80021d2:	f8ce 6000 	str.w	r6, [lr]
 80021d6:	7c2e      	ldrb	r6, [r5, #16]
 80021d8:	240f      	movs	r4, #15
 80021da:	682d      	ldr	r5, [r5, #0]
 80021dc:	fa04 fe06 	lsl.w	lr, r4, r6
  dmaStreamDisable(i2cp->dmarx);
 80021e0:	685e      	ldr	r6, [r3, #4]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80021e2:	f8c5 e004 	str.w	lr, [r5, #4]
  dmaStreamDisable(i2cp->dmarx);
 80021e6:	6835      	ldr	r5, [r6, #0]
 80021e8:	f8d3 e000 	ldr.w	lr, [r3]
 80021ec:	f025 050f 	bic.w	r5, r5, #15
 80021f0:	6035      	str	r5, [r6, #0]
 80021f2:	7c1d      	ldrb	r5, [r3, #16]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 80021f4:	f401 7380 	and.w	r3, r1, #256	; 0x100
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 80021f8:	40ac      	lsls	r4, r5

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 80021fa:	b29b      	uxth	r3, r3
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 80021fc:	f8ce 4004 	str.w	r4, [lr, #4]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8002200:	2b00      	cmp	r3, #0
 8002202:	d13f      	bne.n	8002284 <VectorC0+0xd4>

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;
 8002204:	6093      	str	r3, [r2, #8]

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8002206:	058d      	lsls	r5, r1, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8002208:	bf44      	itt	mi
 800220a:	f043 0302 	orrmi.w	r3, r3, #2
 800220e:	6093      	strmi	r3, [r2, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8002210:	054c      	lsls	r4, r1, #21
 8002212:	d50a      	bpl.n	800222a <VectorC0+0x7a>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8002214:	6844      	ldr	r4, [r0, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
    i2cp->errors |= I2C_ACK_FAILURE;
 8002216:	f043 0304 	orr.w	r3, r3, #4

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800221a:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 800221e:	6044      	str	r4, [r0, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8002220:	6804      	ldr	r4, [r0, #0]
 8002222:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8002226:	6004      	str	r4, [r0, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8002228:	6093      	str	r3, [r2, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 800222a:	050e      	lsls	r6, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 800222c:	bf44      	itt	mi
 800222e:	f043 0308 	orrmi.w	r3, r3, #8
 8002232:	6093      	strmi	r3, [r2, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8002234:	044d      	lsls	r5, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 8002236:	bf44      	itt	mi
 8002238:	f043 0320 	orrmi.w	r3, r3, #32
 800223c:	6093      	strmi	r3, [r2, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 800223e:	04cc      	lsls	r4, r1, #19
 8002240:	d518      	bpl.n	8002274 <VectorC0+0xc4>
    i2cp->errors |= I2C_PEC_ERROR;
 8002242:	f043 0310 	orr.w	r3, r3, #16

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002246:	0438      	lsls	r0, r7, #16

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;
 8002248:	6093      	str	r3, [r2, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800224a:	d41f      	bmi.n	800228c <VectorC0+0xdc>
 800224c:	2320      	movs	r3, #32
 800224e:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8002252:	69d0      	ldr	r0, [r2, #28]
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <VectorC0+0xe4>)
 8002256:	b130      	cbz	r0, 8002266 <VectorC0+0xb6>

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 8002258:	f06f 0201 	mvn.w	r2, #1
 800225c:	6202      	str	r2, [r0, #32]
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8002262:	f001 fc1d 	bl	8003aa0 <chSchReadyI>
 8002266:	2300      	movs	r3, #0
 8002268:	f383 8811 	msr	BASEPRI, r3

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 800226c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8002270:	f7ff bd86 	b.w	8001d80 <_port_irq_epilogue>
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002274:	0439      	lsls	r1, r7, #16
 8002276:	d409      	bmi.n	800228c <VectorC0+0xdc>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1e7      	bne.n	800224c <VectorC0+0x9c>

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 800227c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8002280:	f7ff bd7e 	b.w	8001d80 <_port_irq_epilogue>
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 8002284:	2401      	movs	r4, #1
 8002286:	4623      	mov	r3, r4
 8002288:	6094      	str	r4, [r2, #8]
 800228a:	e7bc      	b.n	8002206 <VectorC0+0x56>

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
    i2cp->errors |= I2C_SMB_ALERT;
 800228c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002290:	6093      	str	r3, [r2, #8]
 8002292:	e7db      	b.n	800224c <VectorC0+0x9c>
 8002294:	200008b8 	.word	0x200008b8
	...

080022a0 <readt.lto_priv.79>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80022a0:	300c      	adds	r0, #12
 80022a2:	f001 bed5 	b.w	8004050 <chIQReadTimeout>
 80022a6:	bf00      	nop
	...

080022b0 <read.lto_priv.73>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80022b0:	300c      	adds	r0, #12
 80022b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022b6:	f001 becb 	b.w	8004050 <chIQReadTimeout>
 80022ba:	bf00      	nop
 80022bc:	0000      	movs	r0, r0
	...

080022c0 <gett.lto_priv.77>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80022c0:	300c      	adds	r0, #12
 80022c2:	f001 bf05 	b.w	80040d0 <chIQGetTimeout>
 80022c6:	bf00      	nop
	...

080022d0 <get.lto_priv.75>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80022d0:	300c      	adds	r0, #12
 80022d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022d6:	f001 befb 	b.w	80040d0 <chIQGetTimeout>
 80022da:	bf00      	nop
 80022dc:	0000      	movs	r0, r0
	...

080022e0 <print_line.lto_priv.144>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 80022e0:	b570      	push	{r4, r5, r6, lr}
 80022e2:	4e09      	ldr	r6, [pc, #36]	; (8002308 <print_line.lto_priv.144+0x28>)
 80022e4:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 80022e6:	6830      	ldr	r0, [r6, #0]
 80022e8:	212d      	movs	r1, #45	; 0x2d
 80022ea:	6803      	ldr	r3, [r0, #0]
 80022ec:	4d06      	ldr	r5, [pc, #24]	; (8002308 <print_line.lto_priv.144+0x28>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 80022f2:	3c01      	subs	r4, #1
 80022f4:	d1f7      	bne.n	80022e6 <print_line.lto_priv.144+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 80022f6:	6828      	ldr	r0, [r5, #0]
 80022f8:	4904      	ldr	r1, [pc, #16]	; (800230c <print_line.lto_priv.144+0x2c>)
 80022fa:	6803      	ldr	r3, [r0, #0]
 80022fc:	2202      	movs	r2, #2
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8002304:	4718      	bx	r3
 8002306:	bf00      	nop
 8002308:	200010e8 	.word	0x200010e8
 800230c:	08006c60 	.word	0x08006c60

08002310 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 8002310:	b508      	push	{r3, lr}

  chThdSleep(1);
 8002312:	2001      	movs	r0, #1
 8002314:	f001 ff04 	bl	8004120 <chThdSleep>
 8002318:	2320      	movs	r3, #32
 800231a:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800231e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002322:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002324:	2300      	movs	r3, #0
 8002326:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 800232a:	b280      	uxth	r0, r0
 800232c:	bd08      	pop	{r3, pc}
 800232e:	bf00      	nop

08002330 <test_wait_threads>:
}

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8002330:	b570      	push	{r4, r5, r6, lr}
 8002332:	4c07      	ldr	r4, [pc, #28]	; (8002350 <test_wait_threads+0x20>)
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 8002334:	2600      	movs	r6, #0
 8002336:	f104 0514 	add.w	r5, r4, #20
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 800233a:	f854 0b04 	ldr.w	r0, [r4], #4
 800233e:	b118      	cbz	r0, 8002348 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8002340:	f001 fb8e 	bl	8003a60 <chThdWait>
      threads[i] = NULL;
 8002344:	f844 6c04 	str.w	r6, [r4, #-4]
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8002348:	42ac      	cmp	r4, r5
 800234a:	d1f6      	bne.n	800233a <test_wait_threads+0xa>
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
    }
}
 800234c:	bd70      	pop	{r4, r5, r6, pc}
 800234e:	bf00      	nop
 8002350:	200012f4 	.word	0x200012f4
	...

08002360 <test_terminate_threads>:
 */

/**
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <test_terminate_threads+0x2c>)
 8002362:	b430      	push	{r4, r5}
 8002364:	f103 0014 	add.w	r0, r3, #20
 8002368:	2520      	movs	r5, #32
 800236a:	2400      	movs	r4, #0
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 800236c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002370:	b13a      	cbz	r2, 8002382 <test_terminate_threads+0x22>
 8002372:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 8002376:	7f51      	ldrb	r1, [r2, #29]
 8002378:	f041 0104 	orr.w	r1, r1, #4
 800237c:	7751      	strb	r1, [r2, #29]
 800237e:	f384 8811 	msr	BASEPRI, r4
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8002382:	4283      	cmp	r3, r0
 8002384:	d1f2      	bne.n	800236c <test_terminate_threads+0xc>
    if (threads[i])
      chThdTerminate(threads[i]);
}
 8002386:	bc30      	pop	{r4, r5}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	200012f4 	.word	0x200012f4

08002390 <_test_assert_time_window>:
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 8002390:	b410      	push	{r4}
 8002392:	2320      	movs	r3, #32
 8002394:	f383 8811 	msr	BASEPRI, r3
 8002398:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800239c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800239e:	2300      	movs	r3, #0
 80023a0:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 80023a4:	1a52      	subs	r2, r2, r1
 80023a6:	1a64      	subs	r4, r4, r1
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 80023a8:	b2a1      	uxth	r1, r4
 80023aa:	b292      	uxth	r2, r2
 80023ac:	4291      	cmp	r1, r2
 80023ae:	d306      	bcc.n	80023be <_test_assert_time_window+0x2e>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80023b0:	4c05      	ldr	r4, [pc, #20]	; (80023c8 <_test_assert_time_window+0x38>)
  local_fail = TRUE;
 80023b2:	4906      	ldr	r1, [pc, #24]	; (80023cc <_test_assert_time_window+0x3c>)
  failpoint = point;
 80023b4:	4a06      	ldr	r2, [pc, #24]	; (80023d0 <_test_assert_time_window+0x40>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80023b6:	2301      	movs	r3, #1
 80023b8:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
 80023ba:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 80023bc:	6010      	str	r0, [r2, #0]
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 80023be:	4618      	mov	r0, r3
 80023c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20001110 	.word	0x20001110
 80023cc:	2000118c 	.word	0x2000118c
 80023d0:	20000f90 	.word	0x20000f90
	...

080023e0 <_test_assert_sequence>:
  if (!condition)
    return _test_fail(point);
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
 80023e0:	b4f0      	push	{r4, r5, r6, r7}
 80023e2:	4e0e      	ldr	r6, [pc, #56]	; (800241c <_test_assert_sequence+0x3c>)
  char *cp = tokens_buffer;
 80023e4:	4f0e      	ldr	r7, [pc, #56]	; (8002420 <_test_assert_sequence+0x40>)
 80023e6:	6835      	ldr	r5, [r6, #0]
 80023e8:	463b      	mov	r3, r7
 80023ea:	e005      	b.n	80023f8 <_test_assert_sequence+0x18>
  while (cp < tokp) {
    if (*cp++ != *expected++)
 80023ec:	f813 4b01 	ldrb.w	r4, [r3], #1
 80023f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80023f4:	4294      	cmp	r4, r2
 80023f6:	d107      	bne.n	8002408 <_test_assert_sequence+0x28>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 80023f8:	42ab      	cmp	r3, r5
 80023fa:	d3f7      	bcc.n	80023ec <_test_assert_sequence+0xc>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 80023fc:	780b      	ldrb	r3, [r1, #0]
 80023fe:	b91b      	cbnz	r3, 8002408 <_test_assert_sequence+0x28>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8002400:	6037      	str	r7, [r6, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8002402:	4618      	mov	r0, r3
 8002404:	bcf0      	pop	{r4, r5, r6, r7}
 8002406:	4770      	bx	lr
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8002408:	4c06      	ldr	r4, [pc, #24]	; (8002424 <_test_assert_sequence+0x44>)
  local_fail = TRUE;
 800240a:	4907      	ldr	r1, [pc, #28]	; (8002428 <_test_assert_sequence+0x48>)
  failpoint = point;
 800240c:	4a07      	ldr	r2, [pc, #28]	; (800242c <_test_assert_sequence+0x4c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 800240e:	2301      	movs	r3, #1
 8002410:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 8002412:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8002414:	700b      	strb	r3, [r1, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8002416:	4618      	mov	r0, r3
 8002418:	bcf0      	pop	{r4, r5, r6, r7}
 800241a:	4770      	bx	lr
 800241c:	20001340 	.word	0x20001340
 8002420:	20001190 	.word	0x20001190
 8002424:	20001110 	.word	0x20001110
 8002428:	2000118c 	.word	0x2000118c
 800242c:	20000f90 	.word	0x20000f90

08002430 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8002430:	b959      	cbnz	r1, 800244a <_test_assert+0x1a>
  local_fail = TRUE;
  failpoint = point;
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {
 8002432:	b410      	push	{r4}
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8002434:	4906      	ldr	r1, [pc, #24]	; (8002450 <_test_assert+0x20>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8002436:	4c07      	ldr	r4, [pc, #28]	; (8002454 <_test_assert+0x24>)
  local_fail = TRUE;
  failpoint = point;
 8002438:	4a07      	ldr	r2, [pc, #28]	; (8002458 <_test_assert+0x28>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 800243a:	2301      	movs	r3, #1
 800243c:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 800243e:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8002440:	700b      	strb	r3, [r1, #0]
bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
}
 8002442:	4618      	mov	r0, r3
 8002444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002448:	4770      	bx	lr

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	4770      	bx	lr
 8002450:	2000118c 	.word	0x2000118c
 8002454:	20001110 	.word	0x20001110
 8002458:	20000f90 	.word	0x20000f90
 800245c:	00000000 	.word	0x00000000

08002460 <test_emit_token>:
/**
 * @brief   Emits a token into the tokens buffer.
 *
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {
 8002460:	b410      	push	{r4}
 8002462:	2320      	movs	r3, #32
 8002464:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  *tokp++ = token;
 8002468:	4a05      	ldr	r2, [pc, #20]	; (8002480 <test_emit_token+0x20>)
 800246a:	2100      	movs	r1, #0
 800246c:	6813      	ldr	r3, [r2, #0]
 800246e:	1c5c      	adds	r4, r3, #1
 8002470:	6014      	str	r4, [r2, #0]
 8002472:	7018      	strb	r0, [r3, #0]
 8002474:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
}
 8002478:	f85d 4b04 	ldr.w	r4, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20001340 	.word	0x20001340
	...

08002490 <thread.lto_priv.165>:
 * priority order regardless of the initial order.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8002490:	7800      	ldrb	r0, [r0, #0]
 8002492:	f7ff bfe5 	b.w	8002460 <test_emit_token>
 8002496:	bf00      	nop
	...

080024a0 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 80024a0:	b570      	push	{r4, r5, r6, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80024a2:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 80024a4:	4604      	mov	r4, r0
 80024a6:	4d09      	ldr	r5, [pc, #36]	; (80024cc <test_println+0x2c>)
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80024a8:	b139      	cbz	r1, 80024ba <test_println+0x1a>
    chSequentialStreamPut(chp, *msgp++);
 80024aa:	6828      	ldr	r0, [r5, #0]
 80024ac:	6803      	ldr	r3, [r0, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80024b2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80024b6:	2900      	cmp	r1, #0
 80024b8:	d1f7      	bne.n	80024aa <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 80024ba:	6828      	ldr	r0, [r5, #0]
 80024bc:	4904      	ldr	r1, [pc, #16]	; (80024d0 <test_println+0x30>)
 80024be:	6803      	ldr	r3, [r0, #0]
 80024c0:	2202      	movs	r2, #2
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 80024c8:	4718      	bx	r3
 80024ca:	bf00      	nop
 80024cc:	200010e8 	.word	0x200010e8
 80024d0:	08006c60 	.word	0x08006c60
	...

080024e0 <test_print>:
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 80024e0:	b538      	push	{r3, r4, r5, lr}

  while (*msgp)
 80024e2:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 80024e4:	4604      	mov	r4, r0

  while (*msgp)
 80024e6:	b141      	cbz	r1, 80024fa <test_print+0x1a>
 80024e8:	4d04      	ldr	r5, [pc, #16]	; (80024fc <test_print+0x1c>)
    chSequentialStreamPut(chp, *msgp++);
 80024ea:	6828      	ldr	r0, [r5, #0]
 80024ec:	6803      	ldr	r3, [r0, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80024f2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80024f6:	2900      	cmp	r1, #0
 80024f8:	d1f7      	bne.n	80024ea <test_print+0xa>
 80024fa:	bd38      	pop	{r3, r4, r5, pc}
 80024fc:	200010e8 	.word	0x200010e8

08002500 <test_printn>:
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
 8002500:	b310      	cbz	r0, 8002548 <test_printn+0x48>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8002502:	b570      	push	{r4, r5, r6, lr}
 8002504:	b084      	sub	sp, #16
  char buf[16], *p;

  if (!n)
 8002506:	466d      	mov	r5, sp
 8002508:	466c      	mov	r4, sp
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <test_printn+0x54>)
 800250c:	fba2 1300 	umull	r1, r3, r2, r0
 8002510:	08db      	lsrs	r3, r3, #3
 8002512:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002516:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 800251a:	f100 0130 	add.w	r1, r0, #48	; 0x30
 800251e:	b2c9      	uxtb	r1, r1
 8002520:	f804 1b01 	strb.w	r1, [r4], #1

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 8002524:	4618      	mov	r0, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <test_printn+0xc>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 800252a:	42ac      	cmp	r4, r5
 800252c:	d90a      	bls.n	8002544 <test_printn+0x44>
 800252e:	4e0a      	ldr	r6, [pc, #40]	; (8002558 <test_printn+0x58>)
 8002530:	3c01      	subs	r4, #1
 8002532:	e001      	b.n	8002538 <test_printn+0x38>
 8002534:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      chSequentialStreamPut(chp, *--p);
 8002538:	6830      	ldr	r0, [r6, #0]
 800253a:	6803      	ldr	r3, [r0, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4798      	blx	r3
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 8002540:	42ac      	cmp	r4, r5
 8002542:	d1f7      	bne.n	8002534 <test_printn+0x34>
      chSequentialStreamPut(chp, *--p);
  }
}
 8002544:	b004      	add	sp, #16
 8002546:	bd70      	pop	{r4, r5, r6, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <test_printn+0x58>)
 800254a:	2130      	movs	r1, #48	; 0x30
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	6803      	ldr	r3, [r0, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4718      	bx	r3
 8002554:	cccccccd 	.word	0xcccccccd
 8002558:	200010e8 	.word	0x200010e8
 800255c:	00000000 	.word	0x00000000

08002560 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002560:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <__early_init+0x6c>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002562:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800256c:	680b      	ldr	r3, [r1, #0]
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <__early_init+0x6c>)
 8002570:	0798      	lsls	r0, r3, #30
 8002572:	d5fb      	bpl.n	800256c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002574:	4611      	mov	r1, r2
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002576:	6813      	ldr	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002578:	2000      	movs	r0, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800257a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 800257e:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002580:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002582:	684b      	ldr	r3, [r1, #4]
 8002584:	4a11      	ldr	r2, [pc, #68]	; (80025cc <__early_init+0x6c>)
 8002586:	f013 0f0c 	tst.w	r3, #12
 800258a:	d1fa      	bne.n	8002582 <__early_init+0x22>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800258c:	4611      	mov	r1, r2
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800258e:	6853      	ldr	r3, [r2, #4]
 8002590:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8002594:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8002596:	6813      	ldr	r3, [r2, #0]
 8002598:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800259c:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800259e:	680b      	ldr	r3, [r1, #0]
 80025a0:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <__early_init+0x6c>)
 80025a2:	019b      	lsls	r3, r3, #6
 80025a4:	d5fb      	bpl.n	800259e <__early_init+0x3e>

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80025a6:	4611      	mov	r1, r2
/*
 * Early initialization code.
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {
 80025a8:	b410      	push	{r4}
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <__early_init+0x70>)
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80025ac:	4c09      	ldr	r4, [pc, #36]	; (80025d4 <__early_init+0x74>)
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80025ae:	2011      	movs	r0, #17
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80025b0:	6054      	str	r4, [r2, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80025b2:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 80025b4:	6853      	ldr	r3, [r2, #4]
 80025b6:	f043 0302 	orr.w	r3, r3, #2
 80025ba:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80025bc:	684b      	ldr	r3, [r1, #4]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d1fa      	bne.n	80025bc <__early_init+0x5c>

  stm32_clock_init();
}
 80025c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40022000 	.word	0x40022000
 80025d4:	00686400 	.word	0x00686400
	...

080025e0 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 80025e0:	b508      	push	{r3, lr}
 80025e2:	2220      	movs	r2, #32
 80025e4:	4603      	mov	r3, r0
 80025e6:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  objp = mp->mp_next;
 80025ea:	6800      	ldr	r0, [r0, #0]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 80025ec:	b128      	cbz	r0, 80025fa <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 80025ee:	6802      	ldr	r2, [r0, #0]
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	2300      	movs	r3, #0
 80025f4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 80025f8:	bd08      	pop	{r3, pc}
  objp = mp->mp_next;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
    mp->mp_next = mp->mp_next->ph_next;
  }
  else if (mp->mp_provider != NULL) {
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	2a00      	cmp	r2, #0
 80025fe:	d0f8      	beq.n	80025f2 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 8002600:	6858      	ldr	r0, [r3, #4]
 8002602:	4790      	blx	r2
 8002604:	2300      	movs	r3, #0
 8002606:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 800260a:	bd08      	pop	{r3, pc}
 800260c:	0000      	movs	r0, r0
	...

08002610 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8002610:	b570      	push	{r4, r5, r6, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 8002612:	4c0f      	ldr	r4, [pc, #60]	; (8002650 <chHeapStatus+0x40>)
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8002614:	460e      	mov	r6, r1
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 8002616:	2800      	cmp	r0, #0
 8002618:	bf18      	it	ne
 800261a:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 800261c:	f104 0510 	add.w	r5, r4, #16
 8002620:	4628      	mov	r0, r5
 8002622:	f001 fbcd 	bl	8003dc0 <chMtxLock>
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8002626:	68a3      	ldr	r3, [r4, #8]
 8002628:	b173      	cbz	r3, 8002648 <chHeapStatus+0x38>
 800262a:	2200      	movs	r2, #0
 800262c:	4614      	mov	r4, r2
    sz += qp->h.u.next->h.size;
 800262e:	6858      	ldr	r0, [r3, #4]

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8002630:	681b      	ldr	r3, [r3, #0]
    sz += qp->h.u.next->h.size;
    n++;
 8002632:	3401      	adds	r4, #1
  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
    sz += qp->h.u.next->h.size;
 8002634:	4402      	add	r2, r0

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f9      	bne.n	800262e <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
    n++;
    qp = qp->h.u.next;
  }
  if (sizep != NULL) {
 800263a:	b106      	cbz	r6, 800263e <chHeapStatus+0x2e>
    *sizep = sz;
 800263c:	6032      	str	r2, [r6, #0]
  }
  H_UNLOCK(heapp);
 800263e:	4628      	mov	r0, r5
 8002640:	f001 fb1e 	bl	8003c80 <chMtxUnlock>

  return n;
}
 8002644:	4620      	mov	r0, r4
 8002646:	bd70      	pop	{r4, r5, r6, pc}
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  sz = 0;
 8002648:	461a      	mov	r2, r3
  n = 0;
 800264a:	461c      	mov	r4, r3
 800264c:	e7f5      	b.n	800263a <chHeapStatus+0x2a>
 800264e:	bf00      	nop
 8002650:	200010f0 	.word	0x200010f0
	...

08002660 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8002660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
 8002662:	f850 5c08 	ldr.w	r5, [r0, #-8]
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8002666:	4606      	mov	r6, r0
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8002668:	f105 0710 	add.w	r7, r5, #16
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
 800266c:	f1a0 0408 	sub.w	r4, r0, #8
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8002670:	3508      	adds	r5, #8

  H_LOCK(heapp);
 8002672:	4638      	mov	r0, r7
 8002674:	f001 fba4 	bl	8003dc0 <chMtxLock>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8002678:	462b      	mov	r3, r5

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800267a:	42ab      	cmp	r3, r5
 800267c:	d004      	beq.n	8002688 <chHeapFree+0x28>
 800267e:	42a3      	cmp	r3, r4
 8002680:	d302      	bcc.n	8002688 <chHeapFree+0x28>
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	42ab      	cmp	r3, r5
 8002686:	d1fa      	bne.n	800267e <chHeapFree+0x1e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8002688:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800268a:	b11a      	cbz	r2, 8002694 <chHeapFree+0x34>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 800268c:	4294      	cmp	r4, r2
 800268e:	d301      	bcc.n	8002694 <chHeapFree+0x34>
 8002690:	4613      	mov	r3, r2
 8002692:	e7f2      	b.n	800267a <chHeapFree+0x1a>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8002694:	f856 1c04 	ldr.w	r1, [r6, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8002698:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 800269c:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 800269e:	f101 0208 	add.w	r2, r1, #8
 80026a2:	f856 5c08 	ldr.w	r5, [r6, #-8]
 80026a6:	18a0      	adds	r0, r4, r2
 80026a8:	42a8      	cmp	r0, r5
 80026aa:	d00a      	beq.n	80026c2 <chHeapFree+0x62>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 80026ac:	6859      	ldr	r1, [r3, #4]
 80026ae:	f101 0208 	add.w	r2, r1, #8
 80026b2:	441a      	add	r2, r3
 80026b4:	4294      	cmp	r4, r2
 80026b6:	d010      	beq.n	80026da <chHeapFree+0x7a>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 80026b8:	4638      	mov	r0, r7

  return;
}
 80026ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 80026be:	f001 badf 	b.w	8003c80 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 80026c2:	6845      	ldr	r5, [r0, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 80026c4:	58a0      	ldr	r0, [r4, r2]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 80026c6:	194a      	adds	r2, r1, r5
 80026c8:	3208      	adds	r2, #8
        hp->h.u.next = hp->h.u.next->h.u.next;
 80026ca:	e906 0005 	stmdb	r6, {r0, r2}
      }
      if ((LIMIT(qp) == hp)) {
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	f101 0208 	add.w	r2, r1, #8
 80026d4:	441a      	add	r2, r3
 80026d6:	4294      	cmp	r4, r2
 80026d8:	d1ee      	bne.n	80026b8 <chHeapFree+0x58>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
 80026da:	e916 0005 	ldmdb	r6, {r0, r2}
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 80026de:	440a      	add	r2, r1
 80026e0:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 80026e2:	e883 0005 	stmia.w	r3, {r0, r2}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 80026e6:	4638      	mov	r0, r7

  return;
}
 80026e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 80026ec:	f001 bac8 	b.w	8003c80 <chMtxUnlock>

080026f0 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 80026f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL) {
    heapp = &default_heap;
 80026f2:	4e21      	ldr	r6, [pc, #132]	; (8002778 <chHeapAlloc+0x88>)
  }

  size = MEM_ALIGN_NEXT(size);
 80026f4:	3107      	adds	r1, #7
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL) {
    heapp = &default_heap;
 80026f6:	2800      	cmp	r0, #0
 80026f8:	bf18      	it	ne
 80026fa:	4606      	movne	r6, r0
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
 80026fc:	f106 0710 	add.w	r7, r6, #16
 8002700:	4638      	mov	r0, r7

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
 8002702:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 8002706:	f106 0408 	add.w	r4, r6, #8

  H_LOCK(heapp);
 800270a:	f001 fb59 	bl	8003dc0 <chMtxLock>
 800270e:	e003      	b.n	8002718 <chHeapAlloc+0x28>
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8002710:	6843      	ldr	r3, [r0, #4]
 8002712:	429d      	cmp	r5, r3
 8002714:	d912      	bls.n	800273c <chHeapAlloc+0x4c>
 8002716:	4604      	mov	r4, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 8002718:	6820      	ldr	r0, [r4, #0]
 800271a:	2800      	cmp	r0, #0
 800271c:	d1f8      	bne.n	8002710 <chHeapAlloc+0x20>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 800271e:	4638      	mov	r0, r7
 8002720:	f001 faae 	bl	8003c80 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 8002724:	6833      	ldr	r3, [r6, #0]
 8002726:	b323      	cbz	r3, 8002772 <chHeapAlloc+0x82>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8002728:	f105 0008 	add.w	r0, r5, #8
 800272c:	4798      	blx	r3
    if (hp != NULL) {
 800272e:	b300      	cbz	r0, 8002772 <chHeapAlloc+0x82>
      hp->h.u.heap = heapp;
 8002730:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 8002732:	6045      	str	r5, [r0, #4]
      hp++;
 8002734:	f100 0408 	add.w	r4, r0, #8
      /*lint -restore*/
    }
  }

  return NULL;
}
 8002738:	4620      	mov	r0, r4
 800273a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < (size + sizeof(union heap_header))) {
 800273c:	f105 0108 	add.w	r1, r5, #8
 8002740:	4299      	cmp	r1, r3
 8002742:	d909      	bls.n	8002758 <chHeapAlloc+0x68>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8002744:	6803      	ldr	r3, [r0, #0]
 8002746:	6023      	str	r3, [r4, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8002748:	4604      	mov	r4, r0
      H_UNLOCK(heapp);
 800274a:	4638      	mov	r0, r7
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 800274c:	f844 6b08 	str.w	r6, [r4], #8
      H_UNLOCK(heapp);
 8002750:	f001 fa96 	bl	8003c80 <chMtxUnlock>
      /*lint -restore*/
    }
  }

  return NULL;
}
 8002754:	4620      	mov	r0, r4
 8002756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002758:	f06f 0e07 	mvn.w	lr, #7
 800275c:	ebc5 0e0e 	rsb	lr, r5, lr
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8002760:	449e      	add	lr, r3
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8002762:	6803      	ldr	r3, [r0, #0]
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 8002764:	1842      	adds	r2, r0, r1
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8002766:	5043      	str	r3, [r0, r1]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8002768:	f8c2 e004 	str.w	lr, [r2, #4]
        qp->h.u.next = fp;
 800276c:	6022      	str	r2, [r4, #0]
        hp->h.size = size;
 800276e:	6045      	str	r5, [r0, #4]
 8002770:	e7ea      	b.n	8002748 <chHeapAlloc+0x58>
      return (void *)hp;
      /*lint -restore*/
    }
  }

  return NULL;
 8002772:	2400      	movs	r4, #0
 8002774:	e7e0      	b.n	8002738 <chHeapAlloc+0x48>
 8002776:	bf00      	nop
 8002778:	200010f0 	.word	0x200010f0
 800277c:	00000000 	.word	0x00000000

08002780 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8002780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002784:	b083      	sub	sp, #12
 8002786:	4604      	mov	r4, r0
 8002788:	468b      	mov	fp, r1
 800278a:	4615      	mov	r5, r2
 800278c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800278e:	69c7      	ldr	r7, [r0, #28]
 8002790:	f04f 0820 	mov.w	r8, #32
 8002794:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 8002798:	2600      	movs	r6, #0
 800279a:	46b1      	mov	r9, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800279c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800279e:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 80027a2:	b1fb      	cbz	r3, 80027e4 <chOQWriteTimeout+0x64>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80027a4:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 80027a6:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80027a8:	1c50      	adds	r0, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 80027aa:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 80027ac:	6160      	str	r0, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 80027ae:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80027b0:	f89b 3000 	ldrb.w	r3, [fp]
 80027b4:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 80027b6:	6923      	ldr	r3, [r4, #16]
 80027b8:	6962      	ldr	r2, [r4, #20]
 80027ba:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 80027bc:	bf24      	itt	cs
 80027be:	68e3      	ldrcs	r3, [r4, #12]
 80027c0:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 80027c2:	b10f      	cbz	r7, 80027c8 <chOQWriteTimeout+0x48>
      nfy(oqp);
 80027c4:	4620      	mov	r0, r4
 80027c6:	47b8      	blx	r7
 80027c8:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 80027cc:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 80027ce:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 80027d2:	d011      	beq.n	80027f8 <chOQWriteTimeout+0x78>
 80027d4:	f388 8811 	msr	BASEPRI, r8
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80027d8:	46d3      	mov	fp, sl
 80027da:	68a3      	ldr	r3, [r4, #8]
 80027dc:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1df      	bne.n	80027a4 <chOQWriteTimeout+0x24>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 80027e4:	4620      	mov	r0, r4
 80027e6:	9901      	ldr	r1, [sp, #4]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	f001 fc19 	bl	8004020 <chThdEnqueueTimeoutS>
 80027ee:	9b00      	ldr	r3, [sp, #0]
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d0d3      	beq.n	800279c <chOQWriteTimeout+0x1c>
 80027f4:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 80027f8:	4630      	mov	r0, r6
 80027fa:	b003      	add	sp, #12
 80027fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002800 <writet.lto_priv.78>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002800:	3030      	adds	r0, #48	; 0x30
 8002802:	f7ff bfbd 	b.w	8002780 <chOQWriteTimeout>
 8002806:	bf00      	nop
	...

08002810 <write.lto_priv.72>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002810:	3030      	adds	r0, #48	; 0x30
 8002812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002816:	f7ff bfb3 	b.w	8002780 <chOQWriteTimeout>
 800281a:	bf00      	nop
 800281c:	0000      	movs	r0, r0
	...

08002820 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 8002820:	b538      	push	{r3, r4, r5, lr}
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8002822:	6942      	ldr	r2, [r0, #20]
 8002824:	6983      	ldr	r3, [r0, #24]
 8002826:	429a      	cmp	r2, r3
 8002828:	d019      	beq.n	800285e <chOQGetI+0x3e>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 800282a:	6882      	ldr	r2, [r0, #8]
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 800282c:	6905      	ldr	r5, [r0, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800282e:	1c59      	adds	r1, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8002830:	3201      	adds	r2, #1
 8002832:	6082      	str	r2, [r0, #8]
  b = *oqp->q_rdptr++;
 8002834:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 8002836:	42a9      	cmp	r1, r5
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8002838:	781c      	ldrb	r4, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 800283a:	d20d      	bcs.n	8002858 <chOQGetI+0x38>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800283c:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 800283e:	4290      	cmp	r0, r2
 8002840:	d008      	beq.n	8002854 <chOQGetI+0x34>
 8002842:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8002844:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8002846:	2500      	movs	r5, #0
 8002848:	6001      	str	r1, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800284a:	604b      	str	r3, [r1, #4]
  (void) chSchReadyI(tp);
 800284c:	4610      	mov	r0, r2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800284e:	6215      	str	r5, [r2, #32]
  (void) chSchReadyI(tp);
 8002850:	f001 f926 	bl	8003aa0 <chSchReadyI>
    oqp->q_rdptr = oqp->q_buffer;
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);

  return (msg_t)b;
 8002854:	4620      	mov	r0, r4
 8002856:	bd38      	pop	{r3, r4, r5, pc}
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
    oqp->q_rdptr = oqp->q_buffer;
 8002858:	68c3      	ldr	r3, [r0, #12]
 800285a:	6183      	str	r3, [r0, #24]
 800285c:	e7ee      	b.n	800283c <chOQGetI+0x1c>
 800285e:	6882      	ldr	r2, [r0, #8]
 8002860:	2a00      	cmp	r2, #0
 8002862:	d0e2      	beq.n	800282a <chOQGetI+0xa>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 8002864:	f06f 0002 	mvn.w	r0, #2
 8002868:	bd38      	pop	{r3, r4, r5, pc}
 800286a:	bf00      	nop
 800286c:	0000      	movs	r0, r0
	...

08002870 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 8002870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8002874:	4f4b      	ldr	r7, [pc, #300]	; (80029a4 <VectorDC+0x134>)
 8002876:	6f7d      	ldr	r5, [r7, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8002878:	f8d5 800c 	ldr.w	r8, [r5, #12]
  uint16_t sr = u->SR;
 800287c:	682b      	ldr	r3, [r5, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800287e:	05de      	lsls	r6, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8002880:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8002882:	d45e      	bmi.n	8002942 <VectorDC+0xd2>
 8002884:	2320      	movs	r3, #32
 8002886:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800288a:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800288e:	d108      	bne.n	80028a2 <VectorDC+0x32>
 8002890:	e031      	b.n	80028f6 <VectorDC+0x86>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8002892:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8002894:	686e      	ldr	r6, [r5, #4]
    if (sr & USART_SR_RXNE)
 8002896:	d41d      	bmi.n	80028d4 <VectorDC+0x64>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8002898:	682c      	ldr	r4, [r5, #0]
 800289a:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800289c:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80028a0:	d029      	beq.n	80028f6 <VectorDC+0x86>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80028a2:	0720      	lsls	r0, r4, #28
 80028a4:	d0f5      	beq.n	8002892 <VectorDC+0x22>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 80028a6:	f014 0f08 	tst.w	r4, #8
 80028aa:	bf0c      	ite	eq
 80028ac:	2100      	moveq	r1, #0
 80028ae:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 80028b0:	07e2      	lsls	r2, r4, #31
    sts |= SD_PARITY_ERROR;
 80028b2:	bf48      	it	mi
 80028b4:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 80028b8:	07a3      	lsls	r3, r4, #30
    sts |= SD_FRAMING_ERROR;
 80028ba:	bf48      	it	mi
 80028bc:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 80028c0:	0766      	lsls	r6, r4, #29
    sts |= SD_NOISE_ERROR;
 80028c2:	bf48      	it	mi
 80028c4:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80028c8:	4837      	ldr	r0, [pc, #220]	; (80029a8 <VectorDC+0x138>)
 80028ca:	f001 f969 	bl	8003ba0 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 80028ce:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 80028d0:	686e      	ldr	r6, [r5, #4]
    if (sr & USART_SR_RXNE)
 80028d2:	d5e1      	bpl.n	8002898 <VectorDC+0x28>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80028d4:	697b      	ldr	r3, [r7, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80028d6:	b37b      	cbz	r3, 8002938 <VectorDC+0xc8>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 80028d8:	b2f1      	uxtb	r1, r6
 80028da:	4834      	ldr	r0, [pc, #208]	; (80029ac <VectorDC+0x13c>)
 80028dc:	f001 f8f8 	bl	8003ad0 <chIQPutI>
 80028e0:	2800      	cmp	r0, #0
 80028e2:	dad9      	bge.n	8002898 <VectorDC+0x28>
 80028e4:	4830      	ldr	r0, [pc, #192]	; (80029a8 <VectorDC+0x138>)
 80028e6:	2180      	movs	r1, #128	; 0x80
 80028e8:	f001 f95a 	bl	8003ba0 <chEvtBroadcastFlagsI>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 80028ec:	682c      	ldr	r4, [r5, #0]
 80028ee:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80028f0:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80028f4:	d1d5      	bne.n	80028a2 <VectorDC+0x32>
 80028f6:	2300      	movs	r3, #0
 80028f8:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80028fc:	f018 0f80 	tst.w	r8, #128	; 0x80
 8002900:	d001      	beq.n	8002906 <VectorDC+0x96>
 8002902:	0622      	lsls	r2, r4, #24
 8002904:	d42c      	bmi.n	8002960 <VectorDC+0xf0>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 8002906:	0663      	lsls	r3, r4, #25
 8002908:	d512      	bpl.n	8002930 <VectorDC+0xc0>
 800290a:	2320      	movs	r3, #32
 800290c:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8002910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002914:	4823      	ldr	r0, [pc, #140]	; (80029a4 <VectorDC+0x134>)
 8002916:	429a      	cmp	r2, r3
 8002918:	d02f      	beq.n	800297a <VectorDC+0x10a>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800291a:	f64f 73bf 	movw	r3, #65471	; 0xffbf
    u->SR = ~USART_SR_TC;
 800291e:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8002922:	ea08 0303 	and.w	r3, r8, r3
 8002926:	60eb      	str	r3, [r5, #12]
 8002928:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 800292a:	602a      	str	r2, [r5, #0]
 800292c:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
}
 8002930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
 8002934:	f7ff ba24 	b.w	8001d80 <_port_irq_epilogue>
 8002938:	481b      	ldr	r0, [pc, #108]	; (80029a8 <VectorDC+0x138>)
 800293a:	2104      	movs	r1, #4
 800293c:	f001 f930 	bl	8003ba0 <chEvtBroadcastFlagsI>
 8002940:	e7ca      	b.n	80028d8 <VectorDC+0x68>
 8002942:	2320      	movs	r3, #32
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800294c:	1d38      	adds	r0, r7, #4
 800294e:	f001 f927 	bl	8003ba0 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 8002952:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8002956:	602b      	str	r3, [r5, #0]
 8002958:	2300      	movs	r3, #0
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	e791      	b.n	8002884 <VectorDC+0x14>
 8002960:	2320      	movs	r3, #32
 8002962:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 8002966:	4812      	ldr	r0, [pc, #72]	; (80029b0 <VectorDC+0x140>)
 8002968:	f7ff ff5a 	bl	8002820 <chOQGetI>
    if (b < Q_OK) {
 800296c:	2800      	cmp	r0, #0
 800296e:	db0c      	blt.n	800298a <VectorDC+0x11a>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 8002970:	6068      	str	r0, [r5, #4]
 8002972:	2300      	movs	r3, #0
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	e7c5      	b.n	8002906 <VectorDC+0x96>
 800297a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0cc      	beq.n	800291a <VectorDC+0xaa>
 8002980:	3004      	adds	r0, #4
 8002982:	2110      	movs	r1, #16
 8002984:	f001 f90c 	bl	8003ba0 <chEvtBroadcastFlagsI>
 8002988:	e7c7      	b.n	800291a <VectorDC+0xaa>
 800298a:	4807      	ldr	r0, [pc, #28]	; (80029a8 <VectorDC+0x138>)
 800298c:	2108      	movs	r1, #8
 800298e:	f001 f907 	bl	8003ba0 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8002992:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8002996:	ea08 0303 	and.w	r3, r8, r3
 800299a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800299e:	60eb      	str	r3, [r5, #12]
 80029a0:	e7e7      	b.n	8002972 <VectorDC+0x102>
 80029a2:	bf00      	nop
 80029a4:	20001114 	.word	0x20001114
 80029a8:	20001118 	.word	0x20001118
 80029ac:	20001120 	.word	0x20001120
 80029b0:	20001144 	.word	0x20001144
	...

080029c0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	4604      	mov	r4, r0
 80029c4:	460f      	mov	r7, r1
 80029c6:	4616      	mov	r6, r2
 80029c8:	2320      	movs	r3, #32
 80029ca:	f383 8811 	msr	BASEPRI, r3
 80029ce:	e005      	b.n	80029dc <chOQPutTimeout+0x1c>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80029d0:	4620      	mov	r0, r4
 80029d2:	4631      	mov	r1, r6
 80029d4:	f001 fb24 	bl	8004020 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80029d8:	2800      	cmp	r0, #0
 80029da:	db17      	blt.n	8002a0c <chOQPutTimeout+0x4c>
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 80029dc:	68a5      	ldr	r5, [r4, #8]
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 80029de:	2d00      	cmp	r5, #0
 80029e0:	d0f6      	beq.n	80029d0 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 80029e2:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80029e4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80029e6:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80029e8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80029ea:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80029ec:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80029ee:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80029f0:	6923      	ldr	r3, [r4, #16]
 80029f2:	6962      	ldr	r2, [r4, #20]
 80029f4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80029f6:	bf24      	itt	cs
 80029f8:	68e3      	ldrcs	r3, [r4, #12]
 80029fa:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 80029fc:	69e3      	ldr	r3, [r4, #28]
 80029fe:	b10b      	cbz	r3, 8002a04 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8002a00:	4620      	mov	r0, r4
 8002a02:	4798      	blx	r3
 8002a04:	2000      	movs	r0, #0
 8002a06:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 8002a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a0c:	f385 8811 	msr	BASEPRI, r5
 8002a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a12:	bf00      	nop
	...

08002a20 <putt.lto_priv.76>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002a20:	3030      	adds	r0, #48	; 0x30
 8002a22:	f7ff bfcd 	b.w	80029c0 <chOQPutTimeout>
 8002a26:	bf00      	nop
	...

08002a30 <put.lto_priv.74>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002a30:	3030      	adds	r0, #48	; 0x30
 8002a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a36:	f7ff bfc3 	b.w	80029c0 <chOQPutTimeout>
 8002a3a:	bf00      	nop
 8002a3c:	0000      	movs	r0, r0
	...

08002a40 <mbox1_setup.lto_priv.107>:
 * Messages are posted/fetched from a mailbox in carefully designed sequences
 * in order to stimulate all the possible code paths inside the mailbox.<br>
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {
 8002a40:	b470      	push	{r4, r5, r6}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <mbox1_setup.lto_priv.107+0x30>)
 8002a44:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <mbox1_setup.lto_priv.107+0x34>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8002a46:	2505      	movs	r5, #5
  mbp->mb_rdptr = buf;
  mbp->mb_wrptr = buf;
  mbp->mb_top = &buf[n];
 8002a48:	f102 0614 	add.w	r6, r2, #20
 8002a4c:	2400      	movs	r4, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002a4e:	f103 001c 	add.w	r0, r3, #28
 8002a52:	f103 0110 	add.w	r1, r3, #16
 8002a56:	605e      	str	r6, [r3, #4]
 8002a58:	625d      	str	r5, [r3, #36]	; 0x24
 8002a5a:	619c      	str	r4, [r3, #24]
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 8002a5c:	601a      	str	r2, [r3, #0]
  mbp->mb_rdptr = buf;
 8002a5e:	60da      	str	r2, [r3, #12]
  mbp->mb_wrptr = buf;
 8002a60:	609a      	str	r2, [r3, #8]
 8002a62:	61d8      	str	r0, [r3, #28]
  tqp->p_prev = (thread_t *)tqp;
 8002a64:	6218      	str	r0, [r3, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002a66:	6119      	str	r1, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8002a68:	6159      	str	r1, [r3, #20]

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}
 8002a6a:	bc70      	pop	{r4, r5, r6}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20000800 	.word	0x20000800
 8002a74:	20000928 	.word	0x20000928
	...

08002a80 <mtx8_setup.lto_priv.104>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002a80:	4a06      	ldr	r2, [pc, #24]	; (8002a9c <mtx8_setup.lto_priv.104+0x1c>)
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <mtx8_setup.lto_priv.104+0x20>)
 8002a84:	4907      	ldr	r1, [pc, #28]	; (8002aa4 <mtx8_setup.lto_priv.104+0x24>)
 8002a86:	2000      	movs	r0, #0
 8002a88:	6009      	str	r1, [r1, #0]
  tqp->p_prev = (thread_t *)tqp;
 8002a8a:	6049      	str	r1, [r1, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002a8c:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8002a8e:	6052      	str	r2, [r2, #4]
 8002a90:	6090      	str	r0, [r2, #8]
 8002a92:	6098      	str	r0, [r3, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002a94:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8002a96:	605b      	str	r3, [r3, #4]
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	2000083c 	.word	0x2000083c
 8002aa0:	2000084c 	.word	0x2000084c
 8002aa4:	20000828 	.word	0x20000828
	...

08002ab0 <mtx7_setup.lto_priv.102>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002ab0:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <mtx7_setup.lto_priv.102+0x14>)
 8002ab2:	4a05      	ldr	r2, [pc, #20]	; (8002ac8 <mtx7_setup.lto_priv.102+0x18>)
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8002ab8:	6052      	str	r2, [r2, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002aba:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8002abc:	605b      	str	r3, [r3, #4]
 8002abe:	6099      	str	r1, [r3, #8]
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	2000083c 	.word	0x2000083c
 8002ac8:	20000828 	.word	0x20000828
 8002acc:	00000000 	.word	0x00000000

08002ad0 <mtx6_setup.lto_priv.100>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <mtx6_setup.lto_priv.100+0x14>)
 8002ad2:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <mtx6_setup.lto_priv.100+0x18>)
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8002ad8:	6052      	str	r2, [r2, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002ada:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8002adc:	605b      	str	r3, [r3, #4]
 8002ade:	6099      	str	r1, [r3, #8]
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	2000083c 	.word	0x2000083c
 8002ae8:	20000828 	.word	0x20000828
 8002aec:	00000000 	.word	0x00000000

08002af0 <mbox1_execute.lto_priv.108>:

static void mbox1_execute(void) {
 8002af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002af4:	2320      	movs	r3, #32
 8002af6:	b082      	sub	sp, #8
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	4d95      	ldr	r5, [pc, #596]	; (8002d54 <mbox1_execute.lto_priv.108+0x264>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8002afe:	2001      	movs	r0, #1
 8002b00:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002b02:	f1a1 0105 	sub.w	r1, r1, #5
 8002b06:	fab1 f181 	clz	r1, r1
 8002b0a:	0949      	lsrs	r1, r1, #5
 8002b0c:	f7ff fc90 	bl	8002430 <_test_assert>
 8002b10:	2800      	cmp	r0, #0
 8002b12:	f040 8089 	bne.w	8002c28 <mbox1_execute.lto_priv.108+0x138>
 8002b16:	f380 8811 	msr	BASEPRI, r0
 8002b1a:	2442      	movs	r4, #66	; 0x42

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b22:	f7fe fca5 	bl	8001470 <chMBPost.constprop.26>
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 8002b26:	fab0 f180 	clz	r1, r0
 8002b2a:	2002      	movs	r0, #2
 8002b2c:	0949      	lsrs	r1, r1, #5
 8002b2e:	f7ff fc7f 	bl	8002430 <_test_assert>
 8002b32:	3401      	adds	r4, #1
 8002b34:	b970      	cbnz	r0, 8002b54 <mbox1_execute.lto_priv.108+0x64>
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
 8002b36:	2c46      	cmp	r4, #70	; 0x46
 8002b38:	d1f0      	bne.n	8002b1c <mbox1_execute.lto_priv.108+0x2c>
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
 8002b3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b3e:	2041      	movs	r0, #65	; 0x41
 8002b40:	f7fe fcde 	bl	8001500 <chMBPostAhead.constprop.24>
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 8002b44:	fab0 f180 	clz	r1, r0
 8002b48:	2003      	movs	r0, #3
 8002b4a:	0949      	lsrs	r1, r1, #5
 8002b4c:	f7ff fc70 	bl	8002430 <_test_assert>
 8002b50:	2800      	cmp	r0, #0
 8002b52:	d06f      	beq.n	8002c34 <mbox1_execute.lto_priv.108+0x144>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 8002b54:	b002      	add	sp, #8
 8002b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b5a:	f386 8811 	msr	BASEPRI, r6
 8002b5e:	f387 8811 	msr	BASEPRI, r7
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 8002b62:	69a1      	ldr	r1, [r4, #24]
 8002b64:	202a      	movs	r0, #42	; 0x2a
 8002b66:	fab1 f181 	clz	r1, r1
 8002b6a:	0949      	lsrs	r1, r1, #5
 8002b6c:	f7ff fc60 	bl	8002430 <_test_assert>
 8002b70:	2800      	cmp	r0, #0
 8002b72:	f040 8299 	bne.w	80030a8 <mbox1_execute.lto_priv.108+0x5b8>
 8002b76:	f386 8811 	msr	BASEPRI, r6
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8002b7a:	68e1      	ldr	r1, [r4, #12]
 8002b7c:	68a3      	ldr	r3, [r4, #8]
 8002b7e:	202b      	movs	r0, #43	; 0x2b
 8002b80:	ebc3 0e01 	rsb	lr, r3, r1
 8002b84:	f1de 0100 	rsbs	r1, lr, #0
 8002b88:	eb41 010e 	adc.w	r1, r1, lr
 8002b8c:	f7ff fc50 	bl	8002430 <_test_assert>
 8002b90:	2800      	cmp	r0, #0
 8002b92:	d1df      	bne.n	8002b54 <mbox1_execute.lto_priv.108+0x64>
 8002b94:	f387 8811 	msr	BASEPRI, r7
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 8002b98:	6823      	ldr	r3, [r4, #0]
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 8002b9a:	6862      	ldr	r2, [r4, #4]
 8002b9c:	f104 001c 	add.w	r0, r4, #28
 8002ba0:	1ad1      	subs	r1, r2, r3
 8002ba2:	1089      	asrs	r1, r1, #2
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 8002ba4:	60a3      	str	r3, [r4, #8]
  mbp->mb_rdptr = mbp->mb_buffer;
 8002ba6:	60e3      	str	r3, [r4, #12]
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 8002ba8:	f001 f932 	bl	8003e10 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, (cnt_t)0);
 8002bac:	f104 0010 	add.w	r0, r4, #16
 8002bb0:	4631      	mov	r1, r6
 8002bb2:	f001 f92d 	bl	8003e10 <chSemResetI>
 */
void chMBReset(mailbox_t *mbp) {

  chSysLock();
  chMBResetI(mbp);
  chSchRescheduleS();
 8002bb6:	f000 fe3b 	bl	8003830 <chSchRescheduleS>
 8002bba:	f386 8811 	msr	BASEPRI, r6
 8002bbe:	f387 8811 	msr	BASEPRI, r7
  chMBReset(&mb1);

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8002bc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002bc4:	202c      	movs	r0, #44	; 0x2c
 8002bc6:	1f4d      	subs	r5, r1, #5
 8002bc8:	4269      	negs	r1, r5
 8002bca:	4169      	adcs	r1, r5
 8002bcc:	f7ff fc30 	bl	8002430 <_test_assert>
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	f040 8269 	bne.w	80030a8 <mbox1_execute.lto_priv.108+0x5b8>
 8002bd6:	f386 8811 	msr	BASEPRI, r6
 8002bda:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 8002bde:	69a1      	ldr	r1, [r4, #24]
 8002be0:	202d      	movs	r0, #45	; 0x2d
 8002be2:	fab1 f181 	clz	r1, r1
 8002be6:	0949      	lsrs	r1, r1, #5
 8002be8:	f7ff fc22 	bl	8002430 <_test_assert>
 8002bec:	2800      	cmp	r0, #0
 8002bee:	f040 825b 	bne.w	80030a8 <mbox1_execute.lto_priv.108+0x5b8>
 8002bf2:	f386 8811 	msr	BASEPRI, r6
 8002bf6:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 8002bfa:	6821      	ldr	r1, [r4, #0]
 8002bfc:	68a3      	ldr	r3, [r4, #8]
 8002bfe:	202e      	movs	r0, #46	; 0x2e
 8002c00:	1aca      	subs	r2, r1, r3
 8002c02:	4251      	negs	r1, r2
 8002c04:	4151      	adcs	r1, r2
 8002c06:	f7ff fc13 	bl	8002430 <_test_assert>
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	f040 824c 	bne.w	80030a8 <mbox1_execute.lto_priv.108+0x5b8>
 8002c10:	f386 8811 	msr	BASEPRI, r6
 8002c14:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8002c18:	6821      	ldr	r1, [r4, #0]
 8002c1a:	68e3      	ldr	r3, [r4, #12]
 8002c1c:	202f      	movs	r0, #47	; 0x2f
 8002c1e:	1acb      	subs	r3, r1, r3
 8002c20:	4259      	negs	r1, r3
 8002c22:	4159      	adcs	r1, r3
 8002c24:	f7ff fc04 	bl	8002430 <_test_assert>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f383 8811 	msr	BASEPRI, r3
}
 8002c2e:	b002      	add	sp, #8
 8002c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 8002c34:	2101      	movs	r1, #1
 8002c36:	2058      	movs	r0, #88	; 0x58
 8002c38:	f7fe fc1a 	bl	8001470 <chMBPost.constprop.26>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8002c3c:	f1a0 31ff 	sub.w	r1, r0, #4294967295	; 0xffffffff
 8002c40:	fab1 f181 	clz	r1, r1
 8002c44:	2004      	movs	r0, #4
 8002c46:	0949      	lsrs	r1, r1, #5
 8002c48:	f7ff fbf2 	bl	8002430 <_test_assert>
 8002c4c:	4604      	mov	r4, r0
 8002c4e:	2800      	cmp	r0, #0
 8002c50:	d180      	bne.n	8002b54 <mbox1_execute.lto_priv.108+0x64>
 8002c52:	2620      	movs	r6, #32
 8002c54:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 8002c58:	2058      	movs	r0, #88	; 0x58
 8002c5a:	f7fe fc31 	bl	80014c0 <chMBPostI.constprop.25>
 8002c5e:	4601      	mov	r1, r0
 8002c60:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8002c64:	f1a1 31ff 	sub.w	r1, r1, #4294967295	; 0xffffffff
 8002c68:	fab1 f181 	clz	r1, r1
 8002c6c:	2005      	movs	r0, #5
 8002c6e:	0949      	lsrs	r1, r1, #5
 8002c70:	f7ff fbde 	bl	8002430 <_test_assert>
 8002c74:	2800      	cmp	r0, #0
 8002c76:	f47f af6d 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
  msg1 = chMBPostAhead(&mb1, 'X', 1);
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	2058      	movs	r0, #88	; 0x58
 8002c7e:	f7fe fc3f 	bl	8001500 <chMBPostAhead.constprop.24>
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8002c82:	f1a0 31ff 	sub.w	r1, r0, #4294967295	; 0xffffffff
 8002c86:	fab1 f181 	clz	r1, r1
 8002c8a:	2006      	movs	r0, #6
 8002c8c:	0949      	lsrs	r1, r1, #5
 8002c8e:	f7ff fbcf 	bl	8002430 <_test_assert>
 8002c92:	4604      	mov	r4, r0
 8002c94:	2800      	cmp	r0, #0
 8002c96:	f47f af5d 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
 8002c9a:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 8002c9e:	2058      	movs	r0, #88	; 0x58
 8002ca0:	f7fe fc56 	bl	8001550 <chMBPostAheadI.constprop.23>
 8002ca4:	4601      	mov	r1, r0
 8002ca6:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8002caa:	f1a1 31ff 	sub.w	r1, r1, #4294967295	; 0xffffffff
 8002cae:	fab1 f181 	clz	r1, r1
 8002cb2:	2007      	movs	r0, #7
 8002cb4:	0949      	lsrs	r1, r1, #5
 8002cb6:	f7ff fbbb 	bl	8002430 <_test_assert>
 8002cba:	4680      	mov	r8, r0
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	f47f af49 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
 8002cc2:	f386 8811 	msr	BASEPRI, r6

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 8002cc6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002cc8:	2008      	movs	r0, #8
 8002cca:	fab1 f181 	clz	r1, r1
 8002cce:	0949      	lsrs	r1, r1, #5
 8002cd0:	f7ff fbae 	bl	8002430 <_test_assert>
 8002cd4:	4c1f      	ldr	r4, [pc, #124]	; (8002d54 <mbox1_execute.lto_priv.108+0x264>)
 8002cd6:	4607      	mov	r7, r0
 8002cd8:	b110      	cbz	r0, 8002ce0 <mbox1_execute.lto_priv.108+0x1f0>
 8002cda:	f388 8811 	msr	BASEPRI, r8
 8002cde:	e739      	b.n	8002b54 <mbox1_execute.lto_priv.108+0x64>
 8002ce0:	f380 8811 	msr	BASEPRI, r0
 8002ce4:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8002ce8:	69a1      	ldr	r1, [r4, #24]
 8002cea:	2009      	movs	r0, #9
 8002cec:	f1a1 0e05 	sub.w	lr, r1, #5
 8002cf0:	f1de 0100 	rsbs	r1, lr, #0
 8002cf4:	eb41 010e 	adc.w	r1, r1, lr
 8002cf8:	f7ff fb9a 	bl	8002430 <_test_assert>
 8002cfc:	b110      	cbz	r0, 8002d04 <mbox1_execute.lto_priv.108+0x214>
 8002cfe:	f387 8811 	msr	BASEPRI, r7
 8002d02:	e727      	b.n	8002b54 <mbox1_execute.lto_priv.108+0x64>
 8002d04:	f380 8811 	msr	BASEPRI, r0
 8002d08:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8002d0c:	68e1      	ldr	r1, [r4, #12]
 8002d0e:	68a3      	ldr	r3, [r4, #8]
 8002d10:	200a      	movs	r0, #10
 8002d12:	1acf      	subs	r7, r1, r3
 8002d14:	4279      	negs	r1, r7
 8002d16:	4179      	adcs	r1, r7
 8002d18:	f7ff fb8a 	bl	8002430 <_test_assert>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	d183      	bne.n	8002c2a <mbox1_execute.lto_priv.108+0x13a>
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	2405      	movs	r4, #5
 8002d28:	e005      	b.n	8002d36 <mbox1_execute.lto_priv.108+0x246>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 8002d2a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002d2e:	f7ff fb97 	bl	8002460 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 8002d32:	3c01      	subs	r4, #1
 8002d34:	d010      	beq.n	8002d58 <mbox1_execute.lto_priv.108+0x268>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8002d36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d3a:	a801      	add	r0, sp, #4
 8002d3c:	f7fe fc28 	bl	8001590 <chMBFetch.constprop.22>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 8002d40:	fab0 f180 	clz	r1, r0
 8002d44:	200b      	movs	r0, #11
 8002d46:	0949      	lsrs	r1, r1, #5
 8002d48:	f7ff fb72 	bl	8002430 <_test_assert>
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	d0ec      	beq.n	8002d2a <mbox1_execute.lto_priv.108+0x23a>
 8002d50:	e700      	b.n	8002b54 <mbox1_execute.lto_priv.108+0x64>
 8002d52:	bf00      	nop
 8002d54:	20000800 	.word	0x20000800
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 8002d58:	200c      	movs	r0, #12
 8002d5a:	49d5      	ldr	r1, [pc, #852]	; (80030b0 <mbox1_execute.lto_priv.108+0x5c0>)
 8002d5c:	f7ff fb40 	bl	80023e0 <_test_assert_sequence>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	f47f aef7 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8002d66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d6a:	2047      	movs	r0, #71	; 0x47
 8002d6c:	f7fe fb80 	bl	8001470 <chMBPost.constprop.26>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 8002d70:	fab0 f180 	clz	r1, r0
 8002d74:	200d      	movs	r0, #13
 8002d76:	0949      	lsrs	r1, r1, #5
 8002d78:	f7ff fb5a 	bl	8002430 <_test_assert>
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	f47f aee9 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8002d82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d86:	a801      	add	r0, sp, #4
 8002d88:	f7fe fc02 	bl	8001590 <chMBFetch.constprop.22>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 8002d8c:	fab0 f180 	clz	r1, r0
 8002d90:	200e      	movs	r0, #14
 8002d92:	0949      	lsrs	r1, r1, #5
 8002d94:	f7ff fb4c 	bl	8002430 <_test_assert>
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	f47f aedb 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 8002d9e:	6829      	ldr	r1, [r5, #0]
 8002da0:	68ab      	ldr	r3, [r5, #8]
 8002da2:	200f      	movs	r0, #15
 8002da4:	1ace      	subs	r6, r1, r3
 8002da6:	4271      	negs	r1, r6
 8002da8:	4171      	adcs	r1, r6
 8002daa:	4ec2      	ldr	r6, [pc, #776]	; (80030b4 <mbox1_execute.lto_priv.108+0x5c4>)
 8002dac:	f7ff fb40 	bl	8002430 <_test_assert>
 8002db0:	2800      	cmp	r0, #0
 8002db2:	f47f aecf 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8002db6:	6831      	ldr	r1, [r6, #0]
 8002db8:	68f3      	ldr	r3, [r6, #12]
 8002dba:	2010      	movs	r0, #16
 8002dbc:	1aca      	subs	r2, r1, r3
 8002dbe:	4251      	negs	r1, r2
 8002dc0:	4151      	adcs	r1, r2
 8002dc2:	f7ff fb35 	bl	8002430 <_test_assert>
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	f47f aec4 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 8002dcc:	2101      	movs	r1, #1
 8002dce:	a801      	add	r0, sp, #4
 8002dd0:	f7fe fbde 	bl	8001590 <chMBFetch.constprop.22>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8002dd4:	1c43      	adds	r3, r0, #1
 8002dd6:	4259      	negs	r1, r3
 8002dd8:	4159      	adcs	r1, r3
 8002dda:	2011      	movs	r0, #17
 8002ddc:	f7ff fb28 	bl	8002430 <_test_assert>
 8002de0:	2800      	cmp	r0, #0
 8002de2:	f47f aeb7 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
 8002de6:	2720      	movs	r7, #32
 8002de8:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 8002dec:	a801      	add	r0, sp, #4
 8002dee:	f7fe fbf7 	bl	80015e0 <chMBFetchI.constprop.21>
 8002df2:	4601      	mov	r1, r0
 8002df4:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8002df8:	f101 0801 	add.w	r8, r1, #1
 8002dfc:	f1d8 0100 	rsbs	r1, r8, #0
 8002e00:	eb41 0108 	adc.w	r1, r1, r8
 8002e04:	2012      	movs	r0, #18
 8002e06:	f7ff fb13 	bl	8002430 <_test_assert>
 8002e0a:	2800      	cmp	r0, #0
 8002e0c:	f47f aea2 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
 8002e10:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8002e14:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8002e16:	2013      	movs	r0, #19
 8002e18:	f1a1 0c05 	sub.w	ip, r1, #5
 8002e1c:	f1dc 0100 	rsbs	r1, ip, #0
 8002e20:	eb41 010c 	adc.w	r1, r1, ip
 8002e24:	f7ff fb04 	bl	8002430 <_test_assert>
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	f47f aefd 	bne.w	8002c28 <mbox1_execute.lto_priv.108+0x138>
 8002e2e:	f04f 0800 	mov.w	r8, #0
 8002e32:	f388 8811 	msr	BASEPRI, r8
 8002e36:	2420      	movs	r4, #32
 8002e38:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 8002e3c:	69a9      	ldr	r1, [r5, #24]
 8002e3e:	2014      	movs	r0, #20
 8002e40:	fab1 f181 	clz	r1, r1
 8002e44:	0949      	lsrs	r1, r1, #5
 8002e46:	f7ff faf3 	bl	8002430 <_test_assert>
 8002e4a:	4e9a      	ldr	r6, [pc, #616]	; (80030b4 <mbox1_execute.lto_priv.108+0x5c4>)
 8002e4c:	4607      	mov	r7, r0
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	f47f af43 	bne.w	8002cda <mbox1_execute.lto_priv.108+0x1ea>
 8002e54:	f380 8811 	msr	BASEPRI, r0
 8002e58:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8002e5c:	68f1      	ldr	r1, [r6, #12]
 8002e5e:	68b3      	ldr	r3, [r6, #8]
 8002e60:	2015      	movs	r0, #21
 8002e62:	ebc3 0e01 	rsb	lr, r3, r1
 8002e66:	f1de 0100 	rsbs	r1, lr, #0
 8002e6a:	eb41 010e 	adc.w	r1, r1, lr
 8002e6e:	f7ff fadf 	bl	8002430 <_test_assert>
 8002e72:	2800      	cmp	r0, #0
 8002e74:	f47f af43 	bne.w	8002cfe <mbox1_execute.lto_priv.108+0x20e>
 8002e78:	f380 8811 	msr	BASEPRI, r0
 8002e7c:	f384 8811 	msr	BASEPRI, r4

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 8002e80:	2041      	movs	r0, #65	; 0x41
 8002e82:	f7fe fb1d 	bl	80014c0 <chMBPostI.constprop.25>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 8002e86:	fab0 f180 	clz	r1, r0
 8002e8a:	2016      	movs	r0, #22
 8002e8c:	0949      	lsrs	r1, r1, #5
 8002e8e:	f7ff facf 	bl	8002430 <_test_assert>
 8002e92:	2800      	cmp	r0, #0
 8002e94:	f47f ae5e 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
  msg1 = chMBPostI(&mb1, 'B');
 8002e98:	2042      	movs	r0, #66	; 0x42
 8002e9a:	f7fe fb11 	bl	80014c0 <chMBPostI.constprop.25>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 8002e9e:	fab0 f180 	clz	r1, r0
 8002ea2:	2017      	movs	r0, #23
 8002ea4:	0949      	lsrs	r1, r1, #5
 8002ea6:	f7ff fac3 	bl	8002430 <_test_assert>
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	f47f ae52 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
  msg1 = chMBPostI(&mb1, 'C');
 8002eb0:	2043      	movs	r0, #67	; 0x43
 8002eb2:	f7fe fb05 	bl	80014c0 <chMBPostI.constprop.25>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 8002eb6:	fab0 f180 	clz	r1, r0
 8002eba:	2018      	movs	r0, #24
 8002ebc:	0949      	lsrs	r1, r1, #5
 8002ebe:	f7ff fab7 	bl	8002430 <_test_assert>
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	f47f ae46 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
  msg1 = chMBPostI(&mb1, 'D');
 8002ec8:	2044      	movs	r0, #68	; 0x44
 8002eca:	f7fe faf9 	bl	80014c0 <chMBPostI.constprop.25>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 8002ece:	fab0 f180 	clz	r1, r0
 8002ed2:	2019      	movs	r0, #25
 8002ed4:	0949      	lsrs	r1, r1, #5
 8002ed6:	f7ff faab 	bl	8002430 <_test_assert>
 8002eda:	4607      	mov	r7, r0
 8002edc:	2800      	cmp	r0, #0
 8002ede:	f47f ae39 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
  msg1 = chMBPostI(&mb1, 'E');
 8002ee2:	2045      	movs	r0, #69	; 0x45
 8002ee4:	f7fe faec 	bl	80014c0 <chMBPostI.constprop.25>
 8002ee8:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 8002eec:	fab0 f180 	clz	r1, r0
 8002ef0:	201a      	movs	r0, #26
 8002ef2:	0949      	lsrs	r1, r1, #5
 8002ef4:	f7ff fa9c 	bl	8002430 <_test_assert>
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	f47f ae2b 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8002efe:	68f1      	ldr	r1, [r6, #12]
 8002f00:	68b3      	ldr	r3, [r6, #8]
 8002f02:	201b      	movs	r0, #27
 8002f04:	1ace      	subs	r6, r1, r3
 8002f06:	4271      	negs	r1, r6
 8002f08:	4171      	adcs	r1, r6
 8002f0a:	f7ff fa91 	bl	8002430 <_test_assert>
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	f47f ae20 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
 8002f14:	4680      	mov	r8, r0
 8002f16:	4626      	mov	r6, r4
 8002f18:	2405      	movs	r4, #5
 8002f1a:	2720      	movs	r7, #32
 8002f1c:	f386 8811 	msr	BASEPRI, r6
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8002f20:	a801      	add	r0, sp, #4
 8002f22:	f7fe fb5d 	bl	80015e0 <chMBFetchI.constprop.21>
 8002f26:	f388 8811 	msr	BASEPRI, r8
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 8002f2a:	fab0 f180 	clz	r1, r0
 8002f2e:	201c      	movs	r0, #28
 8002f30:	0949      	lsrs	r1, r1, #5
 8002f32:	f7ff fa7d 	bl	8002430 <_test_assert>
 8002f36:	2800      	cmp	r0, #0
 8002f38:	f47f ae0c 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
    test_emit_token(msg2);
 8002f3c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002f40:	f7ff fa8e 	bl	8002460 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8002f44:	3c01      	subs	r4, #1
 8002f46:	d1e8      	bne.n	8002f1a <mbox1_execute.lto_priv.108+0x42a>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 8002f48:	201d      	movs	r0, #29
 8002f4a:	4959      	ldr	r1, [pc, #356]	; (80030b0 <mbox1_execute.lto_priv.108+0x5c0>)
 8002f4c:	f7ff fa48 	bl	80023e0 <_test_assert_sequence>
 8002f50:	2800      	cmp	r0, #0
 8002f52:	f47f adff 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
 8002f56:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8002f5a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002f5c:	201e      	movs	r0, #30
 8002f5e:	1f4a      	subs	r2, r1, #5
 8002f60:	4251      	negs	r1, r2
 8002f62:	4151      	adcs	r1, r2
 8002f64:	4e53      	ldr	r6, [pc, #332]	; (80030b4 <mbox1_execute.lto_priv.108+0x5c4>)
 8002f66:	f7ff fa63 	bl	8002430 <_test_assert>
 8002f6a:	b110      	cbz	r0, 8002f72 <mbox1_execute.lto_priv.108+0x482>
 8002f6c:	f384 8811 	msr	BASEPRI, r4
 8002f70:	e5f0      	b.n	8002b54 <mbox1_execute.lto_priv.108+0x64>
 8002f72:	f384 8811 	msr	BASEPRI, r4
 8002f76:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 8002f7a:	69b1      	ldr	r1, [r6, #24]
 8002f7c:	201f      	movs	r0, #31
 8002f7e:	fab1 f181 	clz	r1, r1
 8002f82:	0949      	lsrs	r1, r1, #5
 8002f84:	f7ff fa54 	bl	8002430 <_test_assert>
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	d1ef      	bne.n	8002f6c <mbox1_execute.lto_priv.108+0x47c>
 8002f8c:	f384 8811 	msr	BASEPRI, r4
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8002f90:	68f1      	ldr	r1, [r6, #12]
 8002f92:	68b3      	ldr	r3, [r6, #8]
 8002f94:	4638      	mov	r0, r7
 8002f96:	1acb      	subs	r3, r1, r3
 8002f98:	4259      	negs	r1, r3
 8002f9a:	4159      	adcs	r1, r3
 8002f9c:	f7ff fa48 	bl	8002430 <_test_assert>
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	f47f add7 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
 8002fa6:	f387 8811 	msr	BASEPRI, r7

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 8002faa:	2045      	movs	r0, #69	; 0x45
 8002fac:	f7fe fad0 	bl	8001550 <chMBPostAheadI.constprop.23>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 8002fb0:	fab0 f180 	clz	r1, r0
 8002fb4:	2021      	movs	r0, #33	; 0x21
 8002fb6:	0949      	lsrs	r1, r1, #5
 8002fb8:	f7ff fa3a 	bl	8002430 <_test_assert>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	f47f adc9 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
  msg1 = chMBPostAheadI(&mb1, 'D');
 8002fc2:	2044      	movs	r0, #68	; 0x44
 8002fc4:	f7fe fac4 	bl	8001550 <chMBPostAheadI.constprop.23>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 8002fc8:	fab0 f180 	clz	r1, r0
 8002fcc:	2022      	movs	r0, #34	; 0x22
 8002fce:	0949      	lsrs	r1, r1, #5
 8002fd0:	f7ff fa2e 	bl	8002430 <_test_assert>
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	f47f adbd 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
  msg1 = chMBPostAheadI(&mb1, 'C');
 8002fda:	2043      	movs	r0, #67	; 0x43
 8002fdc:	f7fe fab8 	bl	8001550 <chMBPostAheadI.constprop.23>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 8002fe0:	fab0 f180 	clz	r1, r0
 8002fe4:	2023      	movs	r0, #35	; 0x23
 8002fe6:	0949      	lsrs	r1, r1, #5
 8002fe8:	f7ff fa22 	bl	8002430 <_test_assert>
 8002fec:	2800      	cmp	r0, #0
 8002fee:	f47f adb1 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
  msg1 = chMBPostAheadI(&mb1, 'B');
 8002ff2:	2042      	movs	r0, #66	; 0x42
 8002ff4:	f7fe faac 	bl	8001550 <chMBPostAheadI.constprop.23>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 8002ff8:	fab0 f180 	clz	r1, r0
 8002ffc:	2024      	movs	r0, #36	; 0x24
 8002ffe:	0949      	lsrs	r1, r1, #5
 8003000:	f7ff fa16 	bl	8002430 <_test_assert>
 8003004:	2800      	cmp	r0, #0
 8003006:	f47f ada5 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
  msg1 = chMBPostAheadI(&mb1, 'A');
 800300a:	2041      	movs	r0, #65	; 0x41
 800300c:	f7fe faa0 	bl	8001550 <chMBPostAheadI.constprop.23>
 8003010:	2300      	movs	r3, #0
 8003012:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 8003016:	fab0 f180 	clz	r1, r0
 800301a:	2025      	movs	r0, #37	; 0x25
 800301c:	0949      	lsrs	r1, r1, #5
 800301e:	f7ff fa07 	bl	8002430 <_test_assert>
 8003022:	2800      	cmp	r0, #0
 8003024:	f47f ad96 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8003028:	68e9      	ldr	r1, [r5, #12]
 800302a:	68ab      	ldr	r3, [r5, #8]
 800302c:	2026      	movs	r0, #38	; 0x26
 800302e:	ebc3 0801 	rsb	r8, r3, r1
 8003032:	f1d8 0100 	rsbs	r1, r8, #0
 8003036:	eb41 0108 	adc.w	r1, r1, r8
 800303a:	f7ff f9f9 	bl	8002430 <_test_assert>
 800303e:	2800      	cmp	r0, #0
 8003040:	f47f ad88 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
 8003044:	4604      	mov	r4, r0
 8003046:	2605      	movs	r6, #5
 8003048:	f04f 0820 	mov.w	r8, #32
 800304c:	2720      	movs	r7, #32
 800304e:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8003052:	a801      	add	r0, sp, #4
 8003054:	f7fe fac4 	bl	80015e0 <chMBFetchI.constprop.21>
 8003058:	f384 8811 	msr	BASEPRI, r4
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 800305c:	fab0 f180 	clz	r1, r0
 8003060:	2027      	movs	r0, #39	; 0x27
 8003062:	0949      	lsrs	r1, r1, #5
 8003064:	f7ff f9e4 	bl	8002430 <_test_assert>
 8003068:	2800      	cmp	r0, #0
 800306a:	f47f ad73 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
    test_emit_token(msg2);
 800306e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003072:	f7ff f9f5 	bl	8002460 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8003076:	3e01      	subs	r6, #1
 8003078:	d1e8      	bne.n	800304c <mbox1_execute.lto_priv.108+0x55c>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 800307a:	2028      	movs	r0, #40	; 0x28
 800307c:	490c      	ldr	r1, [pc, #48]	; (80030b0 <mbox1_execute.lto_priv.108+0x5c0>)
 800307e:	f7ff f9af 	bl	80023e0 <_test_assert_sequence>
 8003082:	2800      	cmp	r0, #0
 8003084:	f47f ad66 	bne.w	8002b54 <mbox1_execute.lto_priv.108+0x64>
 8003088:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800308c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800308e:	2029      	movs	r0, #41	; 0x29
 8003090:	f1a1 0c05 	sub.w	ip, r1, #5
 8003094:	f1dc 0100 	rsbs	r1, ip, #0
 8003098:	eb41 010c 	adc.w	r1, r1, ip
 800309c:	4c05      	ldr	r4, [pc, #20]	; (80030b4 <mbox1_execute.lto_priv.108+0x5c4>)
 800309e:	f7ff f9c7 	bl	8002430 <_test_assert>
 80030a2:	2800      	cmp	r0, #0
 80030a4:	f43f ad59 	beq.w	8002b5a <mbox1_execute.lto_priv.108+0x6a>
 80030a8:	f386 8811 	msr	BASEPRI, r6
 80030ac:	e552      	b.n	8002b54 <mbox1_execute.lto_priv.108+0x64>
 80030ae:	bf00      	nop
 80030b0:	08006010 	.word	0x08006010
 80030b4:	20000800 	.word	0x20000800
	...

080030c0 <thread>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static THD_FUNCTION(thread, p) {
 80030c0:	b510      	push	{r4, lr}
 80030c2:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 80030c4:	2141      	movs	r1, #65	; 0x41
 80030c6:	f000 fd33 	bl	8003b30 <chMsgSend>
  chMsgSend(p, 'B');
 80030ca:	4620      	mov	r0, r4
 80030cc:	2142      	movs	r1, #66	; 0x42
 80030ce:	f000 fd2f 	bl	8003b30 <chMsgSend>
  chMsgSend(p, 'C');
 80030d2:	4620      	mov	r0, r4
}
 80030d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread, p) {

  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
 80030d8:	2143      	movs	r1, #67	; 0x43
 80030da:	f000 bd29 	b.w	8003b30 <chMsgSend>
 80030de:	bf00      	nop

080030e0 <msg1_execute.lto_priv.106>:
}

static void msg1_execute(void) {
 80030e0:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80030e2:	4b1f      	ldr	r3, [pc, #124]	; (8003160 <msg1_execute.lto_priv.106+0x80>)
 80030e4:	b082      	sub	sp, #8
 80030e6:	699c      	ldr	r4, [r3, #24]
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80030e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80030ec:	68a2      	ldr	r2, [r4, #8]
 80030ee:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <msg1_execute.lto_priv.106+0x84>)
 80030f0:	3201      	adds	r2, #1
 80030f2:	9400      	str	r4, [sp, #0]
 80030f4:	481c      	ldr	r0, [pc, #112]	; (8003168 <msg1_execute.lto_priv.106+0x88>)
 80030f6:	f000 fc13 	bl	8003920 <chThdCreateStatic>
 80030fa:	4b1c      	ldr	r3, [pc, #112]	; (800316c <msg1_execute.lto_priv.106+0x8c>)
 80030fc:	2520      	movs	r5, #32
 80030fe:	6018      	str	r0, [r3, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 8003100:	f000 fc66 	bl	80039d0 <chMsgWait>
 8003104:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8003106:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 800310a:	4631      	mov	r1, r6
 800310c:	f000 fbb8 	bl	8003880 <chSchWakeupS>
 8003110:	2400      	movs	r4, #0
 8003112:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8003116:	b2f0      	uxtb	r0, r6
 8003118:	f7ff f9a2 	bl	8002460 <test_emit_token>
  tp = chMsgWait();
 800311c:	f000 fc58 	bl	80039d0 <chMsgWait>
 8003120:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8003122:	f385 8811 	msr	BASEPRI, r5
 8003126:	4631      	mov	r1, r6
 8003128:	f000 fbaa 	bl	8003880 <chSchWakeupS>
 800312c:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8003130:	b2f0      	uxtb	r0, r6
 8003132:	f7ff f995 	bl	8002460 <test_emit_token>
  tp = chMsgWait();
 8003136:	f000 fc4b 	bl	80039d0 <chMsgWait>
 800313a:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800313c:	f385 8811 	msr	BASEPRI, r5
 8003140:	4631      	mov	r1, r6
 8003142:	f000 fb9d 	bl	8003880 <chSchWakeupS>
 8003146:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 800314a:	b2f0      	uxtb	r0, r6
 800314c:	f7ff f988 	bl	8002460 <test_emit_token>
  test_assert_sequence(1, "ABC");
 8003150:	4907      	ldr	r1, [pc, #28]	; (8003170 <msg1_execute.lto_priv.106+0x90>)
 8003152:	2001      	movs	r0, #1
}
 8003154:	b002      	add	sp, #8
 8003156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 800315a:	f7ff b941 	b.w	80023e0 <_test_assert_sequence>
 800315e:	bf00      	nop
 8003160:	200011a0 	.word	0x200011a0
 8003164:	080030c1 	.word	0x080030c1
 8003168:	20000928 	.word	0x20000928
 800316c:	200012f4 	.word	0x200012f4
 8003170:	08006c70 	.word	0x08006c70
	...

08003180 <mtx8_execute.lto_priv.105>:
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 8003180:	b570      	push	{r4, r5, r6, lr}
 8003182:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <mtx8_execute.lto_priv.105+0x68>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8003184:	4d19      	ldr	r5, [pc, #100]	; (80031ec <mtx8_execute.lto_priv.105+0x6c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003186:	699a      	ldr	r2, [r3, #24]
 8003188:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <mtx8_execute.lto_priv.105+0x70>)
 800318a:	6896      	ldr	r6, [r2, #8]
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 800318c:	b082      	sub	sp, #8

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 800318e:	1c72      	adds	r2, r6, #1
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	4628      	mov	r0, r5
 8003194:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003198:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <mtx8_execute.lto_priv.105+0x74>)
 800319a:	f000 fbc1 	bl	8003920 <chThdCreateStatic>
 800319e:	4c16      	ldr	r4, [pc, #88]	; (80031f8 <mtx8_execute.lto_priv.105+0x78>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 80031a0:	4b16      	ldr	r3, [pc, #88]	; (80031fc <mtx8_execute.lto_priv.105+0x7c>)
}

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 80031a2:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 80031a4:	1cb2      	adds	r2, r6, #2
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 80031ac:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <mtx8_execute.lto_priv.105+0x80>)
 80031b2:	f000 fbb5 	bl	8003920 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <mtx8_execute.lto_priv.105+0x84>)
 80031b8:	1cf2      	adds	r2, r6, #3
 80031ba:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 80031be:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	f505 7024 	add.w	r0, r5, #656	; 0x290
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <mtx8_execute.lto_priv.105+0x88>)
 80031c8:	f000 fbaa 	bl	8003920 <chThdCreateStatic>
 80031cc:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 80031ce:	f7fe f8cf 	bl	8001370 <chCondSignal.constprop.54>
  chCondSignal(&c1);
 80031d2:	f7fe f8cd 	bl	8001370 <chCondSignal.constprop.54>
  test_wait_threads();
 80031d6:	f7ff f8ab 	bl	8002330 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 80031da:	490c      	ldr	r1, [pc, #48]	; (800320c <mtx8_execute.lto_priv.105+0x8c>)
 80031dc:	2001      	movs	r0, #1
}
 80031de:	b002      	add	sp, #8
 80031e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 80031e4:	f7ff b8fc 	b.w	80023e0 <_test_assert_sequence>
 80031e8:	200011a0 	.word	0x200011a0
 80031ec:	20000928 	.word	0x20000928
 80031f0:	08006004 	.word	0x08006004
 80031f4:	08003231 	.word	0x08003231
 80031f8:	200012f4 	.word	0x200012f4
 80031fc:	0800600c 	.word	0x0800600c
 8003200:	080032c1 	.word	0x080032c1
 8003204:	08006000 	.word	0x08006000
 8003208:	08003211 	.word	0x08003211
 800320c:	08006c70 	.word	0x08006c70

08003210 <thread12>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread12, p) {
 8003210:	b538      	push	{r3, r4, r5, lr}
 8003212:	4605      	mov	r5, r0

  chMtxLock(&m2);
 8003214:	4c05      	ldr	r4, [pc, #20]	; (800322c <thread12+0x1c>)
 8003216:	4620      	mov	r0, r4
 8003218:	f000 fdd2 	bl	8003dc0 <chMtxLock>
  test_emit_token(*(char *)p);
 800321c:	7828      	ldrb	r0, [r5, #0]
 800321e:	f7ff f91f 	bl	8002460 <test_emit_token>
  chMtxUnlock(&m2);
 8003222:	4620      	mov	r0, r4
}
 8003224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread12, p) {

  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
 8003228:	f000 bd2a 	b.w	8003c80 <chMtxUnlock>
 800322c:	2000084c 	.word	0x2000084c

08003230 <thread11>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread11, p) {
 8003230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003232:	4607      	mov	r7, r0

  chMtxLock(&m2);
 8003234:	481c      	ldr	r0, [pc, #112]	; (80032a8 <thread11+0x78>)
 8003236:	f000 fdc3 	bl	8003dc0 <chMtxLock>
  chMtxLock(&m1);
 800323a:	481c      	ldr	r0, [pc, #112]	; (80032ac <thread11+0x7c>)
 800323c:	f000 fdc0 	bl	8003dc0 <chMtxLock>
 8003240:	2320      	movs	r3, #32
 8003242:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003246:	4d1a      	ldr	r5, [pc, #104]	; (80032b0 <thread11+0x80>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 8003248:	69ab      	ldr	r3, [r5, #24]
 800324a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 800324c:	4630      	mov	r0, r6
 800324e:	f000 fcef 	bl	8003c30 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->p_u.wtobjp = cp;
 8003252:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <thread11+0x84>)
 8003254:	69ac      	ldr	r4, [r5, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8003256:	4610      	mov	r0, r2
 8003258:	4613      	mov	r3, r2
 800325a:	6222      	str	r2, [r4, #32]
 800325c:	e003      	b.n	8003266 <thread11+0x36>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800325e:	6899      	ldr	r1, [r3, #8]
 8003260:	68a2      	ldr	r2, [r4, #8]
 8003262:	4291      	cmp	r1, r2
 8003264:	d302      	bcc.n	800326c <thread11+0x3c>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8003266:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8003268:	4283      	cmp	r3, r0
 800326a:	d1f8      	bne.n	800325e <thread11+0x2e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800326c:	685a      	ldr	r2, [r3, #4]
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 800326e:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8003270:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8003272:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8003274:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8003276:	605c      	str	r4, [r3, #4]
 8003278:	f000 fb92 	bl	80039a0 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 800327c:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT) {
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	3301      	adds	r3, #1
 8003282:	d002      	beq.n	800328a <thread11+0x5a>
    chMtxLockS(mp);
 8003284:	4630      	mov	r0, r6
 8003286:	f000 fd33 	bl	8003cf0 <chMtxLockS>
 800328a:	2300      	movs	r3, #0
 800328c:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 8003290:	7838      	ldrb	r0, [r7, #0]
 8003292:	f7ff f8e5 	bl	8002460 <test_emit_token>
  chMtxUnlock(&m1);
 8003296:	4805      	ldr	r0, [pc, #20]	; (80032ac <thread11+0x7c>)
 8003298:	f000 fcf2 	bl	8003c80 <chMtxUnlock>
  chMtxUnlock(&m2);
}
 800329c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
 80032a0:	4801      	ldr	r0, [pc, #4]	; (80032a8 <thread11+0x78>)
 80032a2:	f000 bced 	b.w	8003c80 <chMtxUnlock>
 80032a6:	bf00      	nop
 80032a8:	2000084c 	.word	0x2000084c
 80032ac:	2000083c 	.word	0x2000083c
 80032b0:	200011a0 	.word	0x200011a0
 80032b4:	20000828 	.word	0x20000828
	...

080032c0 <thread10>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread10, p) {
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	4606      	mov	r6, r0

  chMtxLock(&m1);
 80032c4:	4816      	ldr	r0, [pc, #88]	; (8003320 <thread10+0x60>)
 80032c6:	f000 fd7b 	bl	8003dc0 <chMtxLock>
 80032ca:	2320      	movs	r3, #32
 80032cc:	f383 8811 	msr	BASEPRI, r3
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 80032d0:	4b14      	ldr	r3, [pc, #80]	; (8003324 <thread10+0x64>)
 80032d2:	699c      	ldr	r4, [r3, #24]
 80032d4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 80032d6:	4628      	mov	r0, r5
 80032d8:	f000 fcaa 	bl	8003c30 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->p_u.wtobjp = cp;
 80032dc:	4a12      	ldr	r2, [pc, #72]	; (8003328 <thread10+0x68>)
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80032de:	4610      	mov	r0, r2
 80032e0:	4613      	mov	r3, r2
 80032e2:	6222      	str	r2, [r4, #32]
 80032e4:	e003      	b.n	80032ee <thread10+0x2e>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80032e6:	6899      	ldr	r1, [r3, #8]
 80032e8:	68a2      	ldr	r2, [r4, #8]
 80032ea:	4291      	cmp	r1, r2
 80032ec:	d302      	bcc.n	80032f4 <thread10+0x34>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80032ee:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80032f0:	4283      	cmp	r3, r0
 80032f2:	d1f8      	bne.n	80032e6 <thread10+0x26>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80032f4:	685a      	ldr	r2, [r3, #4]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 80032f6:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80032f8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80032fa:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80032fc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80032fe:	605c      	str	r4, [r3, #4]
 8003300:	f000 fb4e 	bl	80039a0 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
  chMtxLockS(mp);
 8003304:	4628      	mov	r0, r5
 8003306:	f000 fcf3 	bl	8003cf0 <chMtxLockS>
 800330a:	2300      	movs	r3, #0
 800330c:	f383 8811 	msr	BASEPRI, r3
  chCondWait(&c1);
  test_emit_token(*(char *)p);
 8003310:	7830      	ldrb	r0, [r6, #0]
 8003312:	f7ff f8a5 	bl	8002460 <test_emit_token>
  chMtxUnlock(&m1);
}
 8003316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static THD_FUNCTION(thread10, p) {

  chMtxLock(&m1);
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 800331a:	4801      	ldr	r0, [pc, #4]	; (8003320 <thread10+0x60>)
 800331c:	f000 bcb0 	b.w	8003c80 <chMtxUnlock>
 8003320:	2000083c 	.word	0x2000083c
 8003324:	200011a0 	.word	0x200011a0
 8003328:	20000828 	.word	0x20000828
 800332c:	00000000 	.word	0x00000000

08003330 <mtx7_execute.lto_priv.103>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8003330:	b530      	push	{r4, r5, lr}
 8003332:	4a2c      	ldr	r2, [pc, #176]	; (80033e4 <mtx7_execute.lto_priv.103+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003334:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <mtx7_execute.lto_priv.103+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003336:	6992      	ldr	r2, [r2, #24]

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8003338:	b083      	sub	sp, #12
 800333a:	6895      	ldr	r5, [r2, #8]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 800333c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003340:	1c6a      	adds	r2, r5, #1
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	4829      	ldr	r0, [pc, #164]	; (80033ec <mtx7_execute.lto_priv.103+0xbc>)
 8003346:	4b2a      	ldr	r3, [pc, #168]	; (80033f0 <mtx7_execute.lto_priv.103+0xc0>)
 8003348:	f000 faea 	bl	8003920 <chThdCreateStatic>
 800334c:	4c29      	ldr	r4, [pc, #164]	; (80033f4 <mtx7_execute.lto_priv.103+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 800334e:	4b2a      	ldr	r3, [pc, #168]	; (80033f8 <mtx7_execute.lto_priv.103+0xc8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003350:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003352:	1caa      	adds	r2, r5, #2
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800335a:	4b25      	ldr	r3, [pc, #148]	; (80033f0 <mtx7_execute.lto_priv.103+0xc0>)
 800335c:	4827      	ldr	r0, [pc, #156]	; (80033fc <mtx7_execute.lto_priv.103+0xcc>)
 800335e:	f000 fadf 	bl	8003920 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003362:	4b27      	ldr	r3, [pc, #156]	; (8003400 <mtx7_execute.lto_priv.103+0xd0>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003364:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003366:	1cea      	adds	r2, r5, #3
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800336e:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <mtx7_execute.lto_priv.103+0xc0>)
 8003370:	4824      	ldr	r0, [pc, #144]	; (8003404 <mtx7_execute.lto_priv.103+0xd4>)
 8003372:	f000 fad5 	bl	8003920 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8003376:	4b24      	ldr	r3, [pc, #144]	; (8003408 <mtx7_execute.lto_priv.103+0xd8>)
static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003378:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 800337a:	1d2a      	adds	r2, r5, #4
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003382:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <mtx7_execute.lto_priv.103+0xc0>)
 8003384:	4821      	ldr	r0, [pc, #132]	; (800340c <mtx7_execute.lto_priv.103+0xdc>)
 8003386:	f000 facb 	bl	8003920 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 800338a:	4b21      	ldr	r3, [pc, #132]	; (8003410 <mtx7_execute.lto_priv.103+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 800338c:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 800338e:	1d6a      	adds	r2, r5, #5
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003396:	4b16      	ldr	r3, [pc, #88]	; (80033f0 <mtx7_execute.lto_priv.103+0xc0>)
 8003398:	481e      	ldr	r0, [pc, #120]	; (8003414 <mtx7_execute.lto_priv.103+0xe4>)
 800339a:	f000 fac1 	bl	8003920 <chThdCreateStatic>
 800339e:	2320      	movs	r3, #32
 80033a0:	6120      	str	r0, [r4, #16]
 80033a2:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80033a6:	4c1c      	ldr	r4, [pc, #112]	; (8003418 <mtx7_execute.lto_priv.103+0xe8>)
 80033a8:	6823      	ldr	r3, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 80033aa:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 80033ac:	bf18      	it	ne
 80033ae:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 80033b2:	d009      	beq.n	80033c8 <mtx7_execute.lto_priv.103+0x98>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80033b4:	681a      	ldr	r2, [r3, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 80033b6:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 80033b8:	6054      	str	r4, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80033ba:	6022      	str	r2, [r4, #0]
 80033bc:	f000 fb70 	bl	8003aa0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	6205      	str	r5, [r0, #32]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 80033c4:	42a3      	cmp	r3, r4
 80033c6:	d1f5      	bne.n	80033b4 <mtx7_execute.lto_priv.103+0x84>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 80033c8:	f000 fa32 	bl	8003830 <chSchRescheduleS>
 80033cc:	2300      	movs	r3, #0
 80033ce:	f383 8811 	msr	BASEPRI, r3
  chCondBroadcast(&c1);
  test_wait_threads();
 80033d2:	f7fe ffad 	bl	8002330 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 80033d6:	4911      	ldr	r1, [pc, #68]	; (800341c <mtx7_execute.lto_priv.103+0xec>)
 80033d8:	2001      	movs	r0, #1
}
 80033da:	b003      	add	sp, #12
 80033dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 80033e0:	f7fe bffe 	b.w	80023e0 <_test_assert_sequence>
 80033e4:	200011a0 	.word	0x200011a0
 80033e8:	08006014 	.word	0x08006014
 80033ec:	20000928 	.word	0x20000928
 80033f0:	080032c1 	.word	0x080032c1
 80033f4:	200012f4 	.word	0x200012f4
 80033f8:	08006008 	.word	0x08006008
 80033fc:	20000a70 	.word	0x20000a70
 8003400:	0800600c 	.word	0x0800600c
 8003404:	20000bb8 	.word	0x20000bb8
 8003408:	08006000 	.word	0x08006000
 800340c:	20000d00 	.word	0x20000d00
 8003410:	08006004 	.word	0x08006004
 8003414:	20000e48 	.word	0x20000e48
 8003418:	20000828 	.word	0x20000828
 800341c:	08006010 	.word	0x08006010

08003420 <mtx6_execute.lto_priv.101>:
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 8003420:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003422:	4b2c      	ldr	r3, [pc, #176]	; (80034d4 <mtx6_execute.lto_priv.101+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003424:	4e2c      	ldr	r6, [pc, #176]	; (80034d8 <mtx6_execute.lto_priv.101+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	4d2c      	ldr	r5, [pc, #176]	; (80034dc <mtx6_execute.lto_priv.101+0xbc>)
 800342a:	689f      	ldr	r7, [r3, #8]
 800342c:	492c      	ldr	r1, [pc, #176]	; (80034e0 <mtx6_execute.lto_priv.101+0xc0>)
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 800342e:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003430:	1c7a      	adds	r2, r7, #1
 8003432:	462b      	mov	r3, r5
 8003434:	9100      	str	r1, [sp, #0]
 8003436:	4630      	mov	r0, r6
 8003438:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800343c:	f000 fa70 	bl	8003920 <chThdCreateStatic>
 8003440:	4c28      	ldr	r4, [pc, #160]	; (80034e4 <mtx6_execute.lto_priv.101+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003442:	4929      	ldr	r1, [pc, #164]	; (80034e8 <mtx6_execute.lto_priv.101+0xc8>)
}

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003444:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003446:	1cba      	adds	r2, r7, #2
 8003448:	462b      	mov	r3, r5
 800344a:	9100      	str	r1, [sp, #0]
 800344c:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8003450:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003454:	f000 fa64 	bl	8003920 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003458:	4924      	ldr	r1, [pc, #144]	; (80034ec <mtx6_execute.lto_priv.101+0xcc>)

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 800345a:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 800345c:	1cfa      	adds	r2, r7, #3
 800345e:	462b      	mov	r3, r5
 8003460:	9100      	str	r1, [sp, #0]
 8003462:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8003466:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800346a:	f000 fa59 	bl	8003920 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 800346e:	4920      	ldr	r1, [pc, #128]	; (80034f0 <mtx6_execute.lto_priv.101+0xd0>)
static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003470:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8003472:	1d3a      	adds	r2, r7, #4
 8003474:	462b      	mov	r3, r5
 8003476:	9100      	str	r1, [sp, #0]
 8003478:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 800347c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003480:	f000 fa4e 	bl	8003920 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8003484:	491b      	ldr	r1, [pc, #108]	; (80034f4 <mtx6_execute.lto_priv.101+0xd4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8003486:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8003488:	462b      	mov	r3, r5
 800348a:	9100      	str	r1, [sp, #0]
 800348c:	1d7a      	adds	r2, r7, #5
 800348e:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8003492:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003496:	f000 fa43 	bl	8003920 <chThdCreateStatic>
 800349a:	2320      	movs	r3, #32
 800349c:	6120      	str	r0, [r4, #16]
 800349e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 80034a2:	f7fd ff7d 	bl	80013a0 <chCondSignalI.constprop.53>
  chCondSignalI(&c1);
 80034a6:	f7fd ff7b 	bl	80013a0 <chCondSignalI.constprop.53>
  chCondSignalI(&c1);
 80034aa:	f7fd ff79 	bl	80013a0 <chCondSignalI.constprop.53>
  chCondSignalI(&c1);
 80034ae:	f7fd ff77 	bl	80013a0 <chCondSignalI.constprop.53>
  chCondSignalI(&c1);
 80034b2:	f7fd ff75 	bl	80013a0 <chCondSignalI.constprop.53>
  chSchRescheduleS();
 80034b6:	f000 f9bb 	bl	8003830 <chSchRescheduleS>
 80034ba:	2300      	movs	r3, #0
 80034bc:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_wait_threads();
 80034c0:	f7fe ff36 	bl	8002330 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 80034c4:	490c      	ldr	r1, [pc, #48]	; (80034f8 <mtx6_execute.lto_priv.101+0xd8>)
 80034c6:	2001      	movs	r0, #1
}
 80034c8:	b003      	add	sp, #12
 80034ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 80034ce:	f7fe bf87 	b.w	80023e0 <_test_assert_sequence>
 80034d2:	bf00      	nop
 80034d4:	200011a0 	.word	0x200011a0
 80034d8:	20000928 	.word	0x20000928
 80034dc:	080032c1 	.word	0x080032c1
 80034e0:	08006014 	.word	0x08006014
 80034e4:	200012f4 	.word	0x200012f4
 80034e8:	08006008 	.word	0x08006008
 80034ec:	0800600c 	.word	0x0800600c
 80034f0:	08006000 	.word	0x08006000
 80034f4:	08006004 	.word	0x08006004
 80034f8:	08006010 	.word	0x08006010
 80034fc:	00000000 	.word	0x00000000

08003500 <mtx5_execute.lto_priv.99>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 8003500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003504:	4d3b      	ldr	r5, [pc, #236]	; (80035f4 <mtx5_execute.lto_priv.99+0xf4>)
 8003506:	2320      	movs	r3, #32
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003508:	69aa      	ldr	r2, [r5, #24]
 800350a:	6896      	ldr	r6, [r2, #8]
 800350c:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8003510:	4c39      	ldr	r4, [pc, #228]	; (80035f8 <mtx5_execute.lto_priv.99+0xf8>)
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 8003512:	2100      	movs	r1, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8003514:	68a3      	ldr	r3, [r4, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d05e      	beq.n	80035d8 <mtx5_execute.lto_priv.99+0xd8>
 800351a:	2300      	movs	r3, #0
 800351c:	f383 8811 	msr	BASEPRI, r3
#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
  test_assert(1, b, "already locked");
 8003520:	2001      	movs	r0, #1
 8003522:	f7fe ff85 	bl	8002430 <_test_assert>
 8003526:	4601      	mov	r1, r0
 8003528:	b108      	cbz	r0, 800352e <mtx5_execute.lto_priv.99+0x2e>
 800352a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800352e:	2320      	movs	r3, #32
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	68a3      	ldr	r3, [r4, #8]
 8003536:	4a30      	ldr	r2, [pc, #192]	; (80035f8 <mtx5_execute.lto_priv.99+0xf8>)
 8003538:	2b00      	cmp	r3, #0
 800353a:	d054      	beq.n	80035e6 <mtx5_execute.lto_priv.99+0xe6>
 800353c:	2101      	movs	r1, #1
 800353e:	2300      	movs	r3, #0
 8003540:	f383 8811 	msr	BASEPRI, r3

  b = chMtxTryLock(&m1);
  test_assert(2, !b, "not locked");
 8003544:	2002      	movs	r0, #2
 8003546:	f7fe ff73 	bl	8002430 <_test_assert>
 800354a:	4607      	mov	r7, r0
 800354c:	2800      	cmp	r0, #0
 800354e:	d1ec      	bne.n	800352a <mtx5_execute.lto_priv.99+0x2a>
 8003550:	2320      	movs	r3, #32
 8003552:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxUnlockS(&m1);
 8003556:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80035f8 <mtx5_execute.lto_priv.99+0xf8>
 800355a:	4640      	mov	r0, r8
 800355c:	f000 fb68 	bl	8003c30 <chMtxUnlockS>
 8003560:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (const thread_t *)tqp);
 8003564:	6821      	ldr	r1, [r4, #0]
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 8003566:	2003      	movs	r0, #3
 8003568:	1b09      	subs	r1, r1, r4
 800356a:	fab1 f181 	clz	r1, r1
 800356e:	0949      	lsrs	r1, r1, #5
 8003570:	f7fe ff5e 	bl	8002430 <_test_assert>
 8003574:	2800      	cmp	r0, #0
 8003576:	d1d8      	bne.n	800352a <mtx5_execute.lto_priv.99+0x2a>
  test_assert(4, m1.m_owner == NULL, "still owned");
 8003578:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800357c:	2004      	movs	r0, #4
 800357e:	fab1 f181 	clz	r1, r1
 8003582:	0949      	lsrs	r1, r1, #5
 8003584:	f7fe ff54 	bl	8002430 <_test_assert>
 8003588:	2800      	cmp	r0, #0
 800358a:	d1ce      	bne.n	800352a <mtx5_execute.lto_priv.99+0x2a>
 800358c:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 800358e:	2005      	movs	r0, #5
 8003590:	6899      	ldr	r1, [r3, #8]
 8003592:	1a71      	subs	r1, r6, r1
 8003594:	fab1 f181 	clz	r1, r1
 8003598:	0949      	lsrs	r1, r1, #5
 800359a:	f7fe ff49 	bl	8002430 <_test_assert>
 800359e:	2800      	cmp	r0, #0
 80035a0:	d1c3      	bne.n	800352a <mtx5_execute.lto_priv.99+0x2a>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 80035a2:	4640      	mov	r0, r8
 80035a4:	f000 fc0c 	bl	8003dc0 <chMtxLock>
  chMtxUnlockAll();
 80035a8:	f000 fb12 	bl	8003bd0 <chMtxUnlockAll>
 80035ac:	f8d8 1000 	ldr.w	r1, [r8]
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 80035b0:	2006      	movs	r0, #6
 80035b2:	ebc8 0101 	rsb	r1, r8, r1
 80035b6:	fab1 f181 	clz	r1, r1
 80035ba:	0949      	lsrs	r1, r1, #5
 80035bc:	f7fe ff38 	bl	8002430 <_test_assert>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d1b2      	bne.n	800352a <mtx5_execute.lto_priv.99+0x2a>
  test_assert(7, m1.m_owner == NULL, "still owned");
 80035c4:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80035c8:	2007      	movs	r0, #7
 80035ca:	fab1 f181 	clz	r1, r1
}
 80035ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 80035d2:	0949      	lsrs	r1, r1, #5
 80035d4:	f7fe bf2c 	b.w	8002430 <_test_assert>

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 80035d8:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
  currp->p_mtxlist = mp;
 80035da:	2101      	movs	r1, #1
  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
  mp->m_next = currp->p_mtxlist;
 80035dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 80035de:	60a3      	str	r3, [r4, #8]
  mp->m_next = currp->p_mtxlist;
 80035e0:	60e2      	str	r2, [r4, #12]
  currp->p_mtxlist = mp;
 80035e2:	639c      	str	r4, [r3, #56]	; 0x38
 80035e4:	e799      	b.n	800351a <mtx5_execute.lto_priv.99+0x1a>

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 80035e6:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
 80035e8:	6b98      	ldr	r0, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 80035ea:	6093      	str	r3, [r2, #8]
  mp->m_next = currp->p_mtxlist;
 80035ec:	60d0      	str	r0, [r2, #12]
  currp->p_mtxlist = mp;
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38
 80035f0:	e7a5      	b.n	800353e <mtx5_execute.lto_priv.99+0x3e>
 80035f2:	bf00      	nop
 80035f4:	200011a0 	.word	0x200011a0
 80035f8:	2000083c 	.word	0x2000083c
 80035fc:	00000000 	.word	0x00000000

08003600 <wakeup.lto_priv.159>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8003600:	b410      	push	{r4}
 8003602:	2320      	movs	r3, #32
 8003604:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8003608:	7f03      	ldrb	r3, [r0, #28]
 800360a:	2b07      	cmp	r3, #7
 800360c:	d80e      	bhi.n	800362c <wakeup.lto_priv.159+0x2c>
 800360e:	e8df f003 	tbb	[pc, r3]
 8003612:	0d27      	.short	0x0d27
 8003614:	0408230d 	.word	0x0408230d
 8003618:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800361a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800361c:	6893      	ldr	r3, [r2, #8]
 800361e:	3301      	adds	r3, #1
 8003620:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8003622:	e890 000c 	ldmia.w	r0, {r2, r3}
 8003626:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8003628:	6802      	ldr	r2, [r0, #0]
 800362a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800362c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8003630:	2200      	movs	r2, #0
 8003632:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8003634:	4b0d      	ldr	r3, [pc, #52]	; (800366c <wakeup.lto_priv.159+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8003636:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8003638:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800363a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	428a      	cmp	r2, r1
 8003640:	d2fb      	bcs.n	800363a <wakeup.lto_priv.159+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8003646:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8003648:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 800364a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800364c:	6058      	str	r0, [r3, #4]
 800364e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8003652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003656:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8003658:	6a03      	ldr	r3, [r0, #32]
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e7e5      	b.n	800362c <wakeup.lto_priv.159+0x2c>
 8003660:	2300      	movs	r3, #0
 8003662:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8003666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	200011a0 	.word	0x200011a0

08003670 <_idle_thread.lto_priv.70>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8003670:	e7fe      	b.n	8003670 <_idle_thread.lto_priv.70>
 8003672:	bf00      	nop
	...

08003680 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8003680:	4a0d      	ldr	r2, [pc, #52]	; (80036b8 <chSchDoRescheduleAhead+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8003682:	b4f0      	push	{r4, r5, r6, r7}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8003684:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8003686:	6994      	ldr	r4, [r2, #24]

  tqp->p_next = tp->p_next;
 8003688:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800368a:	2701      	movs	r7, #1

  otp->p_state = CH_STATE_READY;
 800368c:	2600      	movs	r6, #0
 800368e:	68a1      	ldr	r1, [r4, #8]
 8003690:	462b      	mov	r3, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8003692:	606a      	str	r2, [r5, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8003694:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8003696:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8003698:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800369a:	7726      	strb	r6, [r4, #28]
 800369c:	e000      	b.n	80036a0 <chSchDoRescheduleAhead+0x20>
 800369e:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	428a      	cmp	r2, r1
 80036a4:	d8fb      	bhi.n	800369e <chSchDoRescheduleAhead+0x1e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 80036a6:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80036a8:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 80036aa:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 80036ac:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = otp;
 80036ae:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 80036b0:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 80036b2:	bcf0      	pop	{r4, r5, r6, r7}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80036b4:	f7fc bdbc 	b.w	8000230 <_port_switch>
 80036b8:	200011a0 	.word	0x200011a0
 80036bc:	00000000 	.word	0x00000000

080036c0 <chEvtUnregister>:
 80036c0:	2320      	movs	r3, #32
 80036c2:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 80036c6:	4602      	mov	r2, r0
 80036c8:	e002      	b.n	80036d0 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->el_next == elp) {
 80036ca:	428b      	cmp	r3, r1
 80036cc:	d007      	beq.n	80036de <chEvtUnregister+0x1e>
 80036ce:	461a      	mov	r2, r3
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
 80036d0:	6813      	ldr	r3, [r2, #0]
 80036d2:	4283      	cmp	r3, r0
 80036d4:	d1f9      	bne.n	80036ca <chEvtUnregister+0xa>
 80036d6:	2300      	movs	r3, #0
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	4770      	bx	lr
  /*lint -restore*/
    if (p->el_next == elp) {
      p->el_next = elp->el_next;
 80036de:	680b      	ldr	r3, [r1, #0]
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	2300      	movs	r3, #0
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	0000      	movs	r0, r0
	...

080036f0 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 80036f0:	4602      	mov	r2, r0
 80036f2:	2120      	movs	r1, #32
 80036f4:	f381 8811 	msr	BASEPRI, r1
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 80036f8:	7f83      	ldrb	r3, [r0, #30]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	7783      	strb	r3, [r0, #30]
  refs = tp->p_refs;

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 8003700:	b94b      	cbnz	r3, 8003716 <chThdRelease+0x26>
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8003702:	b410      	push	{r4}
  refs = tp->p_refs;

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 8003704:	7f04      	ldrb	r4, [r0, #28]
 8003706:	2c0f      	cmp	r4, #15
 8003708:	d009      	beq.n	800371e <chThdRelease+0x2e>
 800370a:	2300      	movs	r3, #0
 800370c:	f383 8811 	msr	BASEPRI, r3
         registry on exit.*/
      break;
    }
  }
  chSysUnlock();
}
 8003710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	2300      	movs	r3, #0
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	4770      	bx	lr

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 800371e:	7f44      	ldrb	r4, [r0, #29]
 8003720:	f004 0403 	and.w	r4, r4, #3
 8003724:	2c01      	cmp	r4, #1
 8003726:	d011      	beq.n	800374c <chThdRelease+0x5c>
 8003728:	2c02      	cmp	r4, #2
 800372a:	d1ee      	bne.n	800370a <chThdRelease+0x1a>
      return;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 800372c:	6914      	ldr	r4, [r2, #16]
 800372e:	6940      	ldr	r0, [r0, #20]
 8003730:	6104      	str	r4, [r0, #16]
 8003732:	6914      	ldr	r4, [r2, #16]
 8003734:	6160      	str	r0, [r4, #20]
 8003736:	f383 8811 	msr	BASEPRI, r3
#endif
      chSysUnlock();
      chPoolFree(tp->p_mpool, tp);
 800373a:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800373c:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8003740:	6801      	ldr	r1, [r0, #0]
 8003742:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8003744:	6002      	str	r2, [r0, #0]
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	e7e1      	b.n	8003710 <chThdRelease+0x20>
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 800374c:	6941      	ldr	r1, [r0, #20]
 800374e:	6904      	ldr	r4, [r0, #16]
 8003750:	610c      	str	r4, [r1, #16]
 8003752:	6902      	ldr	r2, [r0, #16]
 8003754:	6151      	str	r1, [r2, #20]
 8003756:	f383 8811 	msr	BASEPRI, r3
         registry on exit.*/
      break;
    }
  }
  chSysUnlock();
}
 800375a:	f85d 4b04 	ldr.w	r4, [sp], #4
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
#endif
      chSysUnlock();
      chHeapFree(tp);
 800375e:	f7fe bf7f 	b.w	8002660 <chHeapFree>
 8003762:	bf00      	nop
	...

08003770 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8003772:	490f      	ldr	r1, [pc, #60]	; (80037b0 <chTMStopMeasurementX+0x40>)
 8003774:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8003776:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8003778:	6f09      	ldr	r1, [r1, #112]	; 0x70
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800377a:	1ad3      	subs	r3, r2, r3

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800377c:	68c2      	ldr	r2, [r0, #12]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800377e:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8003780:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8003784:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8003786:	3201      	adds	r2, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8003788:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800378a:	18e4      	adds	r4, r4, r3

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800378c:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 800378e:	6802      	ldr	r2, [r0, #0]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8003790:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8003794:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8003796:	bf88      	it	hi
 8003798:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 800379a:	4293      	cmp	r3, r2
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800379c:	e9c0 4504 	strd	r4, r5, [r0, #16]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80037a0:	bc30      	pop	{r4, r5}
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80037a2:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 80037a4:	bf38      	it	cc
 80037a6:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e0001000 	.word	0xe0001000
 80037b0:	200011a0 	.word	0x200011a0
	...

080037c0 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	2320      	movs	r3, #32
 80037c4:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 80037c8:	4a12      	ldr	r2, [pc, #72]	; (8003814 <chThdYield+0x54>)
 80037ca:	6810      	ldr	r0, [r2, #0]
 80037cc:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 80037ce:	6883      	ldr	r3, [r0, #8]
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 80037d0:	68a1      	ldr	r1, [r4, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 80037d2:	428b      	cmp	r3, r1
 80037d4:	d203      	bcs.n	80037de <chThdYield+0x1e>
 80037d6:	2300      	movs	r3, #0
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80037de:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80037e0:	2701      	movs	r7, #1
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80037e2:	2600      	movs	r6, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80037e4:	606a      	str	r2, [r5, #4]
 80037e6:	462b      	mov	r3, r5
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80037e8:	7707      	strb	r7, [r0, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80037ea:	6015      	str	r5, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80037ec:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80037ee:	7726      	strb	r6, [r4, #28]
 80037f0:	e000      	b.n	80037f4 <chThdYield+0x34>
 80037f2:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	4291      	cmp	r1, r2
 80037f8:	d9fb      	bls.n	80037f2 <chThdYield+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80037fa:	685a      	ldr	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 80037fc:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80037fe:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8003800:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8003802:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8003804:	605c      	str	r4, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8003806:	f7fc fd13 	bl	8000230 <_port_switch>
 800380a:	2300      	movs	r3, #0
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003812:	bf00      	nop
 8003814:	200011a0 	.word	0x200011a0
	...

08003820 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8003820:	f7ff bf2e 	b.w	8003680 <chSchDoRescheduleAhead>
	...

08003830 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <chSchRescheduleS+0x14>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8003836:	6892      	ldr	r2, [r2, #8]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	429a      	cmp	r2, r3
 800383c:	d800      	bhi.n	8003840 <chSchRescheduleS+0x10>
 800383e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8003840:	f7ff bf1e 	b.w	8003680 <chSchDoRescheduleAhead>
 8003844:	200011a0 	.word	0x200011a0
	...

08003850 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 8003850:	b510      	push	{r4, lr}
 8003852:	2320      	movs	r3, #32
 8003854:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES == TRUE
  oldprio = currp->p_realprio;
 8003858:	4b08      	ldr	r3, [pc, #32]	; (800387c <chThdSetPriority+0x2c>)
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio)) {
 800385e:	6899      	ldr	r1, [r3, #8]
 8003860:	428c      	cmp	r4, r1
 8003862:	d001      	beq.n	8003868 <chThdSetPriority+0x18>
 8003864:	4281      	cmp	r1, r0
 8003866:	d200      	bcs.n	800386a <chThdSetPriority+0x1a>
    currp->p_prio = newprio;
 8003868:	6098      	str	r0, [r3, #8]
  }
  currp->p_realprio = newprio;
 800386a:	63d8      	str	r0, [r3, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 800386c:	f7ff ffe0 	bl	8003830 <chSchRescheduleS>
 8003870:	2300      	movs	r3, #0
 8003872:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return oldprio;
}
 8003876:	4620      	mov	r0, r4
 8003878:	bd10      	pop	{r4, pc}
 800387a:	bf00      	nop
 800387c:	200011a0 	.word	0x200011a0

08003880 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8003882:	b470      	push	{r4, r5, r6}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8003884:	699e      	ldr	r6, [r3, #24]
 8003886:	6884      	ldr	r4, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8003888:	4605      	mov	r5, r0
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800388a:	6201      	str	r1, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800388c:	68b0      	ldr	r0, [r6, #8]
 800388e:	4284      	cmp	r4, r0
 8003890:	d80c      	bhi.n	80038ac <chSchWakeupS+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8003892:	2200      	movs	r2, #0
 8003894:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8003896:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	4294      	cmp	r4, r2
 800389c:	d9fb      	bls.n	8003896 <chSchWakeupS+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800389e:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80038a0:	602b      	str	r3, [r5, #0]
  tp->p_prev = cp->p_prev;
 80038a2:	606a      	str	r2, [r5, #4]
  tp->p_prev->p_next = tp;
 80038a4:	6015      	str	r5, [r2, #0]
  cp->p_prev = tp;
 80038a6:	605d      	str	r5, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80038a8:	bc70      	pop	{r4, r5, r6}
 80038aa:	4770      	bx	lr
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 80038ac:	461a      	mov	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80038ae:	2100      	movs	r1, #0
 80038b0:	7731      	strb	r1, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80038b2:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 80038b4:	6891      	ldr	r1, [r2, #8]
 80038b6:	4288      	cmp	r0, r1
 80038b8:	d9fb      	bls.n	80038b2 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80038ba:	6850      	ldr	r0, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80038bc:	2401      	movs	r4, #1
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80038be:	6070      	str	r0, [r6, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80038c0:	6032      	str	r2, [r6, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80038c2:	6006      	str	r6, [r0, #0]
  cp->p_prev = tp;
 80038c4:	6056      	str	r6, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80038c6:	772c      	strb	r4, [r5, #28]
    chSysSwitch(ntp, otp);
 80038c8:	4631      	mov	r1, r6
 80038ca:	4628      	mov	r0, r5
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 80038cc:	619d      	str	r5, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80038ce:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 80038d0:	f7fc bcae 	b.w	8000230 <_port_switch>
 80038d4:	200011a0 	.word	0x200011a0
	...

080038e0 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 80038e0:	b508      	push	{r3, lr}
 80038e2:	2320      	movs	r3, #32
 80038e4:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= (cnt_t)0) {
 80038e8:	6883      	ldr	r3, [r0, #8]
 80038ea:	3301      	adds	r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	6083      	str	r3, [r0, #8]
 80038f0:	dd03      	ble.n	80038fa <chSemSignal+0x1a>
 80038f2:	2300      	movs	r3, #0
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	bd08      	pop	{r3, pc}
 80038fa:	4603      	mov	r3, r0
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80038fc:	6800      	ldr	r0, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 80038fe:	2100      	movs	r1, #0

  tqp->p_next = tp->p_next;
 8003900:	6802      	ldr	r2, [r0, #0]
 8003902:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8003904:	6053      	str	r3, [r2, #4]
 8003906:	f7ff ffbb 	bl	8003880 <chSchWakeupS>
 800390a:	2300      	movs	r3, #0
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	bd08      	pop	{r3, pc}
 8003912:	bf00      	nop
	...

08003920 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8003920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003924:	4699      	mov	r9, r3
 8003926:	4604      	mov	r4, r0
 8003928:	2320      	movs	r3, #32
 800392a:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800392e:	4e19      	ldr	r6, [pc, #100]	; (8003994 <chThdCreateStatic+0x74>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8003930:	3924      	subs	r1, #36	; 0x24
 8003932:	1847      	adds	r7, r0, r1
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8003934:	6973      	ldr	r3, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8003936:	f8df a060 	ldr.w	sl, [pc, #96]	; 8003998 <chThdCreateStatic+0x78>
 800393a:	60c7      	str	r7, [r0, #12]
 800393c:	f840 9001 	str.w	r9, [r0, r1]
 8003940:	9908      	ldr	r1, [sp, #32]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8003942:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8003944:	f100 0928 	add.w	r9, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8003948:	f04f 0c01 	mov.w	ip, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800394c:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8003950:	f04f 0802 	mov.w	r8, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8003954:	6079      	str	r1, [r7, #4]
 8003956:	f8c7 a020 	str.w	sl, [r7, #32]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800395a:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800395c:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800395e:	6106      	str	r6, [r0, #16]
 8003960:	6143      	str	r3, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8003962:	63c2      	str	r2, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8003964:	f880 801c 	strb.w	r8, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8003968:	f880 c01e 	strb.w	ip, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800396c:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800396e:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8003970:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8003972:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 8003974:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8003976:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800397a:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800397e:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
 8003982:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8003984:	f7ff ff7c 	bl	8003880 <chSchWakeupS>
 8003988:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800398c:	4620      	mov	r0, r4
 800398e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003992:	bf00      	nop
 8003994:	200011a0 	.word	0x200011a0
 8003998:	08000241 	.word	0x08000241
 800399c:	00000000 	.word	0x00000000

080039a0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 80039a2:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80039a4:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 80039a6:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 80039a8:	6814      	ldr	r4, [r2, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80039aa:	2501      	movs	r5, #1
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 80039ac:	7708      	strb	r0, [r1, #28]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80039ae:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80039b0:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80039b2:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 80039b4:	4610      	mov	r0, r2
}
 80039b6:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80039b8:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 80039ba:	f7fc bc39 	b.w	8000230 <_port_switch>
 80039be:	bf00      	nop
 80039c0:	200011a0 	.word	0x200011a0
	...

080039d0 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 80039d0:	b510      	push	{r4, lr}
 80039d2:	2320      	movs	r3, #32
 80039d4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 80039d8:	4c0b      	ldr	r4, [pc, #44]	; (8003a08 <chMsgWait+0x38>)
 80039da:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 80039dc:	4613      	mov	r3, r2
 80039de:	f853 0f28 	ldr.w	r0, [r3, #40]!
 80039e2:	4298      	cmp	r0, r3
 80039e4:	d008      	beq.n	80039f8 <chMsgWait+0x28>
 80039e6:	6801      	ldr	r1, [r0, #0]
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 80039e8:	240d      	movs	r4, #13
 80039ea:	6291      	str	r1, [r2, #40]	; 0x28
  tqp->p_next->p_prev = (thread_t *)tqp;
 80039ec:	604b      	str	r3, [r1, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	7704      	strb	r4, [r0, #28]
 80039f2:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return tp;
}
 80039f6:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
 80039f8:	200e      	movs	r0, #14
 80039fa:	f7ff ffd1 	bl	80039a0 <chSchGoSleepS>
 80039fe:	69a2      	ldr	r2, [r4, #24]
 8003a00:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003a02:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8003a06:	e7ee      	b.n	80039e6 <chMsgWait+0x16>
 8003a08:	200011a0 	.word	0x200011a0
 8003a0c:	00000000 	.word	0x00000000

08003a10 <chSemWait>:
 8003a10:	2320      	movs	r3, #32
 8003a12:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8003a16:	6883      	ldr	r3, [r0, #8]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	6083      	str	r3, [r0, #8]
 8003a1e:	db04      	blt.n	8003a2a <chSemWait+0x1a>
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->p_u.rdymsg;
  }

  return MSG_OK;
 8003a20:	2000      	movs	r0, #0
 8003a22:	2300      	movs	r3, #0
 8003a24:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 8003a28:	4770      	bx	lr
 8003a2a:	4603      	mov	r3, r0
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 8003a2c:	b510      	push	{r4, lr}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    currp->p_u.wtsemp = sp;
 8003a2e:	4c08      	ldr	r4, [pc, #32]	; (8003a50 <chSemWait+0x40>)
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8003a30:	2005      	movs	r0, #5
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    currp->p_u.wtsemp = sp;
 8003a32:	69a2      	ldr	r2, [r4, #24]
 8003a34:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8003a36:	6859      	ldr	r1, [r3, #4]
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8003a38:	6013      	str	r3, [r2, #0]
  tp->p_prev = tqp->p_prev;
 8003a3a:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8003a3c:	600a      	str	r2, [r1, #0]
  tqp->p_prev = tp;
 8003a3e:	605a      	str	r2, [r3, #4]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8003a40:	f7ff ffae 	bl	80039a0 <chSchGoSleepS>

    return currp->p_u.rdymsg;
 8003a44:	69a3      	ldr	r3, [r4, #24]
 8003a46:	6a18      	ldr	r0, [r3, #32]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 8003a4e:	bd10      	pop	{r4, pc}
 8003a50:	200011a0 	.word	0x200011a0
	...

08003a60 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8003a60:	b538      	push	{r3, r4, r5, lr}
 8003a62:	4604      	mov	r4, r0
 8003a64:	2320      	movs	r3, #32
 8003a66:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC == TRUE
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 8003a6a:	7f03      	ldrb	r3, [r0, #28]
 8003a6c:	2b0f      	cmp	r3, #15
 8003a6e:	d007      	beq.n	8003a80 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 8003a72:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003a74:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8003a76:	2009      	movs	r0, #9
 8003a78:	601a      	str	r2, [r3, #0]
  tlp->p_next = tp;
 8003a7a:	6263      	str	r3, [r4, #36]	; 0x24
 8003a7c:	f7ff ff90 	bl	80039a0 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8003a80:	6a25      	ldr	r5, [r4, #32]
 8003a82:	2300      	movs	r3, #0
 8003a84:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

#if CH_CFG_USE_DYNAMIC == TRUE
  /* Releasing a lock if it is a dynamic thread.*/
  chThdRelease(tp);
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7ff fe31 	bl	80036f0 <chThdRelease>
#endif

  return msg;
}
 8003a8e:	4628      	mov	r0, r5
 8003a90:	bd38      	pop	{r3, r4, r5, pc}
 8003a92:	bf00      	nop
 8003a94:	200011a0 	.word	0x200011a0
	...

08003aa0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8003aa0:	b410      	push	{r4}
 8003aa2:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8003aa8:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <chSchReadyI+0x28>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8003aaa:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8003aac:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	428a      	cmp	r2, r1
 8003ab2:	d2fb      	bcs.n	8003aac <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8003ab4:	685a      	ldr	r2, [r3, #4]
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 8003ab6:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8003ab8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8003aba:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8003abc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8003abe:	605c      	str	r4, [r3, #4]

  return tp;
}
 8003ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	200011a0 	.word	0x200011a0
 8003acc:	00000000 	.word	0x00000000

08003ad0 <chIQPutI>:
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8003ad0:	6942      	ldr	r2, [r0, #20]
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	6980      	ldr	r0, [r0, #24]
 8003ad6:	b510      	push	{r4, lr}
 8003ad8:	4282      	cmp	r2, r0
 8003ada:	d01d      	beq.n	8003b18 <chIQPutI+0x48>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8003adc:	6898      	ldr	r0, [r3, #8]
  *iqp->q_wrptr++ = b;
 8003ade:	1c54      	adds	r4, r2, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8003ae0:	3001      	adds	r0, #1
  *iqp->q_wrptr++ = b;
 8003ae2:	615c      	str	r4, [r3, #20]

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8003ae4:	6098      	str	r0, [r3, #8]
  *iqp->q_wrptr++ = b;
 8003ae6:	7011      	strb	r1, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8003ae8:	6959      	ldr	r1, [r3, #20]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	4291      	cmp	r1, r2
 8003aee:	d20c      	bcs.n	8003b0a <chIQPutI+0x3a>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8003af0:	681a      	ldr	r2, [r3, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00e      	beq.n	8003b14 <chIQPutI+0x44>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8003af6:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8003af8:	2400      	movs	r4, #0
 8003afa:	6019      	str	r1, [r3, #0]
  (void) chSchReadyI(tp);
 8003afc:	4610      	mov	r0, r2
  tqp->p_next->p_prev = (thread_t *)tqp;
 8003afe:	604b      	str	r3, [r1, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8003b00:	6214      	str	r4, [r2, #32]
  (void) chSchReadyI(tp);
 8003b02:	f7ff ffcd 	bl	8003aa0 <chSchReadyI>
    iqp->q_wrptr = iqp->q_buffer;
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8003b06:	4620      	mov	r0, r4
 8003b08:	bd10      	pop	{r4, pc}
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d1f0      	bne.n	8003af6 <chIQPutI+0x26>
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8003b14:	2000      	movs	r0, #0
 8003b16:	bd10      	pop	{r4, pc}
 8003b18:	6898      	ldr	r0, [r3, #8]
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	d0de      	beq.n	8003adc <chIQPutI+0xc>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 8003b1e:	f06f 0003 	mvn.w	r0, #3
 8003b22:	bd10      	pop	{r4, pc}
	...

08003b30 <chMsgSend>:
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 8003b30:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <chMsgSend+0x3c>)
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8003b32:	b570      	push	{r4, r5, r6, lr}
 8003b34:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8003b36:	699c      	ldr	r4, [r3, #24]
 8003b38:	f382 8811 	msr	BASEPRI, r2

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 8003b3c:	f100 0528 	add.w	r5, r0, #40	; 0x28
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 8003b40:	7f06      	ldrb	r6, [r0, #28]

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 8003b42:	6225      	str	r5, [r4, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8003b44:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 8003b46:	2e0e      	cmp	r6, #14
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 8003b48:	6321      	str	r1, [r4, #48]	; 0x30
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8003b4a:	6025      	str	r5, [r4, #0]
  tp->p_prev = tqp->p_prev;
 8003b4c:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8003b4e:	6014      	str	r4, [r2, #0]
  tqp->p_prev = tp;
 8003b50:	62c4      	str	r4, [r0, #44]	; 0x2c
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 8003b52:	d007      	beq.n	8003b64 <chMsgSend+0x34>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8003b54:	200c      	movs	r0, #12
 8003b56:	f7ff ff23 	bl	80039a0 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 8003b5a:	6a20      	ldr	r0, [r4, #32]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 8003b62:	bd70      	pop	{r4, r5, r6, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
    (void) chSchReadyI(tp);
 8003b64:	f7ff ff9c 	bl	8003aa0 <chSchReadyI>
 8003b68:	e7f4      	b.n	8003b54 <chMsgSend+0x24>
 8003b6a:	bf00      	nop
 8003b6c:	200011a0 	.word	0x200011a0

08003b70 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8003b70:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8003b72:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8003b74:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8003b76:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8003b78:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8003b7a:	d00a      	beq.n	8003b92 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8003b7c:	2a0b      	cmp	r2, #11
 8003b7e:	d000      	beq.n	8003b82 <chEvtSignalI+0x12>
 8003b80:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8003b82:	6a03      	ldr	r3, [r0, #32]
 8003b84:	4019      	ands	r1, r3

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8003b86:	428b      	cmp	r3, r1
 8003b88:	d1fa      	bne.n	8003b80 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 8003b8e:	f7ff bf87 	b.w	8003aa0 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8003b92:	6a03      	ldr	r3, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8003b94:	4219      	tst	r1, r3
 8003b96:	d1f8      	bne.n	8003b8a <chEvtSignalI+0x1a>
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	0000      	movs	r0, r0
	...

08003ba0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8003ba0:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8003ba2:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8003ba4:	4606      	mov	r6, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8003ba6:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8003ba8:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8003baa:	d00d      	beq.n	8003bc8 <chEvtBroadcastFlagsI+0x28>
  /*lint -restore*/
    elp->el_flags |= flags;
 8003bac:	68e3      	ldr	r3, [r4, #12]
 8003bae:	432b      	orrs	r3, r5
 8003bb0:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8003bb2:	b115      	cbz	r5, 8003bba <chEvtBroadcastFlagsI+0x1a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8003bb4:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8003bb6:	4213      	tst	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8003bba:	6860      	ldr	r0, [r4, #4]
 8003bbc:	68a1      	ldr	r1, [r4, #8]
 8003bbe:	f7ff ffd7 	bl	8003b70 <chEvtSignalI>
    }
    elp = elp->el_next;
 8003bc2:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8003bc4:	42a6      	cmp	r6, r4
 8003bc6:	d1f1      	bne.n	8003bac <chEvtBroadcastFlagsI+0xc>
 8003bc8:	bd70      	pop	{r4, r5, r6, pc}
 8003bca:	bf00      	nop
 8003bcc:	0000      	movs	r0, r0
	...

08003bd0 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 8003bd0:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <chMtxUnlockAll+0x50>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 8003bd2:	b570      	push	{r4, r5, r6, lr}
 8003bd4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8003bd6:	6994      	ldr	r4, [r2, #24]
 8003bd8:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 8003bdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bde:	b1d3      	cbz	r3, 8003c16 <chMtxUnlockAll+0x46>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8003be0:	2600      	movs	r6, #0
 8003be2:	e00b      	b.n	8003bfc <chMtxUnlockAll+0x2c>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 8003be4:	6b95      	ldr	r5, [r2, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8003be6:	6811      	ldr	r1, [r2, #0]
        tp->p_mtxlist = mp;
        (void) chSchReadyI(tp);
 8003be8:	4610      	mov	r0, r2
 8003bea:	6019      	str	r1, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8003bec:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 8003bee:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 8003bf0:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 8003bf2:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8003bf4:	f7ff ff54 	bl	8003aa0 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 8003bf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bfa:	b143      	cbz	r3, 8003c0e <chMtxUnlockAll+0x3e>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8003bfc:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8003bfe:	68d9      	ldr	r1, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 8003c00:	4293      	cmp	r3, r2

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8003c02:	63a1      	str	r1, [r4, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8003c04:	d1ee      	bne.n	8003be4 <chMtxUnlockAll+0x14>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8003c06:	609e      	str	r6, [r3, #8]
      }
    } while (ctp->p_mtxlist != NULL);
 8003c08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f6      	bne.n	8003bfc <chMtxUnlockAll+0x2c>
    ctp->p_prio = ctp->p_realprio;
 8003c0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c10:	60a3      	str	r3, [r4, #8]
    chSchRescheduleS();
 8003c12:	f7ff fe0d 	bl	8003830 <chSchRescheduleS>
 8003c16:	2300      	movs	r3, #0
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	bd70      	pop	{r4, r5, r6, pc}
 8003c1e:	bf00      	nop
 8003c20:	200011a0 	.word	0x200011a0
	...

08003c30 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8003c30:	b430      	push	{r4, r5}
 8003c32:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8003c34:	4a11      	ldr	r2, [pc, #68]	; (8003c7c <chMtxUnlockS+0x4c>)
 8003c36:	6825      	ldr	r5, [r4, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8003c38:	68c3      	ldr	r3, [r0, #12]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8003c3a:	6990      	ldr	r0, [r2, #24]
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8003c3c:	42ac      	cmp	r4, r5
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8003c3e:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8003c40:	d017      	beq.n	8003c72 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8003c42:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8003c44:	b14b      	cbz	r3, 8003c5a <chMtxUnlockS+0x2a>
 8003c46:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d003      	beq.n	8003c54 <chMtxUnlockS+0x24>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8003c4c:	6892      	ldr	r2, [r2, #8]
 8003c4e:	4291      	cmp	r1, r2
 8003c50:	bf38      	it	cc
 8003c52:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8003c54:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f5      	bne.n	8003c46 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8003c5a:	6baa      	ldr	r2, [r5, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8003c5c:	682b      	ldr	r3, [r5, #0]
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8003c5e:	6081      	str	r1, [r0, #8]
 8003c60:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 8003c62:	4628      	mov	r0, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8003c64:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8003c66:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 8003c68:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 8003c6a:	63ac      	str	r4, [r5, #56]	; 0x38
      mp->m_owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8003c6c:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 8003c6e:	f7ff bf17 	b.w	8003aa0 <chSchReadyI>
    }
    else {
      mp->m_owner = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60a3      	str	r3, [r4, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8003c76:	bc30      	pop	{r4, r5}
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	200011a0 	.word	0x200011a0

08003c80 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8003c80:	4b17      	ldr	r3, [pc, #92]	; (8003ce0 <chMtxUnlock+0x60>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8003c82:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8003c84:	699d      	ldr	r5, [r3, #24]
 8003c86:	2320      	movs	r3, #32
 8003c88:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8003c8c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8003c8e:	68c3      	ldr	r3, [r0, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8003c90:	42a0      	cmp	r0, r4
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8003c92:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8003c94:	d01d      	beq.n	8003cd2 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8003c96:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8003c98:	b14b      	cbz	r3, 8003cae <chMtxUnlock+0x2e>
 8003c9a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8003ca0:	6892      	ldr	r2, [r2, #8]
 8003ca2:	4291      	cmp	r1, r2
 8003ca4:	bf38      	it	cc
 8003ca6:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8003ca8:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f5      	bne.n	8003c9a <chMtxUnlock+0x1a>
 8003cae:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8003cb0:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8003cb2:	6ba6      	ldr	r6, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8003cb4:	4620      	mov	r0, r4
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8003cb6:	60a9      	str	r1, [r5, #8]
 8003cb8:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8003cba:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8003cbc:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 8003cbe:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 8003cc0:	63a3      	str	r3, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8003cc2:	f7ff feed 	bl	8003aa0 <chSchReadyI>
      chSchRescheduleS();
 8003cc6:	f7ff fdb3 	bl	8003830 <chSchRescheduleS>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	6083      	str	r3, [r0, #8]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	bd70      	pop	{r4, r5, r6, pc}
 8003cde:	bf00      	nop
 8003ce0:	200011a0 	.word	0x200011a0
	...

08003cf0 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8003cf2:	6882      	ldr	r2, [r0, #8]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8003cf4:	4b2f      	ldr	r3, [pc, #188]	; (8003db4 <chMtxLockS+0xc4>)
 8003cf6:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8003cf8:	2a00      	cmp	r2, #0
 8003cfa:	d055      	beq.n	8003da8 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8003cfc:	68a1      	ldr	r1, [r4, #8]
 8003cfe:	6893      	ldr	r3, [r2, #8]
 8003d00:	4605      	mov	r5, r0
 8003d02:	4299      	cmp	r1, r3
 8003d04:	d906      	bls.n	8003d14 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8003d06:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8003d08:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8003d0a:	2b06      	cmp	r3, #6
 8003d0c:	d033      	beq.n	8003d76 <chMtxLockS+0x86>
 8003d0e:	2b07      	cmp	r3, #7
 8003d10:	d01d      	beq.n	8003d4e <chMtxLockS+0x5e>
 8003d12:	b19b      	cbz	r3, 8003d3c <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8003d14:	462b      	mov	r3, r5
 8003d16:	e003      	b.n	8003d20 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8003d18:	6899      	ldr	r1, [r3, #8]
 8003d1a:	68a2      	ldr	r2, [r4, #8]
 8003d1c:	4291      	cmp	r1, r2
 8003d1e:	d302      	bcc.n	8003d26 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8003d20:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8003d22:	429d      	cmp	r5, r3
 8003d24:	d1f8      	bne.n	8003d18 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8003d26:	685a      	ldr	r2, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8003d28:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8003d2a:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8003d2c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8003d2e:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 8003d30:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 8003d32:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 8003d34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8003d38:	f7ff be32 	b.w	80039a0 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8003d3c:	e892 000a 	ldmia.w	r2, {r1, r3}
 8003d40:	6019      	str	r1, [r3, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 8003d42:	4610      	mov	r0, r2
  tp->p_next->p_prev = tp->p_prev;
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	6053      	str	r3, [r2, #4]
 8003d48:	f7ff feaa 	bl	8003aa0 <chSchReadyI>
 8003d4c:	e7e2      	b.n	8003d14 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8003d4e:	6817      	ldr	r7, [r2, #0]
 8003d50:	6850      	ldr	r0, [r2, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8003d52:	6a16      	ldr	r6, [r2, #32]
 8003d54:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 8003d56:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8003d58:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	e002      	b.n	8003d64 <chMtxLockS+0x74>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8003d5e:	6898      	ldr	r0, [r3, #8]
 8003d60:	4288      	cmp	r0, r1
 8003d62:	d302      	bcc.n	8003d6a <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8003d64:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8003d66:	429e      	cmp	r6, r3
 8003d68:	d1f9      	bne.n	8003d5e <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8003d6a:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8003d6c:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 8003d6e:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8003d70:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	e7ce      	b.n	8003d14 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8003d76:	6817      	ldr	r7, [r2, #0]
 8003d78:	6850      	ldr	r0, [r2, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8003d7a:	6a16      	ldr	r6, [r2, #32]
 8003d7c:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 8003d7e:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8003d80:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	e002      	b.n	8003d8c <chMtxLockS+0x9c>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8003d86:	6898      	ldr	r0, [r3, #8]
 8003d88:	4288      	cmp	r0, r1
 8003d8a:	d302      	bcc.n	8003d92 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8003d8c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8003d8e:	429e      	cmp	r6, r3
 8003d90:	d1f9      	bne.n	8003d86 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8003d92:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8003d94:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 8003d96:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8003d98:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8003d9a:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 8003d9c:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8003d9e:	68a1      	ldr	r1, [r4, #8]
 8003da0:	6893      	ldr	r3, [r2, #8]
 8003da2:	428b      	cmp	r3, r1
 8003da4:	d3af      	bcc.n	8003d06 <chMtxLockS+0x16>
 8003da6:	e7b5      	b.n	8003d14 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8003da8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 8003daa:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 8003dac:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 8003dae:	63a0      	str	r0, [r4, #56]	; 0x38
 8003db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003db2:	bf00      	nop
 8003db4:	200011a0 	.word	0x200011a0
	...

08003dc0 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8003dc0:	b508      	push	{r3, lr}
 8003dc2:	2320      	movs	r3, #32
 8003dc4:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxLockS(mp);
 8003dc8:	f7ff ff92 	bl	8003cf0 <chMtxLockS>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	bd08      	pop	{r3, pc}
	...

08003de0 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= (cnt_t)0) {
 8003de0:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8003de2:	4602      	mov	r2, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= (cnt_t)0) {
 8003de4:	3301      	adds	r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	6083      	str	r3, [r0, #8]
 8003dea:	dd00      	ble.n	8003dee <chSemSignalI+0xe>
 8003dec:	4770      	bx	lr
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8003dee:	6803      	ldr	r3, [r0, #0]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8003df0:	b410      	push	{r4}

  tqp->p_next = tp->p_next;
 8003df2:	6819      	ldr	r1, [r3, #0]

  if (++sp->s_cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8003df4:	2400      	movs	r4, #0
 8003df6:	6011      	str	r1, [r2, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8003df8:	604a      	str	r2, [r1, #4]
 8003dfa:	621c      	str	r4, [r3, #32]
    (void) chSchReadyI(tp);
 8003dfc:	4618      	mov	r0, r3
  }
}
 8003dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (++sp->s_cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
 8003e02:	f7ff be4d 	b.w	8003aa0 <chSchReadyI>
 8003e06:	bf00      	nop
	...

08003e10 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8003e10:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 8003e12:	6885      	ldr	r5, [r0, #8]
  sp->s_cnt = n;
 8003e14:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 8003e16:	3501      	adds	r5, #1
 8003e18:	2d00      	cmp	r5, #0
 8003e1a:	dc0c      	bgt.n	8003e36 <chSemResetI+0x26>
 8003e1c:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8003e1e:	f06f 0601 	mvn.w	r6, #1

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8003e22:	6860      	ldr	r0, [r4, #4]
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8003e24:	3501      	adds	r5, #1

  tqp->p_prev = tp->p_prev;
 8003e26:	6843      	ldr	r3, [r0, #4]
 8003e28:	6063      	str	r3, [r4, #4]
  tqp->p_prev->p_next = (thread_t *)tqp;
 8003e2a:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8003e2c:	f7ff fe38 	bl	8003aa0 <chSchReadyI>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8003e30:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8003e32:	6206      	str	r6, [r0, #32]
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8003e34:	d1f5      	bne.n	8003e22 <chSemResetI+0x12>
 8003e36:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e40 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	2220      	movs	r2, #32
 8003e44:	4603      	mov	r3, r0
 8003e46:	f382 8811 	msr	BASEPRI, r2
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 8003e4a:	4a0e      	ldr	r2, [pc, #56]	; (8003e84 <chThdExit+0x44>)
 8003e4c:	6994      	ldr	r4, [r2, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8003e4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8003e50:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8003e54:	42a8      	cmp	r0, r5
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 8003e56:	6223      	str	r3, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8003e58:	d006      	beq.n	8003e68 <chThdExit+0x28>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8003e5a:	6803      	ldr	r3, [r0, #0]
 8003e5c:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8003e5e:	f7ff fe1f 	bl	8003aa0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8003e62:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8003e64:	42a8      	cmp	r0, r5
 8003e66:	d1f8      	bne.n	8003e5a <chThdExit+0x1a>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8003e68:	7f63      	ldrb	r3, [r4, #29]
 8003e6a:	079b      	lsls	r3, r3, #30
 8003e6c:	d104      	bne.n	8003e78 <chThdExit+0x38>
    REG_REMOVE(tp);
 8003e6e:	6922      	ldr	r2, [r4, #16]
 8003e70:	6963      	ldr	r3, [r4, #20]
 8003e72:	611a      	str	r2, [r3, #16]
 8003e74:	6922      	ldr	r2, [r4, #16]
 8003e76:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8003e78:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 8003e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8003e7e:	f7ff bd8f 	b.w	80039a0 <chSchGoSleepS>
 8003e82:	bf00      	nop
 8003e84:	200011a0 	.word	0x200011a0
	...

08003e90 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8003e90:	4b1c      	ldr	r3, [pc, #112]	; (8003f04 <chVTDoResetI+0x74>)
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8003e92:	b470      	push	{r4, r5, r6}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8003e94:	69da      	ldr	r2, [r3, #28]
 8003e96:	4282      	cmp	r2, r0
 8003e98:	d00f      	beq.n	8003eba <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8003e9a:	6802      	ldr	r2, [r0, #0]
 8003e9c:	6841      	ldr	r1, [r0, #4]
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8003e9e:	331c      	adds	r3, #28

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8003ea0:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8003ea2:	6802      	ldr	r2, [r0, #0]
    vtp->vt_func = NULL;
 8003ea4:	2400      	movs	r4, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8003ea6:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8003ea8:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 8003eaa:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8003eac:	d003      	beq.n	8003eb6 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8003eae:	8901      	ldrh	r1, [r0, #8]
 8003eb0:	8913      	ldrh	r3, [r2, #8]
 8003eb2:	440b      	add	r3, r1
 8003eb4:	8113      	strh	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8003eb6:	bc70      	pop	{r4, r5, r6}
 8003eb8:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8003eba:	4619      	mov	r1, r3
 8003ebc:	6815      	ldr	r5, [r2, #0]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8003ebe:	2000      	movs	r0, #0

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8003ec0:	f841 5f1c 	str.w	r5, [r1, #28]!
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8003ec4:	428d      	cmp	r5, r1
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8003ec6:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 8003ec8:	60d0      	str	r0, [r2, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8003eca:	d016      	beq.n	8003efa <chVTDoResetI+0x6a>
 8003ecc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003ed0:	6a41      	ldr	r1, [r0, #36]	; 0x24

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8003ed2:	8916      	ldrh	r6, [r2, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8003ed4:	8cdc      	ldrh	r4, [r3, #38]	; 0x26

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8003ed6:	892a      	ldrh	r2, [r5, #8]
 8003ed8:	b289      	uxth	r1, r1
 8003eda:	18b3      	adds	r3, r6, r2
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8003edc:	1b0a      	subs	r2, r1, r4

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8003ede:	b29b      	uxth	r3, r3
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8003ee0:	b292      	uxth	r2, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8003ee2:	4293      	cmp	r3, r2

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8003ee4:	812b      	strh	r3, [r5, #8]
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8003ee6:	d9e6      	bls.n	8003eb6 <chVTDoResetI+0x26>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	b29b      	uxth	r3, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8003eec:	2b01      	cmp	r3, #1
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8003eee:	bf98      	it	ls
 8003ef0:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8003ef2:	440b      	add	r3, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	6343      	str	r3, [r0, #52]	; 0x34
 8003ef8:	e7dd      	b.n	8003eb6 <chVTDoResetI+0x26>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8003efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003efe:	60d8      	str	r0, [r3, #12]
 8003f00:	e7d9      	b.n	8003eb6 <chVTDoResetI+0x26>
 8003f02:	bf00      	nop
 8003f04:	200011a0 	.word	0x200011a0
	...

08003f10 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8003f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8003f12:	4e1e      	ldr	r6, [pc, #120]	; (8003f8c <chVTDoSetI+0x7c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8003f14:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8003f18:	46b6      	mov	lr, r6
 8003f1a:	f85e 4f1c 	ldr.w	r4, [lr, #28]!
 8003f1e:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8003f20:	2901      	cmp	r1, #1
 8003f22:	bf98      	it	ls
 8003f24:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8003f26:	4574      	cmp	r4, lr
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8003f28:	6103      	str	r3, [r0, #16]
  vtp->vt_func = vtfunc;
 8003f2a:	60c2      	str	r2, [r0, #12]
 8003f2c:	b2ab      	uxth	r3, r5
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8003f2e:	d01d      	beq.n	8003f6c <chVTDoSetI+0x5c>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8003f30:	4419      	add	r1, r3
 8003f32:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8003f34:	b289      	uxth	r1, r1
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8003f36:	8922      	ldrh	r2, [r4, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8003f38:	1acb      	subs	r3, r1, r3
 8003f3a:	b29b      	uxth	r3, r3
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8003f3c:	4293      	cmp	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003f3e:	bf38      	it	cc
 8003f40:	6379      	strcc	r1, [r7, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d905      	bls.n	8003f52 <chVTDoSetI+0x42>
    delta -= p->vt_delta;
    p = p->vt_next;
 8003f46:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8003f48:	1a9b      	subs	r3, r3, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8003f4a:	8922      	ldrh	r2, [r4, #8]
    delta -= p->vt_delta;
 8003f4c:	b29b      	uxth	r3, r3
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d3f9      	bcc.n	8003f46 <chVTDoSetI+0x36>
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
 8003f52:	f64f 71ff 	movw	r1, #65535	; 0xffff
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8003f56:	6862      	ldr	r2, [r4, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8003f58:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8003f5a:	6042      	str	r2, [r0, #4]
  vtp->vt_prev->vt_next = vtp;
 8003f5c:	6010      	str	r0, [r2, #0]
  p->vt_prev = vtp;
 8003f5e:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 8003f60:	8103      	strh	r3, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8003f62:	8922      	ldrh	r2, [r4, #8]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	8123      	strh	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8003f68:	84b1      	strh	r1, [r6, #36]	; 0x24
 8003f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8003f6c:	18ca      	adds	r2, r1, r3
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003f6e:	b292      	uxth	r2, r2
  STM32_ST_TIM->SR     = 0;
 8003f70:	f04f 0e00 	mov.w	lr, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8003f74:	2502      	movs	r5, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8003f76:	84f3      	strh	r3, [r6, #38]	; 0x26
      ch.vtlist.vt_next = vtp;
 8003f78:	61f0      	str	r0, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 8003f7a:	6230      	str	r0, [r6, #32]
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8003f7c:	6004      	str	r4, [r0, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8003f7e:	6044      	str	r4, [r0, #4]
      vtp->vt_delta = delay;
 8003f80:	8101      	strh	r1, [r0, #8]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003f82:	637a      	str	r2, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8003f84:	f8c7 e010 	str.w	lr, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8003f88:	60fd      	str	r5, [r7, #12]
 8003f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f8c:	200011a0 	.word	0x200011a0

08003f90 <chSchGoSleepTimeoutS>:
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8003f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8003f94:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8003f96:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8003f98:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8003f9a:	d012      	beq.n	8003fc2 <chSchGoSleepTimeoutS+0x32>
 8003f9c:	4605      	mov	r5, r0
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8003f9e:	4c0c      	ldr	r4, [pc, #48]	; (8003fd0 <chSchGoSleepTimeoutS+0x40>)
 8003fa0:	a801      	add	r0, sp, #4
 8003fa2:	69a3      	ldr	r3, [r4, #24]
 8003fa4:	4a0b      	ldr	r2, [pc, #44]	; (8003fd4 <chSchGoSleepTimeoutS+0x44>)
 8003fa6:	f7ff ffb3 	bl	8003f10 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8003faa:	4628      	mov	r0, r5
 8003fac:	f7ff fcf8 	bl	80039a0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8003fb0:	9b04      	ldr	r3, [sp, #16]
 8003fb2:	b113      	cbz	r3, 8003fba <chSchGoSleepTimeoutS+0x2a>
      chVTDoResetI(&vt);
 8003fb4:	a801      	add	r0, sp, #4
 8003fb6:	f7ff ff6b 	bl	8003e90 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8003fba:	69a3      	ldr	r3, [r4, #24]
}
 8003fbc:	6a18      	ldr	r0, [r3, #32]
 8003fbe:	b007      	add	sp, #28
 8003fc0:	bd30      	pop	{r4, r5, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8003fc2:	f7ff fced 	bl	80039a0 <chSchGoSleepS>
 8003fc6:	4c02      	ldr	r4, [pc, #8]	; (8003fd0 <chSchGoSleepTimeoutS+0x40>)
  }

  return currp->p_u.rdymsg;
 8003fc8:	69a3      	ldr	r3, [r4, #24]
}
 8003fca:	6a18      	ldr	r0, [r3, #32]
 8003fcc:	b007      	add	sp, #28
 8003fce:	bd30      	pop	{r4, r5, pc}
 8003fd0:	200011a0 	.word	0x200011a0
 8003fd4:	08003601 	.word	0x08003601
	...

08003fe0 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8003fe0:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8003fe2:	6880      	ldr	r0, [r0, #8]
 8003fe4:	1e42      	subs	r2, r0, #1
 8003fe6:	2a00      	cmp	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
 8003fea:	db01      	blt.n	8003ff0 <chSemWaitTimeoutS+0x10>
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 8003fec:	2000      	movs	r0, #0
 8003fee:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8003ff0:	b410      	push	{r4}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
 8003ff2:	b161      	cbz	r1, 800400e <chSemWaitTimeoutS+0x2e>
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 8003ff4:	4a09      	ldr	r2, [pc, #36]	; (800401c <chSemWaitTimeoutS+0x3c>)
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8003ff6:	2005      	movs	r0, #5
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 8003ff8:	6992      	ldr	r2, [r2, #24]
 8003ffa:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8003ffc:	685c      	ldr	r4, [r3, #4]
 8003ffe:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->p_prev->p_next = tp;
 8004002:	6022      	str	r2, [r4, #0]
  tqp->p_prev = tp;
 8004004:	605a      	str	r2, [r3, #4]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8004006:	f85d 4b04 	ldr.w	r4, [sp], #4
      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 800400a:	f7ff bfc1 	b.w	8003f90 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 800400e:	6098      	str	r0, [r3, #8]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8004010:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;

      return MSG_TIMEOUT;
 8004014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	200011a0 	.word	0x200011a0

08004020 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8004020:	b169      	cbz	r1, 800403e <chThdEnqueueTimeoutS+0x1e>
 8004022:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8004024:	4b07      	ldr	r3, [pc, #28]	; (8004044 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8004026:	b410      	push	{r4}

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8004028:	699b      	ldr	r3, [r3, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800402a:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800402c:	2004      	movs	r0, #4
 800402e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8004032:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8004034:	6053      	str	r3, [r2, #4]
}
 8004036:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800403a:	f7ff bfa9 	b.w	8003f90 <chSchGoSleepTimeoutS>
}
 800403e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004042:	4770      	bx	lr
 8004044:	200011a0 	.word	0x200011a0
	...

08004050 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8004050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004054:	4604      	mov	r4, r0
 8004056:	b083      	sub	sp, #12
 8004058:	4689      	mov	r9, r1
 800405a:	4693      	mov	fp, r2
 800405c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800405e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8004062:	2720      	movs	r7, #32
 8004064:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8004068:	2600      	movs	r6, #0
 800406a:	46b2      	mov	sl, r6
 800406c:	9701      	str	r7, [sp, #4]

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 800406e:	f1b8 0f00 	cmp.w	r8, #0
 8004072:	d007      	beq.n	8004084 <chIQReadTimeout+0x34>
      nfy(iqp);
 8004074:	4620      	mov	r0, r4
 8004076:	47c0      	blx	r8
 8004078:	e004      	b.n	8004084 <chIQReadTimeout+0x34>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800407a:	4620      	mov	r0, r4
 800407c:	4629      	mov	r1, r5
 800407e:	f7ff ffcf 	bl	8004020 <chThdEnqueueTimeoutS>
 8004082:	b9d0      	cbnz	r0, 80040ba <chIQReadTimeout+0x6a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8004084:	68a7      	ldr	r7, [r4, #8]
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8004086:	2f00      	cmp	r7, #0
 8004088:	d0f7      	beq.n	800407a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800408a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800408c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800408e:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8004090:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8004092:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8004094:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8004096:	7813      	ldrb	r3, [r2, #0]
 8004098:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800409c:	6923      	ldr	r3, [r4, #16]
 800409e:	69a2      	ldr	r2, [r4, #24]
 80040a0:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 80040a2:	bf24      	itt	cs
 80040a4:	68e3      	ldrcs	r3, [r4, #12]
 80040a6:	61a3      	strcs	r3, [r4, #24]
 80040a8:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 80040ac:	3601      	adds	r6, #1
    if (--n == 0U) {
 80040ae:	45b3      	cmp	fp, r6
 80040b0:	d005      	beq.n	80040be <chIQReadTimeout+0x6e>
 80040b2:	9b01      	ldr	r3, [sp, #4]
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	e7d9      	b.n	800406e <chIQReadTimeout+0x1e>
 80040ba:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 80040be:	4630      	mov	r0, r6
 80040c0:	b003      	add	sp, #12
 80040c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c6:	bf00      	nop
	...

080040d0 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	2320      	movs	r3, #32
 80040d4:	460e      	mov	r6, r1
 80040d6:	4604      	mov	r4, r0
 80040d8:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 80040dc:	69c3      	ldr	r3, [r0, #28]
 80040de:	b13b      	cbz	r3, 80040f0 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 80040e0:	4798      	blx	r3
 80040e2:	e005      	b.n	80040f0 <chIQGetTimeout+0x20>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80040e4:	4620      	mov	r0, r4
 80040e6:	4631      	mov	r1, r6
 80040e8:	f7ff ff9a 	bl	8004020 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80040ec:	2800      	cmp	r0, #0
 80040ee:	db13      	blt.n	8004118 <chIQGetTimeout+0x48>
 80040f0:	68a5      	ldr	r5, [r4, #8]
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 80040f2:	2d00      	cmp	r5, #0
 80040f4:	d0f6      	beq.n	80040e4 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80040f6:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 80040f8:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 80040fa:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80040fc:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 80040fe:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8004100:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8004102:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8004104:	bf28      	it	cs
 8004106:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8004108:	61a2      	str	r2, [r4, #24]
 800410a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800410c:	bf28      	it	cs
 800410e:	61a3      	strcs	r3, [r4, #24]
 8004110:	2300      	movs	r3, #0
 8004112:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8004116:	bd70      	pop	{r4, r5, r6, pc}
 8004118:	f385 8811 	msr	BASEPRI, r5
 800411c:	bd70      	pop	{r4, r5, r6, pc}
 800411e:	bf00      	nop

08004120 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8004120:	b508      	push	{r3, lr}
 8004122:	4601      	mov	r1, r0
 8004124:	2320      	movs	r3, #32
 8004126:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800412a:	2008      	movs	r0, #8
 800412c:	f7ff ff30 	bl	8003f90 <chSchGoSleepTimeoutS>
 8004130:	2300      	movs	r3, #0
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	bd08      	pop	{r3, pc}
	...

08004140 <chSysRestoreStatusX.part.3.lto_priv.148>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8004140:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004142:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8004146:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 800414a:	b11c      	cbz	r4, 8004154 <chSysRestoreStatusX.part.3.lto_priv.148+0x14>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800414c:	2300      	movs	r3, #0
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	bd10      	pop	{r4, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8004154:	f7ff fb6c 	bl	8003830 <chSchRescheduleS>
 8004158:	f384 8811 	msr	BASEPRI, r4
 800415c:	bd10      	pop	{r4, pc}
 800415e:	bf00      	nop

08004160 <chSysGetStatusAndLockX.part.2.lto_priv.149>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004160:	f3ef 8305 	mrs	r3, IPSR
 8004164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8004168:	b91b      	cbnz	r3, 8004172 <chSysGetStatusAndLockX.part.2.lto_priv.149+0x12>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800416a:	2320      	movs	r3, #32
 800416c:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 8004170:	4770      	bx	lr
 8004172:	2320      	movs	r3, #32
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	0000      	movs	r0, r0
	...

08004180 <chSysIntegrityCheckI>:
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8004180:	07c2      	lsls	r2, r0, #31
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @iclass
 */
bool chSysIntegrityCheckI(unsigned testmask) {
 8004182:	b410      	push	{r4}
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8004184:	d510      	bpl.n	80041a8 <chSysIntegrityCheckI+0x28>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
 8004186:	4a2a      	ldr	r2, [pc, #168]	; (8004230 <chSysIntegrityCheckI+0xb0>)
 8004188:	6811      	ldr	r1, [r2, #0]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 800418a:	4291      	cmp	r1, r2
 800418c:	d03e      	beq.n	800420c <chSysIntegrityCheckI+0x8c>
 800418e:	2300      	movs	r3, #0
      n++;
      tp = tp->p_next;
 8004190:	6809      	ldr	r1, [r1, #0]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
      n++;
 8004192:	3301      	adds	r3, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8004194:	4291      	cmp	r1, r2
 8004196:	d1fb      	bne.n	8004190 <chSysIntegrityCheckI+0x10>
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 8004198:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 800419a:	428c      	cmp	r4, r1
 800419c:	d032      	beq.n	8004204 <chSysIntegrityCheckI+0x84>
      n--;
      tp = tp->p_prev;
 800419e:	6864      	ldr	r4, [r4, #4]
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
      n--;
 80041a0:	3b01      	subs	r3, #1
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80041a2:	4294      	cmp	r4, r2
 80041a4:	d1fb      	bne.n	800419e <chSysIntegrityCheckI+0x1e>
      n--;
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 80041a6:	bb6b      	cbnz	r3, 8004204 <chSysIntegrityCheckI+0x84>
      return true;
    }
  }

  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 80041a8:	0783      	lsls	r3, r0, #30
 80041aa:	d512      	bpl.n	80041d2 <chSysIntegrityCheckI+0x52>
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
 80041ac:	4a20      	ldr	r2, [pc, #128]	; (8004230 <chSysIntegrityCheckI+0xb0>)
 80041ae:	4614      	mov	r4, r2
 80041b0:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80041b4:	42a1      	cmp	r1, r4
 80041b6:	d02f      	beq.n	8004218 <chSysIntegrityCheckI+0x98>
 80041b8:	2300      	movs	r3, #0
      n++;
      vtp = vtp->vt_next;
 80041ba:	6809      	ldr	r1, [r1, #0]

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
      n++;
 80041bc:	3301      	adds	r3, #1
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80041be:	42a1      	cmp	r1, r4
 80041c0:	d1fb      	bne.n	80041ba <chSysIntegrityCheckI+0x3a>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 80041c2:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80041c4:	428a      	cmp	r2, r1
 80041c6:	d01d      	beq.n	8004204 <chSysIntegrityCheckI+0x84>
      n--;
      vtp = vtp->vt_prev;
 80041c8:	6852      	ldr	r2, [r2, #4]
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
      n--;
 80041ca:	3b01      	subs	r3, #1
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80041cc:	42a2      	cmp	r2, r4
 80041ce:	d1fb      	bne.n	80041c8 <chSysIntegrityCheckI+0x48>
      n--;
      vtp = vtp->vt_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 80041d0:	b9c3      	cbnz	r3, 8004204 <chSysIntegrityCheckI+0x84>
      return true;
    }
  }

#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 80041d2:	f010 0004 	ands.w	r0, r0, #4
 80041d6:	d012      	beq.n	80041fe <chSysIntegrityCheckI+0x7e>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
 80041d8:	4a15      	ldr	r2, [pc, #84]	; (8004230 <chSysIntegrityCheckI+0xb0>)
 80041da:	6913      	ldr	r3, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 80041dc:	4293      	cmp	r3, r2
 80041de:	d021      	beq.n	8004224 <chSysIntegrityCheckI+0xa4>
 80041e0:	2000      	movs	r0, #0
      n++;
      tp = tp->p_newer;
 80041e2:	691b      	ldr	r3, [r3, #16]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
      n++;
 80041e4:	3001      	adds	r0, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d1fb      	bne.n	80041e2 <chSysIntegrityCheckI+0x62>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 80041ea:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 80041ec:	4299      	cmp	r1, r3
 80041ee:	d009      	beq.n	8004204 <chSysIntegrityCheckI+0x84>
      n--;
      tp = tp->p_older;
 80041f0:	6949      	ldr	r1, [r1, #20]
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
      n--;
 80041f2:	3801      	subs	r0, #1
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 80041f4:	4291      	cmp	r1, r2
 80041f6:	d1fb      	bne.n	80041f0 <chSysIntegrityCheckI+0x70>
      n--;
      tp = tp->p_older;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 80041f8:	3000      	adds	r0, #0
 80041fa:	bf18      	it	ne
 80041fc:	2001      	movne	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 80041fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004202:	4770      	bx	lr
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
      return true;
 8004204:	2001      	movs	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 8004206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800420a:	4770      	bx	lr
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 800420c:	6854      	ldr	r4, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 800420e:	4294      	cmp	r4, r2
  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 8004210:	bf18      	it	ne
 8004212:	2300      	movne	r3, #0
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8004214:	d1c3      	bne.n	800419e <chSysIntegrityCheckI+0x1e>
 8004216:	e7c7      	b.n	80041a8 <chSysIntegrityCheckI+0x28>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 8004218:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800421a:	42a2      	cmp	r2, r4
  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
 800421c:	bf18      	it	ne
 800421e:	2300      	movne	r3, #0
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8004220:	d1d2      	bne.n	80041c8 <chSysIntegrityCheckI+0x48>
 8004222:	e7d6      	b.n	80041d2 <chSysIntegrityCheckI+0x52>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 8004224:	6959      	ldr	r1, [r3, #20]
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 8004226:	2000      	movs	r0, #0
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 8004228:	4299      	cmp	r1, r3
 800422a:	d1e1      	bne.n	80041f0 <chSysIntegrityCheckI+0x70>
 800422c:	e7e7      	b.n	80041fe <chSysIntegrityCheckI+0x7e>
 800422e:	bf00      	nop
 8004230:	200011a0 	.word	0x200011a0
	...

08004240 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8004240:	e7fe      	b.n	8004240 <BusFault_Handler>
 8004242:	bf00      	nop
	...

08004250 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8004250:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8004252:	4e11      	ldr	r6, [pc, #68]	; (8004298 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8004254:	2500      	movs	r5, #0
 8004256:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 800425a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800425e:	42a3      	cmp	r3, r4
 8004260:	d20d      	bcs.n	800427e <__init_ram_areas+0x2e>
 8004262:	461a      	mov	r2, r3
 8004264:	3904      	subs	r1, #4
      *p = *tp;
 8004266:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800426a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800426e:	42a2      	cmp	r2, r4
 8004270:	d3f9      	bcc.n	8004266 <__init_ram_areas+0x16>
 8004272:	43da      	mvns	r2, r3
 8004274:	4414      	add	r4, r2
 8004276:	f024 0403 	bic.w	r4, r4, #3
 800427a:	3404      	adds	r4, #4
 800427c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800427e:	68f2      	ldr	r2, [r6, #12]
 8004280:	4293      	cmp	r3, r2
 8004282:	d203      	bcs.n	800428c <__init_ram_areas+0x3c>
      *p = 0;
 8004284:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8004288:	4293      	cmp	r3, r2
 800428a:	d3fb      	bcc.n	8004284 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 800428c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800428e:	42be      	cmp	r6, r7
 8004290:	d3e3      	bcc.n	800425a <__init_ram_areas+0xa>
#endif
}
 8004292:	bcf0      	pop	{r4, r5, r6, r7}
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	08006c80 	.word	0x08006c80
 800429c:	00000000 	.word	0x00000000

080042a0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 80042a0:	e7fe      	b.n	80042a0 <__default_exit>
 80042a2:	bf00      	nop
	...

080042b0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
	...

080042c0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
	...

080042d0 <bmk12_setup.lto_priv.142>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80042d0:	4b02      	ldr	r3, [pc, #8]	; (80042dc <bmk12_setup.lto_priv.142+0xc>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80042d2:	2200      	movs	r2, #0
 80042d4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80042d6:	605b      	str	r3, [r3, #4]
 80042d8:	609a      	str	r2, [r3, #8]
 80042da:	4770      	bx	lr
 80042dc:	2000138c 	.word	0x2000138c

080042e0 <bmk11_setup.lto_priv.140>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80042e0:	4b02      	ldr	r3, [pc, #8]	; (80042ec <bmk11_setup.lto_priv.140+0xc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 80042e2:	2201      	movs	r2, #1
 80042e4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80042e6:	605b      	str	r3, [r3, #4]
 80042e8:	609a      	str	r2, [r3, #8]
 80042ea:	4770      	bx	lr
 80042ec:	200013c0 	.word	0x200013c0

080042f0 <tmo>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
	...

08004300 <bmk7_setup.lto_priv.135>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004300:	4b02      	ldr	r3, [pc, #8]	; (800430c <bmk7_setup.lto_priv.135+0xc>)
 8004302:	2200      	movs	r2, #0
 8004304:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8004306:	605b      	str	r3, [r3, #4]
 8004308:	609a      	str	r2, [r3, #8]
 800430a:	4770      	bx	lr
 800430c:	200013c0 	.word	0x200013c0

08004310 <sys2_execute.lto_priv.81>:
 8004310:	2320      	movs	r3, #32
 8004312:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004316:	b662      	cpsie	i
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004318:	b672      	cpsid	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800431a:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800431e:	b662      	cpsie	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004320:	2300      	movs	r3, #0
 8004322:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004326:	b662      	cpsie	i
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	0000      	movs	r0, r0
	...

08004330 <bmk12_execute.lto_priv.143>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 8004330:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8004332:	f7fd ffed 	bl	8002310 <test_wait_tick>
  test_start_timer(1000);
 8004336:	f7fd f973 	bl	8001620 <test_start_timer.constprop.2>
 800433a:	4d14      	ldr	r5, [pc, #80]	; (800438c <bmk12_execute.lto_priv.143+0x5c>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 800433c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 800433e:	4814      	ldr	r0, [pc, #80]	; (8004390 <bmk12_execute.lto_priv.143+0x60>)
 8004340:	f7ff fd3e 	bl	8003dc0 <chMtxLock>
    chMtxUnlock(&mtx1);
 8004344:	4812      	ldr	r0, [pc, #72]	; (8004390 <bmk12_execute.lto_priv.143+0x60>)
 8004346:	f7ff fc9b 	bl	8003c80 <chMtxUnlock>
    chMtxLock(&mtx1);
 800434a:	4811      	ldr	r0, [pc, #68]	; (8004390 <bmk12_execute.lto_priv.143+0x60>)
 800434c:	f7ff fd38 	bl	8003dc0 <chMtxLock>
    chMtxUnlock(&mtx1);
 8004350:	480f      	ldr	r0, [pc, #60]	; (8004390 <bmk12_execute.lto_priv.143+0x60>)
 8004352:	f7ff fc95 	bl	8003c80 <chMtxUnlock>
    chMtxLock(&mtx1);
 8004356:	480e      	ldr	r0, [pc, #56]	; (8004390 <bmk12_execute.lto_priv.143+0x60>)
 8004358:	f7ff fd32 	bl	8003dc0 <chMtxLock>
    chMtxUnlock(&mtx1);
 800435c:	480c      	ldr	r0, [pc, #48]	; (8004390 <bmk12_execute.lto_priv.143+0x60>)
 800435e:	f7ff fc8f 	bl	8003c80 <chMtxUnlock>
    chMtxLock(&mtx1);
 8004362:	480b      	ldr	r0, [pc, #44]	; (8004390 <bmk12_execute.lto_priv.143+0x60>)
 8004364:	f7ff fd2c 	bl	8003dc0 <chMtxLock>
    chMtxUnlock(&mtx1);
 8004368:	4809      	ldr	r0, [pc, #36]	; (8004390 <bmk12_execute.lto_priv.143+0x60>)
 800436a:	f7ff fc89 	bl	8003c80 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800436e:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 8004370:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0e3      	beq.n	800433e <bmk12_execute.lto_priv.143+0xe>
  test_print("--- Score : ");
 8004376:	4807      	ldr	r0, [pc, #28]	; (8004394 <bmk12_execute.lto_priv.143+0x64>)
 8004378:	f7fe f8b2 	bl	80024e0 <test_print>
  test_printn(n * 4);
 800437c:	00a0      	lsls	r0, r4, #2
 800437e:	f7fe f8bf 	bl	8002500 <test_printn>
  test_println(" lock+unlock/S");
}
 8004382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 8004386:	4804      	ldr	r0, [pc, #16]	; (8004398 <bmk12_execute.lto_priv.143+0x68>)
 8004388:	f7fe b88a 	b.w	80024a0 <test_println>
 800438c:	20001111 	.word	0x20001111
 8004390:	2000138c 	.word	0x2000138c
 8004394:	08006d20 	.word	0x08006d20
 8004398:	08006d30 	.word	0x08006d30
 800439c:	00000000 	.word	0x00000000

080043a0 <bmk11_execute.lto_priv.141>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 80043a0:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 80043a2:	f7fd ffb5 	bl	8002310 <test_wait_tick>
  test_start_timer(1000);
 80043a6:	f7fd f93b 	bl	8001620 <test_start_timer.constprop.2>
 80043aa:	4d14      	ldr	r5, [pc, #80]	; (80043fc <bmk11_execute.lto_priv.141+0x5c>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 80043ac:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 80043ae:	4814      	ldr	r0, [pc, #80]	; (8004400 <bmk11_execute.lto_priv.141+0x60>)
 80043b0:	f7ff fb2e 	bl	8003a10 <chSemWait>
    chSemSignal(&sem1);
 80043b4:	4812      	ldr	r0, [pc, #72]	; (8004400 <bmk11_execute.lto_priv.141+0x60>)
 80043b6:	f7ff fa93 	bl	80038e0 <chSemSignal>
    chSemWait(&sem1);
 80043ba:	4811      	ldr	r0, [pc, #68]	; (8004400 <bmk11_execute.lto_priv.141+0x60>)
 80043bc:	f7ff fb28 	bl	8003a10 <chSemWait>
    chSemSignal(&sem1);
 80043c0:	480f      	ldr	r0, [pc, #60]	; (8004400 <bmk11_execute.lto_priv.141+0x60>)
 80043c2:	f7ff fa8d 	bl	80038e0 <chSemSignal>
    chSemWait(&sem1);
 80043c6:	480e      	ldr	r0, [pc, #56]	; (8004400 <bmk11_execute.lto_priv.141+0x60>)
 80043c8:	f7ff fb22 	bl	8003a10 <chSemWait>
    chSemSignal(&sem1);
 80043cc:	480c      	ldr	r0, [pc, #48]	; (8004400 <bmk11_execute.lto_priv.141+0x60>)
 80043ce:	f7ff fa87 	bl	80038e0 <chSemSignal>
    chSemWait(&sem1);
 80043d2:	480b      	ldr	r0, [pc, #44]	; (8004400 <bmk11_execute.lto_priv.141+0x60>)
 80043d4:	f7ff fb1c 	bl	8003a10 <chSemWait>
    chSemSignal(&sem1);
 80043d8:	4809      	ldr	r0, [pc, #36]	; (8004400 <bmk11_execute.lto_priv.141+0x60>)
 80043da:	f7ff fa81 	bl	80038e0 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80043de:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 80043e0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0e3      	beq.n	80043ae <bmk11_execute.lto_priv.141+0xe>
  test_print("--- Score : ");
 80043e6:	4807      	ldr	r0, [pc, #28]	; (8004404 <bmk11_execute.lto_priv.141+0x64>)
 80043e8:	f7fe f87a 	bl	80024e0 <test_print>
  test_printn(n * 4);
 80043ec:	00a0      	lsls	r0, r4, #2
 80043ee:	f7fe f887 	bl	8002500 <test_printn>
  test_println(" wait+signal/S");
}
 80043f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 80043f6:	4804      	ldr	r0, [pc, #16]	; (8004408 <bmk11_execute.lto_priv.141+0x68>)
 80043f8:	f7fe b852 	b.w	80024a0 <test_println>
 80043fc:	20001111 	.word	0x20001111
 8004400:	200013c0 	.word	0x200013c0
 8004404:	08006d20 	.word	0x08006d20
 8004408:	08006d40 	.word	0x08006d40
 800440c:	00000000 	.word	0x00000000

08004410 <thread3>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread3, p) {
 8004410:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004412:	4c06      	ldr	r4, [pc, #24]	; (800442c <thread3+0x1c>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8004414:	69a3      	ldr	r3, [r4, #24]
 8004416:	7f5b      	ldrb	r3, [r3, #29]

  (void)p;
  while (!chThdShouldTerminateX())
 8004418:	075a      	lsls	r2, r3, #29
 800441a:	d406      	bmi.n	800442a <thread3+0x1a>
    chSemWait(&sem1);
 800441c:	4804      	ldr	r0, [pc, #16]	; (8004430 <thread3+0x20>)
 800441e:	f7ff faf7 	bl	8003a10 <chSemWait>
 8004422:	69a3      	ldr	r3, [r4, #24]
 8004424:	7f5b      	ldrb	r3, [r3, #29]
 */

static THD_FUNCTION(thread3, p) {

  (void)p;
  while (!chThdShouldTerminateX())
 8004426:	075b      	lsls	r3, r3, #29
 8004428:	d5f8      	bpl.n	800441c <thread3+0xc>
 800442a:	bd10      	pop	{r4, pc}
 800442c:	200011a0 	.word	0x200011a0
 8004430:	200013c0 	.word	0x200013c0
	...

08004440 <bmk10_execute.lto_priv.139>:
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
 8004440:	b538      	push	{r3, r4, r5, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 8004442:	f7fd ff65 	bl	8002310 <test_wait_tick>
  test_start_timer(1000);
 8004446:	f7fd f8eb 	bl	8001620 <test_start_timer.constprop.2>
 800444a:	4d15      	ldr	r5, [pc, #84]	; (80044a0 <bmk10_execute.lto_priv.139+0x60>)

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 800444c:	2400      	movs	r4, #0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800444e:	2320      	movs	r3, #32
 8004450:	f383 8811 	msr	BASEPRI, r3

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 8004454:	4813      	ldr	r0, [pc, #76]	; (80044a4 <bmk10_execute.lto_priv.139+0x64>)
 8004456:	2101      	movs	r1, #1
 8004458:	4a13      	ldr	r2, [pc, #76]	; (80044a8 <bmk10_execute.lto_priv.139+0x68>)
 800445a:	2300      	movs	r3, #0
 800445c:	f7ff fd58 	bl	8003f10 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 8004460:	f242 7110 	movw	r1, #10000	; 0x2710
 8004464:	4a10      	ldr	r2, [pc, #64]	; (80044a8 <bmk10_execute.lto_priv.139+0x68>)
 8004466:	2300      	movs	r3, #0
 8004468:	4810      	ldr	r0, [pc, #64]	; (80044ac <bmk10_execute.lto_priv.139+0x6c>)
 800446a:	f7ff fd51 	bl	8003f10 <chVTDoSetI>
    chVTDoResetI(&vt1);
 800446e:	480d      	ldr	r0, [pc, #52]	; (80044a4 <bmk10_execute.lto_priv.139+0x64>)
 8004470:	f7ff fd0e 	bl	8003e90 <chVTDoResetI>
    chVTDoResetI(&vt2);
 8004474:	480d      	ldr	r0, [pc, #52]	; (80044ac <bmk10_execute.lto_priv.139+0x6c>)
 8004476:	f7ff fd0b 	bl	8003e90 <chVTDoResetI>
 800447a:	2300      	movs	r3, #0
 800447c:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004480:	782b      	ldrb	r3, [r5, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 8004482:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0e2      	beq.n	800444e <bmk10_execute.lto_priv.139+0xe>
  test_print("--- Score : ");
 8004488:	4809      	ldr	r0, [pc, #36]	; (80044b0 <bmk10_execute.lto_priv.139+0x70>)
 800448a:	f7fe f829 	bl	80024e0 <test_print>
  test_printn(n * 2);
 800448e:	0060      	lsls	r0, r4, #1
 8004490:	f7fe f836 	bl	8002500 <test_printn>
  test_println(" timers/S");
}
 8004494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 8004498:	4806      	ldr	r0, [pc, #24]	; (80044b4 <bmk10_execute.lto_priv.139+0x74>)
 800449a:	f7fe b801 	b.w	80024a0 <test_println>
 800449e:	bf00      	nop
 80044a0:	20001111 	.word	0x20001111
 80044a4:	20001378 	.word	0x20001378
 80044a8:	080042f1 	.word	0x080042f1
 80044ac:	20001364 	.word	0x20001364
 80044b0:	08006d20 	.word	0x08006d20
 80044b4:	08006d50 	.word	0x08006d50
	...

080044c0 <bmk9_execute.lto_priv.138>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80044c2:	4926      	ldr	r1, [pc, #152]	; (800455c <bmk9_execute.lto_priv.138+0x9c>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80044c4:	4b26      	ldr	r3, [pc, #152]	; (8004560 <bmk9_execute.lto_priv.138+0xa0>)
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80044c6:	2200      	movs	r2, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80044c8:	f101 0010 	add.w	r0, r1, #16
 80044cc:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80044ce:	605b      	str	r3, [r3, #4]
  uint32_t n;
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
 80044d0:	4614      	mov	r4, r2
 80044d2:	6118      	str	r0, [r3, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80044d4:	60d9      	str	r1, [r3, #12]
  iqp->q_rdptr   = bp;
 80044d6:	6199      	str	r1, [r3, #24]
  iqp->q_wrptr   = bp;
 80044d8:	6159      	str	r1, [r3, #20]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80044da:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80044dc:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 80044de:	621a      	str	r2, [r3, #32]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 80044e0:	4617      	mov	r7, r2
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
  test_wait_tick();
 80044e2:	f7fd ff15 	bl	8002310 <test_wait_tick>
  test_start_timer(1000);
 80044e6:	f7fd f89b 	bl	8001620 <test_start_timer.constprop.2>
 80044ea:	4e1e      	ldr	r6, [pc, #120]	; (8004564 <bmk9_execute.lto_priv.138+0xa4>)
 80044ec:	2520      	movs	r5, #32
 80044ee:	f385 8811 	msr	BASEPRI, r5
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 80044f2:	2100      	movs	r1, #0
 80044f4:	481a      	ldr	r0, [pc, #104]	; (8004560 <bmk9_execute.lto_priv.138+0xa0>)
 80044f6:	f7ff faeb 	bl	8003ad0 <chIQPutI>
    chIQPutI(&iq, 1);
 80044fa:	2101      	movs	r1, #1
 80044fc:	4818      	ldr	r0, [pc, #96]	; (8004560 <bmk9_execute.lto_priv.138+0xa0>)
 80044fe:	f7ff fae7 	bl	8003ad0 <chIQPutI>
    chIQPutI(&iq, 2);
 8004502:	2102      	movs	r1, #2
 8004504:	4816      	ldr	r0, [pc, #88]	; (8004560 <bmk9_execute.lto_priv.138+0xa0>)
 8004506:	f7ff fae3 	bl	8003ad0 <chIQPutI>
    chIQPutI(&iq, 3);
 800450a:	2103      	movs	r1, #3
 800450c:	4814      	ldr	r0, [pc, #80]	; (8004560 <bmk9_execute.lto_priv.138+0xa0>)
 800450e:	f7ff fadf 	bl	8003ad0 <chIQPutI>
 8004512:	f387 8811 	msr	BASEPRI, r7
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8004516:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800451a:	4811      	ldr	r0, [pc, #68]	; (8004560 <bmk9_execute.lto_priv.138+0xa0>)
 800451c:	f7ff fdd8 	bl	80040d0 <chIQGetTimeout>
 8004520:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004524:	480e      	ldr	r0, [pc, #56]	; (8004560 <bmk9_execute.lto_priv.138+0xa0>)
 8004526:	f7ff fdd3 	bl	80040d0 <chIQGetTimeout>
 800452a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800452e:	480c      	ldr	r0, [pc, #48]	; (8004560 <bmk9_execute.lto_priv.138+0xa0>)
 8004530:	f7ff fdce 	bl	80040d0 <chIQGetTimeout>
 8004534:	480a      	ldr	r0, [pc, #40]	; (8004560 <bmk9_execute.lto_priv.138+0xa0>)
 8004536:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800453a:	f7ff fdc9 	bl	80040d0 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800453e:	7833      	ldrb	r3, [r6, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 8004540:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0d3      	beq.n	80044ee <bmk9_execute.lto_priv.138+0x2e>
  test_print("--- Score : ");
 8004546:	4808      	ldr	r0, [pc, #32]	; (8004568 <bmk9_execute.lto_priv.138+0xa8>)
 8004548:	f7fd ffca 	bl	80024e0 <test_print>
  test_printn(n * 4);
 800454c:	00a0      	lsls	r0, r4, #2
 800454e:	f7fd ffd7 	bl	8002500 <test_printn>
  test_println(" bytes/S");
}
 8004552:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 8004556:	4805      	ldr	r0, [pc, #20]	; (800456c <bmk9_execute.lto_priv.138+0xac>)
 8004558:	f7fd bfa2 	b.w	80024a0 <test_println>
 800455c:	200013cc 	.word	0x200013cc
 8004560:	2000139c 	.word	0x2000139c
 8004564:	20001111 	.word	0x20001111
 8004568:	08006d20 	.word	0x08006d20
 800456c:	08006d5c 	.word	0x08006d5c

08004570 <bmk8_execute.lto_priv.137>:
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
}

static void bmk8_execute(void) {
 8004570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004574:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004648 <bmk8_execute.lto_priv.137+0xd8>
 8004578:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 800457a:	ac04      	add	r4, sp, #16
 800457c:	2300      	movs	r3, #0
 800457e:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 8004582:	f7fd fec5 	bl	8002310 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004586:	f8d8 3018 	ldr.w	r3, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800458a:	4f2a      	ldr	r7, [pc, #168]	; (8004634 <bmk8_execute.lto_priv.137+0xc4>)
 800458c:	4e2a      	ldr	r6, [pc, #168]	; (8004638 <bmk8_execute.lto_priv.137+0xc8>)
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	4638      	mov	r0, r7
 8004592:	4633      	mov	r3, r6
 8004594:	3a01      	subs	r2, #1
 8004596:	9400      	str	r4, [sp, #0]
 8004598:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800459c:	f7ff f9c0 	bl	8003920 <chThdCreateStatic>
 80045a0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80045a4:	4d25      	ldr	r5, [pc, #148]	; (800463c <bmk8_execute.lto_priv.137+0xcc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	f44f 71a4 	mov.w	r1, #328	; 0x148
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80045ac:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80045ae:	4633      	mov	r3, r6
 80045b0:	3a01      	subs	r2, #1
 80045b2:	9400      	str	r4, [sp, #0]
 80045b4:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80045b8:	f7ff f9b2 	bl	8003920 <chThdCreateStatic>
 80045bc:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80045c0:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	f507 7024 	add.w	r0, r7, #656	; 0x290
 80045c8:	4633      	mov	r3, r6
 80045ca:	3a01      	subs	r2, #1
 80045cc:	9400      	str	r4, [sp, #0]
 80045ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80045d2:	f7ff f9a5 	bl	8003920 <chThdCreateStatic>
 80045d6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80045da:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	f507 7076 	add.w	r0, r7, #984	; 0x3d8
 80045e2:	4633      	mov	r3, r6
 80045e4:	3a01      	subs	r2, #1
 80045e6:	9400      	str	r4, [sp, #0]
 80045e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80045ec:	f7ff f998 	bl	8003920 <chThdCreateStatic>
 80045f0:	f8d8 3018 	ldr.w	r3, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80045f4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80045f8:	689a      	ldr	r2, [r3, #8]
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80045fa:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80045fc:	3a01      	subs	r2, #1
 80045fe:	4633      	mov	r3, r6
 8004600:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 8004604:	9400      	str	r4, [sp, #0]
 8004606:	f7ff f98b 	bl	8003920 <chThdCreateStatic>
 800460a:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 800460c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004610:	f7ff fd86 	bl	8004120 <chThdSleep>
  test_terminate_threads();
 8004614:	f7fd fea4 	bl	8002360 <test_terminate_threads>
  test_wait_threads();
 8004618:	f7fd fe8a 	bl	8002330 <test_wait_threads>

  test_print("--- Score : ");
 800461c:	4808      	ldr	r0, [pc, #32]	; (8004640 <bmk8_execute.lto_priv.137+0xd0>)
 800461e:	f7fd ff5f 	bl	80024e0 <test_print>
  test_printn(n);
 8004622:	9803      	ldr	r0, [sp, #12]
 8004624:	f7fd ff6c 	bl	8002500 <test_printn>
  test_println(" ctxswc/S");
 8004628:	4806      	ldr	r0, [pc, #24]	; (8004644 <bmk8_execute.lto_priv.137+0xd4>)
 800462a:	f7fd ff39 	bl	80024a0 <test_println>
}
 800462e:	b004      	add	sp, #16
 8004630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004634:	20000928 	.word	0x20000928
 8004638:	080046c1 	.word	0x080046c1
 800463c:	200012f4 	.word	0x200012f4
 8004640:	08006d20 	.word	0x08006d20
 8004644:	08006d68 	.word	0x08006d68
 8004648:	200011a0 	.word	0x200011a0
 800464c:	00000000 	.word	0x00000000

08004650 <bmk6_execute.lto_priv.134>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8004650:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004652:	4b12      	ldr	r3, [pc, #72]	; (800469c <bmk6_execute.lto_priv.134+0x4c>)
 8004654:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004656:	699b      	ldr	r3, [r3, #24]

  uint32_t n = 0;
 8004658:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 800465a:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 800465c:	4627      	mov	r7, r4
 800465e:	4e10      	ldr	r6, [pc, #64]	; (80046a0 <bmk6_execute.lto_priv.134+0x50>)

static void bmk6_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 8004660:	3501      	adds	r5, #1
  test_wait_tick();
 8004662:	f7fd fe55 	bl	8002310 <test_wait_tick>
  test_start_timer(1000);
 8004666:	f7fc ffdb 	bl	8001620 <test_start_timer.constprop.2>
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 800466a:	4b0e      	ldr	r3, [pc, #56]	; (80046a4 <bmk6_execute.lto_priv.134+0x54>)
 800466c:	9700      	str	r7, [sp, #0]
 800466e:	480e      	ldr	r0, [pc, #56]	; (80046a8 <bmk6_execute.lto_priv.134+0x58>)
 8004670:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004674:	462a      	mov	r2, r5
 8004676:	f7ff f953 	bl	8003920 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800467a:	7833      	ldrb	r3, [r6, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 800467c:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f3      	beq.n	800466a <bmk6_execute.lto_priv.134+0x1a>
  test_print("--- Score : ");
 8004682:	480a      	ldr	r0, [pc, #40]	; (80046ac <bmk6_execute.lto_priv.134+0x5c>)
 8004684:	f7fd ff2c 	bl	80024e0 <test_print>
  test_printn(n);
 8004688:	4620      	mov	r0, r4
 800468a:	f7fd ff39 	bl	8002500 <test_printn>
  test_println(" threads/S");
 800468e:	4808      	ldr	r0, [pc, #32]	; (80046b0 <bmk6_execute.lto_priv.134+0x60>)
}
 8004690:	b003      	add	sp, #12
 8004692:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8004696:	f7fd bf03 	b.w	80024a0 <test_println>
 800469a:	bf00      	nop
 800469c:	200011a0 	.word	0x200011a0
 80046a0:	20001111 	.word	0x20001111
 80046a4:	08004f91 	.word	0x08004f91
 80046a8:	20000928 	.word	0x20000928
 80046ac:	08006d20 	.word	0x08006d20
 80046b0:	08006d74 	.word	0x08006d74
	...

080046c0 <thread8>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread8, p) {
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	4604      	mov	r4, r0
 80046c4:	4d08      	ldr	r5, [pc, #32]	; (80046e8 <thread8+0x28>)

  do {
    chThdYield();
 80046c6:	f7ff f87b 	bl	80037c0 <chThdYield>
    chThdYield();
 80046ca:	f7ff f879 	bl	80037c0 <chThdYield>
    chThdYield();
 80046ce:	f7ff f877 	bl	80037c0 <chThdYield>
    chThdYield();
 80046d2:	f7ff f875 	bl	80037c0 <chThdYield>
    (*(uint32_t *)p) += 4;
 80046d6:	6823      	ldr	r3, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80046d8:	69aa      	ldr	r2, [r5, #24]
 80046da:	3304      	adds	r3, #4
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	7f53      	ldrb	r3, [r2, #29]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 80046e0:	075b      	lsls	r3, r3, #29
 80046e2:	d5f0      	bpl.n	80046c6 <thread8+0x6>
}
 80046e4:	bd38      	pop	{r3, r4, r5, pc}
 80046e6:	bf00      	nop
 80046e8:	200011a0 	.word	0x200011a0
 80046ec:	00000000 	.word	0x00000000

080046f0 <bmk7_execute.lto_priv.136>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 80046f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80046f4:	4e3a      	ldr	r6, [pc, #232]	; (80047e0 <bmk7_execute.lto_priv.136+0xf0>)
 80046f6:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80046f8:	69b3      	ldr	r3, [r6, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 80046fa:	2400      	movs	r4, #0
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004702:	3205      	adds	r2, #5
 8004704:	4b37      	ldr	r3, [pc, #220]	; (80047e4 <bmk7_execute.lto_priv.136+0xf4>)
 8004706:	4838      	ldr	r0, [pc, #224]	; (80047e8 <bmk7_execute.lto_priv.136+0xf8>)
 8004708:	9400      	str	r4, [sp, #0]
 800470a:	f7ff f909 	bl	8003920 <chThdCreateStatic>
 800470e:	69b3      	ldr	r3, [r6, #24]
 8004710:	4d36      	ldr	r5, [pc, #216]	; (80047ec <bmk7_execute.lto_priv.136+0xfc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8004718:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 800471a:	3204      	adds	r2, #4
 800471c:	4b31      	ldr	r3, [pc, #196]	; (80047e4 <bmk7_execute.lto_priv.136+0xf4>)
 800471e:	9400      	str	r4, [sp, #0]
 8004720:	4833      	ldr	r0, [pc, #204]	; (80047f0 <bmk7_execute.lto_priv.136+0x100>)
 8004722:	f7ff f8fd 	bl	8003920 <chThdCreateStatic>
 8004726:	69b3      	ldr	r3, [r6, #24]
 8004728:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004730:	3203      	adds	r2, #3
 8004732:	4b2c      	ldr	r3, [pc, #176]	; (80047e4 <bmk7_execute.lto_priv.136+0xf4>)
 8004734:	482f      	ldr	r0, [pc, #188]	; (80047f4 <bmk7_execute.lto_priv.136+0x104>)
 8004736:	9400      	str	r4, [sp, #0]
 8004738:	f7ff f8f2 	bl	8003920 <chThdCreateStatic>
 800473c:	69b3      	ldr	r3, [r6, #24]
 800473e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004746:	3202      	adds	r2, #2
 8004748:	4b26      	ldr	r3, [pc, #152]	; (80047e4 <bmk7_execute.lto_priv.136+0xf4>)
 800474a:	482b      	ldr	r0, [pc, #172]	; (80047f8 <bmk7_execute.lto_priv.136+0x108>)
 800474c:	9400      	str	r4, [sp, #0]
 800474e:	f7ff f8e7 	bl	8003920 <chThdCreateStatic>
 8004752:	69b3      	ldr	r3, [r6, #24]
 8004754:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800475c:	3201      	adds	r2, #1
 800475e:	4b21      	ldr	r3, [pc, #132]	; (80047e4 <bmk7_execute.lto_priv.136+0xf4>)
 8004760:	4826      	ldr	r0, [pc, #152]	; (80047fc <bmk7_execute.lto_priv.136+0x10c>)
 8004762:	9400      	str	r4, [sp, #0]
 8004764:	f7ff f8dc 	bl	8003920 <chThdCreateStatic>
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8004768:	46a1      	mov	r9, r4
 800476a:	6128      	str	r0, [r5, #16]

  n = 0;
  test_wait_tick();
 800476c:	f7fd fdd0 	bl	8002310 <test_wait_tick>
  test_start_timer(1000);
 8004770:	f7fc ff56 	bl	8001620 <test_start_timer.constprop.2>
 8004774:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004810 <bmk7_execute.lto_priv.136+0x120>
 8004778:	2720      	movs	r7, #32
 800477a:	2620      	movs	r6, #32
 800477c:	f387 8811 	msr	BASEPRI, r7
 8004780:	481f      	ldr	r0, [pc, #124]	; (8004800 <bmk7_execute.lto_priv.136+0x110>)
 8004782:	2100      	movs	r1, #0
 8004784:	f7ff fb44 	bl	8003e10 <chSemResetI>
 8004788:	2500      	movs	r5, #0
  chSchRescheduleS();
 800478a:	f7ff f851 	bl	8003830 <chSchRescheduleS>
 800478e:	f389 8811 	msr	BASEPRI, r9
    chSemReset(&sem1, 0);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004792:	f898 3000 	ldrb.w	r3, [r8]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 8004796:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0ee      	beq.n	800477a <bmk7_execute.lto_priv.136+0x8a>
  test_terminate_threads();
 800479c:	f7fd fde0 	bl	8002360 <test_terminate_threads>
 80047a0:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 80047a4:	4816      	ldr	r0, [pc, #88]	; (8004800 <bmk7_execute.lto_priv.136+0x110>)
 80047a6:	4629      	mov	r1, r5
 80047a8:	f7ff fb32 	bl	8003e10 <chSemResetI>
  chSchRescheduleS();
 80047ac:	f7ff f840 	bl	8003830 <chSchRescheduleS>
 80047b0:	f385 8811 	msr	BASEPRI, r5
  chSemReset(&sem1, 0);
  test_wait_threads();
 80047b4:	f7fd fdbc 	bl	8002330 <test_wait_threads>

  test_print("--- Score : ");
 80047b8:	4812      	ldr	r0, [pc, #72]	; (8004804 <bmk7_execute.lto_priv.136+0x114>)
 80047ba:	f7fd fe91 	bl	80024e0 <test_print>
  test_printn(n);
 80047be:	4620      	mov	r0, r4
 80047c0:	f7fd fe9e 	bl	8002500 <test_printn>
  test_print(" reschedules/S, ");
 80047c4:	4810      	ldr	r0, [pc, #64]	; (8004808 <bmk7_execute.lto_priv.136+0x118>)
 80047c6:	f7fd fe8b 	bl	80024e0 <test_print>
  test_printn(n * 6);
 80047ca:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80047ce:	0040      	lsls	r0, r0, #1
 80047d0:	f7fd fe96 	bl	8002500 <test_printn>
  test_println(" ctxswc/S");
 80047d4:	480d      	ldr	r0, [pc, #52]	; (800480c <bmk7_execute.lto_priv.136+0x11c>)
}
 80047d6:	b003      	add	sp, #12
 80047d8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 80047dc:	f7fd be60 	b.w	80024a0 <test_println>
 80047e0:	200011a0 	.word	0x200011a0
 80047e4:	08004411 	.word	0x08004411
 80047e8:	20000928 	.word	0x20000928
 80047ec:	200012f4 	.word	0x200012f4
 80047f0:	20000a70 	.word	0x20000a70
 80047f4:	20000bb8 	.word	0x20000bb8
 80047f8:	20000d00 	.word	0x20000d00
 80047fc:	20000e48 	.word	0x20000e48
 8004800:	200013c0 	.word	0x200013c0
 8004804:	08006d20 	.word	0x08006d20
 8004808:	08006d80 	.word	0x08006d80
 800480c:	08006d68 	.word	0x08006d68
 8004810:	20001111 	.word	0x20001111
	...

08004820 <bmk5_execute.lto_priv.133>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 8004820:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004822:	4b13      	ldr	r3, [pc, #76]	; (8004870 <bmk5_execute.lto_priv.133+0x50>)
 8004824:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004826:	699b      	ldr	r3, [r3, #24]

  uint32_t n = 0;
 8004828:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 800482a:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 800482c:	4627      	mov	r7, r4
 800482e:	4e11      	ldr	r6, [pc, #68]	; (8004874 <bmk5_execute.lto_priv.133+0x54>)

static void bmk5_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8004830:	3d01      	subs	r5, #1
  test_wait_tick();
 8004832:	f7fd fd6d 	bl	8002310 <test_wait_tick>
  test_start_timer(1000);
 8004836:	f7fc fef3 	bl	8001620 <test_start_timer.constprop.2>
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 800483a:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <bmk5_execute.lto_priv.133+0x58>)
 800483c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004840:	462a      	mov	r2, r5
 8004842:	9700      	str	r7, [sp, #0]
 8004844:	480d      	ldr	r0, [pc, #52]	; (800487c <bmk5_execute.lto_priv.133+0x5c>)
 8004846:	f7ff f86b 	bl	8003920 <chThdCreateStatic>
 800484a:	f7ff f909 	bl	8003a60 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800484e:	7833      	ldrb	r3, [r6, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 8004850:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f1      	beq.n	800483a <bmk5_execute.lto_priv.133+0x1a>
  test_print("--- Score : ");
 8004856:	480a      	ldr	r0, [pc, #40]	; (8004880 <bmk5_execute.lto_priv.133+0x60>)
 8004858:	f7fd fe42 	bl	80024e0 <test_print>
  test_printn(n);
 800485c:	4620      	mov	r0, r4
 800485e:	f7fd fe4f 	bl	8002500 <test_printn>
  test_println(" threads/S");
 8004862:	4808      	ldr	r0, [pc, #32]	; (8004884 <bmk5_execute.lto_priv.133+0x64>)
}
 8004864:	b003      	add	sp, #12
 8004866:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 800486a:	f7fd be19 	b.w	80024a0 <test_println>
 800486e:	bf00      	nop
 8004870:	200011a0 	.word	0x200011a0
 8004874:	20001111 	.word	0x20001111
 8004878:	08004f91 	.word	0x08004f91
 800487c:	20000928 	.word	0x20000928
 8004880:	08006d20 	.word	0x08006d20
 8004884:	08006d74 	.word	0x08006d74
	...

08004890 <bmk4_execute.lto_priv.132>:
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
  chSysUnlock();
}

static void bmk4_execute(void) {
 8004890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004894:	4b25      	ldr	r3, [pc, #148]	; (800492c <bmk4_execute.lto_priv.132+0x9c>)
 8004896:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004898:	699b      	ldr	r3, [r3, #24]
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800489a:	2500      	movs	r5, #0
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80048a2:	3201      	adds	r2, #1
 80048a4:	4b22      	ldr	r3, [pc, #136]	; (8004930 <bmk4_execute.lto_priv.132+0xa0>)
 80048a6:	4823      	ldr	r0, [pc, #140]	; (8004934 <bmk4_execute.lto_priv.132+0xa4>)
 80048a8:	9500      	str	r5, [sp, #0]
 80048aa:	f7ff f839 	bl	8003920 <chThdCreateStatic>
 80048ae:	4b22      	ldr	r3, [pc, #136]	; (8004938 <bmk4_execute.lto_priv.132+0xa8>)
 80048b0:	4604      	mov	r4, r0
 80048b2:	6018      	str	r0, [r3, #0]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 80048b4:	46aa      	mov	sl, r5
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 80048b6:	f7fd fd2b 	bl	8002310 <test_wait_tick>
  test_start_timer(1000);
 80048ba:	f7fc feb1 	bl	8001620 <test_start_timer.constprop.2>
 80048be:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8004944 <bmk4_execute.lto_priv.132+0xb4>
 80048c2:	f04f 0820 	mov.w	r8, #32
 80048c6:	2720      	movs	r7, #32
 80048c8:	f388 8811 	msr	BASEPRI, r8
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 80048cc:	2100      	movs	r1, #0
 80048ce:	4620      	mov	r0, r4
 80048d0:	f7fe ffd6 	bl	8003880 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 80048d4:	4620      	mov	r0, r4
 80048d6:	2100      	movs	r1, #0
 80048d8:	f7fe ffd2 	bl	8003880 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 80048dc:	4620      	mov	r0, r4
 80048de:	2100      	movs	r1, #0
 80048e0:	f7fe ffce 	bl	8003880 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 80048e4:	4620      	mov	r0, r4
 80048e6:	2100      	movs	r1, #0
 80048e8:	f7fe ffca 	bl	8003880 <chSchWakeupS>
 80048ec:	2600      	movs	r6, #0
 80048ee:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80048f2:	f899 3000 	ldrb.w	r3, [r9]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 80048f6:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0e4      	beq.n	80048c6 <bmk4_execute.lto_priv.132+0x36>
 80048fc:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 8004900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004904:	4620      	mov	r0, r4
 8004906:	f7fe ffbb 	bl	8003880 <chSchWakeupS>
 800490a:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();

  test_wait_threads();
 800490e:	f7fd fd0f 	bl	8002330 <test_wait_threads>
  test_print("--- Score : ");
 8004912:	480a      	ldr	r0, [pc, #40]	; (800493c <bmk4_execute.lto_priv.132+0xac>)
 8004914:	f7fd fde4 	bl	80024e0 <test_print>
  test_printn(n * 2);
 8004918:	0068      	lsls	r0, r5, #1
 800491a:	f7fd fdf1 	bl	8002500 <test_printn>
  test_println(" ctxswc/S");
 800491e:	4808      	ldr	r0, [pc, #32]	; (8004940 <bmk4_execute.lto_priv.132+0xb0>)
}
 8004920:	b002      	add	sp, #8
 8004922:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 8004926:	f7fd bdbb 	b.w	80024a0 <test_println>
 800492a:	bf00      	nop
 800492c:	200011a0 	.word	0x200011a0
 8004930:	08004951 	.word	0x08004951
 8004934:	20000928 	.word	0x20000928
 8004938:	200012f4 	.word	0x200012f4
 800493c:	08006d20 	.word	0x08006d20
 8004940:	08006d68 	.word	0x08006d68
 8004944:	20001111 	.word	0x20001111
	...

08004950 <thread4>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004950:	4a07      	ldr	r2, [pc, #28]	; (8004970 <thread4+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

static THD_FUNCTION(thread4, p) {
 8004952:	b510      	push	{r4, lr}
 8004954:	2320      	movs	r3, #32
 8004956:	6994      	ldr	r4, [r2, #24]
 8004958:	f383 8811 	msr	BASEPRI, r3
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 800495c:	2003      	movs	r0, #3
 800495e:	f7ff f81f 	bl	80039a0 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 8004962:	6a23      	ldr	r3, [r4, #32]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0f9      	beq.n	800495c <thread4+0xc>
 8004968:	2300      	movs	r3, #0
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	bd10      	pop	{r4, pc}
 8004970:	200011a0 	.word	0x200011a0
	...

08004980 <thread2.lto_priv.146>:

  chThdExit((msg_t)p);
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static THD_FUNCTION(thread2, p) {
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	2620      	movs	r6, #32
 8004984:	2500      	movs	r5, #0
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 8004986:	f7ff f823 	bl	80039d0 <chMsgWait>
 800498a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800498c:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8004990:	4621      	mov	r1, r4
 8004992:	f7fe ff75 	bl	8003880 <chSchWakeupS>
 8004996:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
 800499a:	2c00      	cmp	r4, #0
 800499c:	d1f3      	bne.n	8004986 <thread2.lto_priv.146+0x6>
}
 800499e:	bd70      	pop	{r4, r5, r6, pc}

080049a0 <msg_loop_test>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 80049a0:	b570      	push	{r4, r5, r6, lr}
 80049a2:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 80049a4:	f7fd fcb4 	bl	8002310 <test_wait_tick>
  test_start_timer(1000);
 80049a8:	f7fc fe3a 	bl	8001620 <test_start_timer.constprop.2>
 80049ac:	4e07      	ldr	r6, [pc, #28]	; (80049cc <msg_loop_test+0x2c>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 80049ae:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 80049b0:	4628      	mov	r0, r5
 80049b2:	2101      	movs	r1, #1
 80049b4:	f7ff f8bc 	bl	8003b30 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80049b8:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 80049ba:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f7      	beq.n	80049b0 <msg_loop_test+0x10>
  (void)chMsgSend(tp, 0);
 80049c0:	4628      	mov	r0, r5
 80049c2:	2100      	movs	r1, #0
 80049c4:	f7ff f8b4 	bl	8003b30 <chMsgSend>
  return n;
}
 80049c8:	4620      	mov	r0, r4
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
 80049cc:	20001111 	.word	0x20001111

080049d0 <bmk3_execute.lto_priv.131>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 80049d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d4:	4f2c      	ldr	r7, [pc, #176]	; (8004a88 <bmk3_execute.lto_priv.131+0xb8>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80049d6:	4e2d      	ldr	r6, [pc, #180]	; (8004a8c <bmk3_execute.lto_priv.131+0xbc>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80049d8:	69bb      	ldr	r3, [r7, #24]
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 80049da:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	2500      	movs	r5, #0
 80049e0:	4630      	mov	r0, r6
 80049e2:	3201      	adds	r2, #1
 80049e4:	9500      	str	r5, [sp, #0]
 80049e6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80049ea:	4b29      	ldr	r3, [pc, #164]	; (8004a90 <bmk3_execute.lto_priv.131+0xc0>)
 80049ec:	f7fe ff98 	bl	8003920 <chThdCreateStatic>
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	4c28      	ldr	r4, [pc, #160]	; (8004a94 <bmk3_execute.lto_priv.131+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8004aa4 <bmk3_execute.lto_priv.131+0xd4>
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80049fa:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 80049fc:	4643      	mov	r3, r8
 80049fe:	3a02      	subs	r2, #2
 8004a00:	9500      	str	r5, [sp, #0]
 8004a02:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8004a06:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004a0a:	f7fe ff89 	bl	8003920 <chThdCreateStatic>
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8004a18:	4643      	mov	r3, r8
 8004a1a:	3a03      	subs	r2, #3
 8004a1c:	9500      	str	r5, [sp, #0]
 8004a1e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004a22:	f7fe ff7d 	bl	8003920 <chThdCreateStatic>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8004a30:	4643      	mov	r3, r8
 8004a32:	3a04      	subs	r2, #4
 8004a34:	9500      	str	r5, [sp, #0]
 8004a36:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004a3a:	f7fe ff71 	bl	8003920 <chThdCreateStatic>
 8004a3e:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8004a40:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004a44:	689a      	ldr	r2, [r3, #8]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8004a46:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8004a48:	3a05      	subs	r2, #5
 8004a4a:	4643      	mov	r3, r8
 8004a4c:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8004a50:	9500      	str	r5, [sp, #0]
 8004a52:	f7fe ff65 	bl	8003920 <chThdCreateStatic>
 8004a56:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 8004a58:	6820      	ldr	r0, [r4, #0]
 8004a5a:	f7ff ffa1 	bl	80049a0 <msg_loop_test>
 8004a5e:	4604      	mov	r4, r0
  test_wait_threads();
 8004a60:	f7fd fc66 	bl	8002330 <test_wait_threads>
  test_print("--- Score : ");
 8004a64:	480c      	ldr	r0, [pc, #48]	; (8004a98 <bmk3_execute.lto_priv.131+0xc8>)
 8004a66:	f7fd fd3b 	bl	80024e0 <test_print>
  test_printn(n);
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f7fd fd48 	bl	8002500 <test_printn>
  test_print(" msgs/S, ");
 8004a70:	480a      	ldr	r0, [pc, #40]	; (8004a9c <bmk3_execute.lto_priv.131+0xcc>)
 8004a72:	f7fd fd35 	bl	80024e0 <test_print>
  test_printn(n << 1);
 8004a76:	0060      	lsls	r0, r4, #1
 8004a78:	f7fd fd42 	bl	8002500 <test_printn>
  test_println(" ctxswc/S");
 8004a7c:	4808      	ldr	r0, [pc, #32]	; (8004aa0 <bmk3_execute.lto_priv.131+0xd0>)
}
 8004a7e:	b002      	add	sp, #8
 8004a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8004a84:	f7fd bd0c 	b.w	80024a0 <test_println>
 8004a88:	200011a0 	.word	0x200011a0
 8004a8c:	20000928 	.word	0x20000928
 8004a90:	08004981 	.word	0x08004981
 8004a94:	200012f4 	.word	0x200012f4
 8004a98:	08006d20 	.word	0x08006d20
 8004a9c:	08006d94 	.word	0x08006d94
 8004aa0:	08006d68 	.word	0x08006d68
 8004aa4:	08004f91 	.word	0x08004f91
	...

08004ab0 <bmk2_execute.lto_priv.130>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 8004ab0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004ab2:	4a13      	ldr	r2, [pc, #76]	; (8004b00 <bmk2_execute.lto_priv.130+0x50>)
 8004ab4:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004ab6:	6992      	ldr	r2, [r2, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8004ab8:	2300      	movs	r3, #0
 8004aba:	6892      	ldr	r2, [r2, #8]
 8004abc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004ac0:	3201      	adds	r2, #1
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	480f      	ldr	r0, [pc, #60]	; (8004b04 <bmk2_execute.lto_priv.130+0x54>)
 8004ac6:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <bmk2_execute.lto_priv.130+0x58>)
 8004ac8:	f7fe ff2a 	bl	8003920 <chThdCreateStatic>
 8004acc:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <bmk2_execute.lto_priv.130+0x5c>)
 8004ace:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8004ad0:	f7ff ff66 	bl	80049a0 <msg_loop_test>
 8004ad4:	4604      	mov	r4, r0
  test_wait_threads();
 8004ad6:	f7fd fc2b 	bl	8002330 <test_wait_threads>
  test_print("--- Score : ");
 8004ada:	480d      	ldr	r0, [pc, #52]	; (8004b10 <bmk2_execute.lto_priv.130+0x60>)
 8004adc:	f7fd fd00 	bl	80024e0 <test_print>
  test_printn(n);
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f7fd fd0d 	bl	8002500 <test_printn>
  test_print(" msgs/S, ");
 8004ae6:	480b      	ldr	r0, [pc, #44]	; (8004b14 <bmk2_execute.lto_priv.130+0x64>)
 8004ae8:	f7fd fcfa 	bl	80024e0 <test_print>
  test_printn(n << 1);
 8004aec:	0060      	lsls	r0, r4, #1
 8004aee:	f7fd fd07 	bl	8002500 <test_printn>
  test_println(" ctxswc/S");
 8004af2:	4809      	ldr	r0, [pc, #36]	; (8004b18 <bmk2_execute.lto_priv.130+0x68>)
}
 8004af4:	b002      	add	sp, #8
 8004af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8004afa:	f7fd bcd1 	b.w	80024a0 <test_println>
 8004afe:	bf00      	nop
 8004b00:	200011a0 	.word	0x200011a0
 8004b04:	20000928 	.word	0x20000928
 8004b08:	08004981 	.word	0x08004981
 8004b0c:	200012f4 	.word	0x200012f4
 8004b10:	08006d20 	.word	0x08006d20
 8004b14:	08006d94 	.word	0x08006d94
 8004b18:	08006d68 	.word	0x08006d68
 8004b1c:	00000000 	.word	0x00000000

08004b20 <bmk1_execute.lto_priv.129>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 8004b20:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004b22:	4a13      	ldr	r2, [pc, #76]	; (8004b70 <bmk1_execute.lto_priv.129+0x50>)
 8004b24:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004b26:	6992      	ldr	r2, [r2, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 8004b28:	2300      	movs	r3, #0
 8004b2a:	6892      	ldr	r2, [r2, #8]
 8004b2c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004b30:	3a01      	subs	r2, #1
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	480f      	ldr	r0, [pc, #60]	; (8004b74 <bmk1_execute.lto_priv.129+0x54>)
 8004b36:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <bmk1_execute.lto_priv.129+0x58>)
 8004b38:	f7fe fef2 	bl	8003920 <chThdCreateStatic>
 8004b3c:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <bmk1_execute.lto_priv.129+0x5c>)
 8004b3e:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8004b40:	f7ff ff2e 	bl	80049a0 <msg_loop_test>
 8004b44:	4604      	mov	r4, r0
  test_wait_threads();
 8004b46:	f7fd fbf3 	bl	8002330 <test_wait_threads>
  test_print("--- Score : ");
 8004b4a:	480d      	ldr	r0, [pc, #52]	; (8004b80 <bmk1_execute.lto_priv.129+0x60>)
 8004b4c:	f7fd fcc8 	bl	80024e0 <test_print>
  test_printn(n);
 8004b50:	4620      	mov	r0, r4
 8004b52:	f7fd fcd5 	bl	8002500 <test_printn>
  test_print(" msgs/S, ");
 8004b56:	480b      	ldr	r0, [pc, #44]	; (8004b84 <bmk1_execute.lto_priv.129+0x64>)
 8004b58:	f7fd fcc2 	bl	80024e0 <test_print>
  test_printn(n << 1);
 8004b5c:	0060      	lsls	r0, r4, #1
 8004b5e:	f7fd fccf 	bl	8002500 <test_printn>
  test_println(" ctxswc/S");
 8004b62:	4809      	ldr	r0, [pc, #36]	; (8004b88 <bmk1_execute.lto_priv.129+0x68>)
}
 8004b64:	b002      	add	sp, #8
 8004b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8004b6a:	f7fd bc99 	b.w	80024a0 <test_println>
 8004b6e:	bf00      	nop
 8004b70:	200011a0 	.word	0x200011a0
 8004b74:	20000928 	.word	0x20000928
 8004b78:	08004981 	.word	0x08004981
 8004b7c:	200012f4 	.word	0x200012f4
 8004b80:	08006d20 	.word	0x08006d20
 8004b84:	08006d94 	.word	0x08006d94
 8004b88:	08006d68 	.word	0x08006d68
 8004b8c:	00000000 	.word	0x00000000

08004b90 <sys3_execute.lto_priv.82>:
 * <h2>Description</h2>
 * The chSysIntegrityCheckI() API is invoked in order to asses the state of the
 * system data structures.
 */

static void sys3_execute(void) {
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	2420      	movs	r4, #32
 8004b94:	f384 8811 	msr	BASEPRI, r4
  bool result;

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 8004b98:	2001      	movs	r0, #1
 8004b9a:	f7ff faf1 	bl	8004180 <chSysIntegrityCheckI>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(1, result == false, "ready list check failed");
 8004ba4:	f080 0101 	eor.w	r1, r0, #1
 8004ba8:	b2c9      	uxtb	r1, r1
 8004baa:	2001      	movs	r0, #1
 8004bac:	f7fd fc40 	bl	8002430 <_test_assert>
 8004bb0:	4605      	mov	r5, r0
 8004bb2:	b100      	cbz	r0, 8004bb6 <sys3_execute.lto_priv.82+0x26>
 8004bb4:	bd38      	pop	{r3, r4, r5, pc}
 8004bb6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 8004bba:	2002      	movs	r0, #2
 8004bbc:	f7ff fae0 	bl	8004180 <chSysIntegrityCheckI>
 8004bc0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(2, result == false, "virtual timers list check failed");
 8004bc4:	f080 0101 	eor.w	r1, r0, #1
 8004bc8:	b2c9      	uxtb	r1, r1
 8004bca:	2002      	movs	r0, #2
 8004bcc:	f7fd fc30 	bl	8002430 <_test_assert>
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	d1ee      	bne.n	8004bb4 <sys3_execute.lto_priv.82+0x24>
 8004bd6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 8004bda:	2004      	movs	r0, #4
 8004bdc:	f7ff fad0 	bl	8004180 <chSysIntegrityCheckI>
 8004be0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(3, result == false, "registry list check failed");
 8004be4:	f080 0101 	eor.w	r1, r0, #1
 8004be8:	b2c9      	uxtb	r1, r1
 8004bea:	2003      	movs	r0, #3
 8004bec:	f7fd fc20 	bl	8002430 <_test_assert>
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d1de      	bne.n	8004bb4 <sys3_execute.lto_priv.82+0x24>
 8004bf6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 8004bfa:	2008      	movs	r0, #8
 8004bfc:	f7ff fac0 	bl	8004180 <chSysIntegrityCheckI>
 8004c00:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
}
 8004c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  test_assert(3, result == false, "registry list check failed");

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
 8004c08:	f080 0101 	eor.w	r1, r0, #1
 8004c0c:	b2c9      	uxtb	r1, r1
 8004c0e:	2004      	movs	r0, #4
 8004c10:	f7fd bc0e 	b.w	8002430 <_test_assert>
	...

08004c20 <sys1_execute.lto_priv.80>:
  sts = chSysGetStatusAndLockX();
  chSysRestoreStatusX(sts);
  chSysUnlockFromISR();
}

static void sys1_execute(void) {
 8004c20:	b510      	push	{r4, lr}
 8004c22:	b086      	sub	sp, #24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c24:	f3ef 8311 	mrs	r3, BASEPRI
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8004c28:	b91b      	cbnz	r3, 8004c32 <sys1_execute.lto_priv.80+0x12>
 8004c2a:	f7ff fa99 	bl	8004160 <chSysGetStatusAndLockX.part.2.lto_priv.149>
 8004c2e:	f7ff fa87 	bl	8004140 <chSysRestoreStatusX.part.3.lto_priv.148>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004c32:	2320      	movs	r3, #32
 8004c34:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c38:	f3ef 8311 	mrs	r3, BASEPRI
 8004c3c:	b91b      	cbnz	r3, 8004c46 <sys1_execute.lto_priv.80+0x26>
 8004c3e:	f7ff fa8f 	bl	8004160 <chSysGetStatusAndLockX.part.2.lto_priv.149>
 8004c42:	f7ff fa7d 	bl	8004140 <chSysRestoreStatusX.part.3.lto_priv.148>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004c46:	2300      	movs	r3, #0
 8004c48:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c4c:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8004c50:	b913      	cbnz	r3, 8004c58 <sys1_execute.lto_priv.80+0x38>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004c52:	2320      	movs	r3, #32
 8004c54:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c58:	f3ef 8311 	mrs	r3, BASEPRI
 8004c5c:	b913      	cbnz	r3, 8004c64 <sys1_execute.lto_priv.80+0x44>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004c5e:	2320      	movs	r3, #32
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	2300      	movs	r3, #0
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f382 8811 	msr	BASEPRI, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c70:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8004c74:	b10a      	cbz	r2, 8004c7a <sys1_execute.lto_priv.80+0x5a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004c76:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c7a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c7e:	b113      	cbz	r3, 8004c86 <sys1_execute.lto_priv.80+0x66>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004c80:	2300      	movs	r3, #0
 8004c82:	f383 8811 	msr	BASEPRI, r3
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->vt_func = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	9304      	str	r3, [sp, #16]
 8004c8a:	2320      	movs	r3, #32
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8004c90:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8004c92:	ac01      	add	r4, sp, #4
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8004c94:	b113      	cbz	r3, 8004c9c <sys1_execute.lto_priv.80+0x7c>
    chVTDoResetI(vtp);
 8004c96:	4620      	mov	r0, r4
 8004c98:	f7ff f8fa 	bl	8003e90 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	4a0b      	ldr	r2, [pc, #44]	; (8004cd0 <sys1_execute.lto_priv.80+0xb0>)
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f7ff f934 	bl	8003f10 <chVTDoSetI>
 8004ca8:	2400      	movs	r4, #0
 8004caa:	f384 8811 	msr	BASEPRI, r4
  chSysUnconditionalUnlock();

  /*/Testing from ISR context using a virtual timer.*/
  chVTObjectInit(&vt);
  chVTSet(&vt, 1, vtcb, NULL);
  chThdSleep(10);
 8004cae:	200a      	movs	r0, #10
 8004cb0:	f7ff fa36 	bl	8004120 <chThdSleep>
 8004cb4:	2320      	movs	r3, #32
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	9904      	ldr	r1, [sp, #16]
 8004cbc:	f384 8811 	msr	BASEPRI, r4

  test_assert(1, chVTIsArmed(&vt) == false, "timer still armed");
 8004cc0:	fab1 f181 	clz	r1, r1
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	0949      	lsrs	r1, r1, #5
 8004cc8:	f7fd fbb2 	bl	8002430 <_test_assert>
}
 8004ccc:	b006      	add	sp, #24
 8004cce:	bd10      	pop	{r4, pc}
 8004cd0:	08004ce1 	.word	0x08004ce1
	...

08004ce0 <vtcb>:
 *
 * <h2>Description</h2>
 * The critical zones API is invoked for coverage.
 */

static void vtcb(void *p) {
 8004ce0:	b508      	push	{r3, lr}
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f382 8811 	msr	BASEPRI, r2
 8004cee:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cf2:	f3ef 8311 	mrs	r3, BASEPRI
 8004cf6:	b91b      	cbnz	r3, 8004d00 <vtcb+0x20>
 8004cf8:	f7ff fa32 	bl	8004160 <chSysGetStatusAndLockX.part.2.lto_priv.149>
 8004cfc:	f7ff fa20 	bl	8004140 <chSysRestoreStatusX.part.3.lto_priv.148>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004d00:	2300      	movs	r3, #0
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	bd08      	pop	{r3, pc}
	...

08004d10 <thread2.lto_priv.145>:
}

static THD_FUNCTION(thread2, p) {

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8004d10:	4802      	ldr	r0, [pc, #8]	; (8004d1c <thread2.lto_priv.145+0xc>)
 8004d12:	2100      	movs	r1, #0
 8004d14:	22c8      	movs	r2, #200	; 0xc8
 8004d16:	f7fd be53 	b.w	80029c0 <chOQPutTimeout>
 8004d1a:	bf00      	nop
 8004d1c:	2000085c 	.word	0x2000085c

08004d20 <queues2_execute.lto_priv.128>:
}

static void queues2_execute(void) {
 8004d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d24:	2320      	movs	r3, #32
 8004d26:	b082      	sub	sp, #8
 8004d28:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8004d2c:	4f8f      	ldr	r7, [pc, #572]	; (8004f6c <queues2_execute.lto_priv.128+0x24c>)
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d05d      	beq.n	8004df2 <queues2_execute.lto_priv.128+0xd2>
 8004d36:	2100      	movs	r1, #0
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 8004d38:	2001      	movs	r0, #1
 8004d3a:	f7fd fb79 	bl	8002430 <_test_assert>
 8004d3e:	bbb8      	cbnz	r0, 8004db0 <queues2_execute.lto_priv.128+0x90>
 8004d40:	f380 8811 	msr	BASEPRI, r0
 8004d44:	2441      	movs	r4, #65	; 0x41
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 8004d46:	4d89      	ldr	r5, [pc, #548]	; (8004f6c <queues2_execute.lto_priv.128+0x24c>)
 8004d48:	4621      	mov	r1, r4
 8004d4a:	3401      	adds	r4, #1
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d52:	b2e4      	uxtb	r4, r4
 8004d54:	f7fd fe34 	bl	80029c0 <chOQPutTimeout>

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8004d58:	2c45      	cmp	r4, #69	; 0x45
 8004d5a:	d1f4      	bne.n	8004d46 <queues2_execute.lto_priv.128+0x26>
 8004d5c:	2620      	movs	r6, #32
 8004d5e:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8004d62:	68a9      	ldr	r1, [r5, #8]
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 8004d64:	2002      	movs	r0, #2
 8004d66:	fab1 f181 	clz	r1, r1
 8004d6a:	0949      	lsrs	r1, r1, #5
 8004d6c:	f7fd fb60 	bl	8002430 <_test_assert>
 8004d70:	4680      	mov	r8, r0
 8004d72:	b9e8      	cbnz	r0, 8004db0 <queues2_execute.lto_priv.128+0x90>
 8004d74:	f380 8811 	msr	BASEPRI, r0
 8004d78:	4682      	mov	sl, r0
 8004d7a:	2404      	movs	r4, #4
 8004d7c:	f04f 0920 	mov.w	r9, #32
 8004d80:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 8004d84:	4d79      	ldr	r5, [pc, #484]	; (8004f6c <queues2_execute.lto_priv.128+0x24c>)
 8004d86:	4628      	mov	r0, r5
 8004d88:	f7fd fd4a 	bl	8002820 <chOQGetI>
 8004d8c:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    test_emit_token(c);
 8004d90:	b2c0      	uxtb	r0, r0
 8004d92:	f7fd fb65 	bl	8002460 <test_emit_token>
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
 8004d96:	3c01      	subs	r4, #1
 8004d98:	d1f0      	bne.n	8004d7c <queues2_execute.lto_priv.128+0x5c>
 8004d9a:	f389 8811 	msr	BASEPRI, r9
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8004d9e:	696a      	ldr	r2, [r5, #20]
 8004da0:	69ab      	ldr	r3, [r5, #24]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d02a      	beq.n	8004dfc <queues2_execute.lto_priv.128+0xdc>
    chSysLock();
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 8004da6:	4641      	mov	r1, r8
 8004da8:	2003      	movs	r0, #3
 8004daa:	f7fd fb41 	bl	8002430 <_test_assert>
 8004dae:	b128      	cbz	r0, 8004dbc <queues2_execute.lto_priv.128+0x9c>
 8004db0:	2300      	movs	r3, #0
 8004db2:	f383 8811 	msr	BASEPRI, r3
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8004db6:	b002      	add	sp, #8
 8004db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dbc:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 8004dc0:	2004      	movs	r0, #4
 8004dc2:	496b      	ldr	r1, [pc, #428]	; (8004f70 <queues2_execute.lto_priv.128+0x250>)
 8004dc4:	f7fd fb0c 	bl	80023e0 <_test_assert_sequence>
 8004dc8:	4604      	mov	r4, r0
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	d1f3      	bne.n	8004db6 <queues2_execute.lto_priv.128+0x96>
 8004dce:	2620      	movs	r6, #32
 8004dd0:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 8004dd4:	4d65      	ldr	r5, [pc, #404]	; (8004f6c <queues2_execute.lto_priv.128+0x24c>)
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f7fd fd22 	bl	8002820 <chOQGetI>
 8004ddc:	3003      	adds	r0, #3
 8004dde:	bf14      	ite	ne
 8004de0:	2100      	movne	r1, #0
 8004de2:	2101      	moveq	r1, #1
 8004de4:	2005      	movs	r0, #5
 8004de6:	f7fd fb23 	bl	8002430 <_test_assert>
 8004dea:	b170      	cbz	r0, 8004e0a <queues2_execute.lto_priv.128+0xea>
 8004dec:	f384 8811 	msr	BASEPRI, r4
 8004df0:	e7e1      	b.n	8004db6 <queues2_execute.lto_priv.128+0x96>
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	3100      	adds	r1, #0
 8004df6:	bf18      	it	ne
 8004df8:	2101      	movne	r1, #1
 8004dfa:	e79d      	b.n	8004d38 <queues2_execute.lto_priv.128+0x18>
 8004dfc:	68ab      	ldr	r3, [r5, #8]
 8004dfe:	f113 0800 	adds.w	r8, r3, #0
 8004e02:	bf18      	it	ne
 8004e04:	f04f 0801 	movne.w	r8, #1
 8004e08:	e7cd      	b.n	8004da6 <queues2_execute.lto_priv.128+0x86>
 8004e0a:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8004e0e:	4959      	ldr	r1, [pc, #356]	; (8004f74 <queues2_execute.lto_priv.128+0x254>)
 8004e10:	4603      	mov	r3, r0
 8004e12:	2208      	movs	r2, #8
 8004e14:	4628      	mov	r0, r5
 8004e16:	f7fd fcb3 	bl	8002780 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8004e1a:	f1a0 0104 	sub.w	r1, r0, #4
 8004e1e:	fab1 f181 	clz	r1, r1
 8004e22:	2006      	movs	r0, #6
 8004e24:	0949      	lsrs	r1, r1, #5
 8004e26:	f7fd fb03 	bl	8002430 <_test_assert>
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d1c2      	bne.n	8004db6 <queues2_execute.lto_priv.128+0x96>
 8004e30:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8004e34:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 8004e36:	2007      	movs	r0, #7
 8004e38:	fab1 f181 	clz	r1, r1
 8004e3c:	0949      	lsrs	r1, r1, #5
 8004e3e:	f7fd faf7 	bl	8002430 <_test_assert>
 8004e42:	4680      	mov	r8, r0
 8004e44:	2800      	cmp	r0, #0
 8004e46:	d1d1      	bne.n	8004dec <queues2_execute.lto_priv.128+0xcc>
 8004e48:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004e4c:	4b4a      	ldr	r3, [pc, #296]	; (8004f78 <queues2_execute.lto_priv.128+0x258>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8004e4e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	4849      	ldr	r0, [pc, #292]	; (8004f7c <queues2_execute.lto_priv.128+0x25c>)
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	4b49      	ldr	r3, [pc, #292]	; (8004f80 <queues2_execute.lto_priv.128+0x260>)
 8004e5a:	3201      	adds	r2, #1
 8004e5c:	f8cd 8000 	str.w	r8, [sp]
 8004e60:	f7fe fd5e 	bl	8003920 <chThdCreateStatic>
 8004e64:	4b47      	ldr	r3, [pc, #284]	; (8004f84 <queues2_execute.lto_priv.128+0x264>)
 8004e66:	6018      	str	r0, [r3, #0]
 8004e68:	f386 8811 	msr	BASEPRI, r6
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 8004e6c:	68e9      	ldr	r1, [r5, #12]
 8004e6e:	692b      	ldr	r3, [r5, #16]
 8004e70:	68aa      	ldr	r2, [r5, #8]
 8004e72:	1a5b      	subs	r3, r3, r1
 8004e74:	1a99      	subs	r1, r3, r2
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 8004e76:	f1a1 0104 	sub.w	r1, r1, #4
 8004e7a:	fab1 f181 	clz	r1, r1
 8004e7e:	2008      	movs	r0, #8
 8004e80:	0949      	lsrs	r1, r1, #5
 8004e82:	f7fd fad5 	bl	8002430 <_test_assert>
 8004e86:	b110      	cbz	r0, 8004e8e <queues2_execute.lto_priv.128+0x16e>
 8004e88:	f388 8811 	msr	BASEPRI, r8
 8004e8c:	e793      	b.n	8004db6 <queues2_execute.lto_priv.128+0x96>
 8004e8e:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8004e92:	f7fd fa4d 	bl	8002330 <test_wait_threads>
 8004e96:	f386 8811 	msr	BASEPRI, r6
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8004e9a:	68e9      	ldr	r1, [r5, #12]
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8004e9c:	692a      	ldr	r2, [r5, #16]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8004e9e:	682b      	ldr	r3, [r5, #0]
 8004ea0:	1a52      	subs	r2, r2, r1
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (queue_notempty(tqp)) {
 8004ea2:	42ab      	cmp	r3, r5
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8004ea4:	61a9      	str	r1, [r5, #24]
  oqp->q_wrptr = oqp->q_buffer;
 8004ea6:	6169      	str	r1, [r5, #20]
  oqp->q_counter = chQSizeX(oqp);
 8004ea8:	60aa      	str	r2, [r5, #8]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8004eaa:	bf18      	it	ne
 8004eac:	f06f 0401 	mvnne.w	r4, #1
 8004eb0:	d009      	beq.n	8004ec6 <queues2_execute.lto_priv.128+0x1a6>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8004eb2:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 8004eb4:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8004eb6:	6057      	str	r7, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8004eb8:	603a      	str	r2, [r7, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8004eba:	621c      	str	r4, [r3, #32]
  (void) chSchReadyI(tp);
 8004ebc:	f7fe fdf0 	bl	8003aa0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	42bb      	cmp	r3, r7
 8004ec4:	d1f5      	bne.n	8004eb2 <queues2_execute.lto_priv.128+0x192>
 8004ec6:	2500      	movs	r5, #0
 8004ec8:	f385 8811 	msr	BASEPRI, r5
 8004ecc:	2620      	movs	r6, #32
 8004ece:	f386 8811 	msr	BASEPRI, r6
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	1a9b      	subs	r3, r3, r2

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 8004eda:	1a59      	subs	r1, r3, r1
 8004edc:	fab1 f181 	clz	r1, r1
 8004ee0:	2009      	movs	r0, #9
 8004ee2:	0949      	lsrs	r1, r1, #5
 8004ee4:	f7fd faa4 	bl	8002430 <_test_assert>
 8004ee8:	4c20      	ldr	r4, [pc, #128]	; (8004f6c <queues2_execute.lto_priv.128+0x24c>)
 8004eea:	4603      	mov	r3, r0
 8004eec:	b110      	cbz	r0, 8004ef4 <queues2_execute.lto_priv.128+0x1d4>
 8004eee:	f385 8811 	msr	BASEPRI, r5
 8004ef2:	e760      	b.n	8004db6 <queues2_execute.lto_priv.128+0x96>
 8004ef4:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8004ef8:	491e      	ldr	r1, [pc, #120]	; (8004f74 <queues2_execute.lto_priv.128+0x254>)
 8004efa:	2202      	movs	r2, #2
 8004efc:	4620      	mov	r0, r4
 8004efe:	f7fd fc3f 	bl	8002780 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8004f02:	3802      	subs	r0, #2
 8004f04:	4241      	negs	r1, r0
 8004f06:	4141      	adcs	r1, r0
 8004f08:	200a      	movs	r0, #10
 8004f0a:	f7fd fa91 	bl	8002430 <_test_assert>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2800      	cmp	r0, #0
 8004f12:	f47f af50 	bne.w	8004db6 <queues2_execute.lto_priv.128+0x96>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8004f16:	4917      	ldr	r1, [pc, #92]	; (8004f74 <queues2_execute.lto_priv.128+0x254>)
 8004f18:	2202      	movs	r2, #2
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f7fd fc30 	bl	8002780 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8004f20:	1e82      	subs	r2, r0, #2
 8004f22:	4251      	negs	r1, r2
 8004f24:	4151      	adcs	r1, r2
 8004f26:	200b      	movs	r0, #11
 8004f28:	f7fd fa82 	bl	8002430 <_test_assert>
 8004f2c:	4605      	mov	r5, r0
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	f47f af41 	bne.w	8004db6 <queues2_execute.lto_priv.128+0x96>
 8004f34:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8004f38:	68a1      	ldr	r1, [r4, #8]
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 8004f3a:	200c      	movs	r0, #12
 8004f3c:	fab1 f181 	clz	r1, r1
 8004f40:	0949      	lsrs	r1, r1, #5
 8004f42:	f7fd fa75 	bl	8002430 <_test_assert>
 8004f46:	4601      	mov	r1, r0
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d1d0      	bne.n	8004eee <queues2_execute.lto_priv.128+0x1ce>
 8004f4c:	f380 8811 	msr	BASEPRI, r0

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8004f50:	220a      	movs	r2, #10
 8004f52:	4620      	mov	r0, r4
 8004f54:	f7fd fd34 	bl	80029c0 <chOQPutTimeout>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	4259      	negs	r1, r3
 8004f5c:	4159      	adcs	r1, r3
 8004f5e:	200d      	movs	r0, #13
}
 8004f60:	b002      	add	sp, #8
 8004f62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8004f66:	f7fd ba63 	b.w	8002430 <_test_assert>
 8004f6a:	bf00      	nop
 8004f6c:	2000085c 	.word	0x2000085c
 8004f70:	08006da0 	.word	0x08006da0
 8004f74:	20000a70 	.word	0x20000a70
 8004f78:	200011a0 	.word	0x200011a0
 8004f7c:	20000928 	.word	0x20000928
 8004f80:	08004d11 	.word	0x08004d11
 8004f84:	200012f4 	.word	0x200012f4
	...

08004f90 <thread1>:
static mutex_t mtx1;
#endif

static THD_FUNCTION(thread1, p) {

  chThdExit((msg_t)p);
 8004f90:	f7fe bf56 	b.w	8003e40 <chThdExit>
	...

08004fa0 <notify.lto_priv.147>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
	...

08004fb0 <queues2_setup.lto_priv.127>:
 * This test case tests synchronous and asynchronous operations on an
 * @p OutputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues2_setup(void) {
 8004fb0:	b430      	push	{r4, r5}
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8004fb2:	4a08      	ldr	r2, [pc, #32]	; (8004fd4 <queues2_setup.lto_priv.127+0x24>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004fb4:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <queues2_setup.lto_priv.127+0x28>)
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8004fb6:	4809      	ldr	r0, [pc, #36]	; (8004fdc <queues2_setup.lto_priv.127+0x2c>)
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8004fb8:	1d15      	adds	r5, r2, #4
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8004fba:	2404      	movs	r4, #4
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8004fbc:	2100      	movs	r1, #0
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8004fbe:	611d      	str	r5, [r3, #16]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8004fc0:	609c      	str	r4, [r3, #8]
 8004fc2:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8004fc4:	605b      	str	r3, [r3, #4]
  oqp->q_buffer  = bp;
 8004fc6:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 8004fc8:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 8004fca:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8004fcc:	61d8      	str	r0, [r3, #28]
  oqp->q_link    = link;
 8004fce:	6219      	str	r1, [r3, #32]

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 8004fd0:	bc30      	pop	{r4, r5}
 8004fd2:	4770      	bx	lr
 8004fd4:	20000928 	.word	0x20000928
 8004fd8:	2000085c 	.word	0x2000085c
 8004fdc:	08004fa1 	.word	0x08004fa1

08004fe0 <queues1_setup.lto_priv.125>:
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8004fe0:	4a08      	ldr	r2, [pc, #32]	; (8005004 <queues1_setup.lto_priv.125+0x24>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <queues1_setup.lto_priv.125+0x28>)
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8004fe4:	4809      	ldr	r0, [pc, #36]	; (800500c <queues1_setup.lto_priv.125+0x2c>)
 * This test case tests synchronous and asynchronous operations on an
 * @p InputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues1_setup(void) {
 8004fe6:	b410      	push	{r4}
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8004fe8:	2100      	movs	r1, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8004fea:	1d14      	adds	r4, r2, #4
 8004fec:	611c      	str	r4, [r3, #16]
 8004fee:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8004ff0:	605b      	str	r3, [r3, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8004ff2:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 8004ff4:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 8004ff6:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8004ff8:	61d8      	str	r0, [r3, #28]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8004ffa:	6099      	str	r1, [r3, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8004ffc:	6219      	str	r1, [r3, #32]

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 8004ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	20000928 	.word	0x20000928
 8005008:	2000088c 	.word	0x2000088c
 800500c:	08004fa1 	.word	0x08004fa1

08005010 <dyn3_setup.lto_priv.123>:
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8005010:	4909      	ldr	r1, [pc, #36]	; (8005038 <dyn3_setup.lto_priv.123+0x28>)
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
  return found;
}

static void dyn3_setup(void) {
 8005012:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8005014:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8005016:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 800501a:	4b08      	ldr	r3, [pc, #32]	; (800503c <dyn3_setup.lto_priv.123+0x2c>)
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 800501c:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005020:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 8005024:	60da      	str	r2, [r3, #12]
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8005026:	6099      	str	r1, [r3, #8]
 8005028:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 800502a:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8005030:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	20000928 	.word	0x20000928
 800503c:	20001320 	.word	0x20001320

08005040 <dyn2_setup.lto_priv.121>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8005040:	4b03      	ldr	r3, [pc, #12]	; (8005050 <dyn2_setup.lto_priv.121+0x10>)
 8005042:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 8005044:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005048:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 800504a:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 800504c:	609a      	str	r2, [r3, #8]
 800504e:	4770      	bx	lr
 8005050:	20000f94 	.word	0x20000f94
	...

08005060 <dyn1_setup.lto_priv.119>:
  heapp->h_free.h.u.next = hp;
 8005060:	4909      	ldr	r1, [pc, #36]	; (8005088 <dyn1_setup.lto_priv.119+0x28>)

  test_emit_token(*(char *)p);
}

#if CH_CFG_USE_HEAP || defined(__DOXYGEN__)
static void dyn1_setup(void) {
 8005062:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8005064:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8005066:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 800506a:	4b08      	ldr	r3, [pc, #32]	; (800508c <dyn1_setup.lto_priv.119+0x2c>)
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 800506c:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005070:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 8005074:	60da      	str	r2, [r3, #12]
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8005076:	6099      	str	r1, [r3, #8]
 8005078:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 800507a:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8005080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	20000928 	.word	0x20000928
 800508c:	20001320 	.word	0x20001320

08005090 <null_provider>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 8005090:	2000      	movs	r0, #0
 8005092:	4770      	bx	lr
	...

080050a0 <pools1_setup.lto_priv.117>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80050a0:	4b03      	ldr	r3, [pc, #12]	; (80050b0 <pools1_setup.lto_priv.117+0x10>)
 80050a2:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 80050a4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80050a8:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80050aa:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 80050ac:	609a      	str	r2, [r3, #8]
 80050ae:	4770      	bx	lr
 80050b0:	20000880 	.word	0x20000880
	...

080050c0 <thread1>:

static THD_FUNCTION(thread1, p) {

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 80050c0:	4801      	ldr	r0, [pc, #4]	; (80050c8 <thread1+0x8>)
 80050c2:	21c8      	movs	r1, #200	; 0xc8
 80050c4:	f7ff b804 	b.w	80040d0 <chIQGetTimeout>
 80050c8:	2000088c 	.word	0x2000088c
 80050cc:	00000000 	.word	0x00000000

080050d0 <thread.lto_priv.68>:
 * one to fail.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 80050d0:	7800      	ldrb	r0, [r0, #0]
 80050d2:	f7fd b9c5 	b.w	8002460 <test_emit_token>
 80050d6:	bf00      	nop
	...

080050e0 <queues1_execute.lto_priv.126>:
}

static void queues1_execute(void) {
 80050e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e4:	2420      	movs	r4, #32
 80050e6:	b082      	sub	sp, #8
 80050e8:	f384 8811 	msr	BASEPRI, r4
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80050ec:	4f98      	ldr	r7, [pc, #608]	; (8005350 <queues1_execute.lto_priv.126+0x270>)
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 80050ee:	2001      	movs	r0, #1
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	fab1 f181 	clz	r1, r1
 80050f6:	0949      	lsrs	r1, r1, #5
 80050f8:	f7fd f99a 	bl	8002430 <_test_assert>
 80050fc:	4606      	mov	r6, r0
 80050fe:	b9e8      	cbnz	r0, 800513c <queues1_execute.lto_priv.126+0x5c>
 8005100:	f380 8811 	msr	BASEPRI, r0
 8005104:	f384 8811 	msr	BASEPRI, r4
 8005108:	2441      	movs	r4, #65	; 0x41

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 800510a:	4d91      	ldr	r5, [pc, #580]	; (8005350 <queues1_execute.lto_priv.126+0x270>)
 800510c:	4621      	mov	r1, r4
 800510e:	3401      	adds	r4, #1
 8005110:	4628      	mov	r0, r5
 8005112:	b2e4      	uxtb	r4, r4
 8005114:	f7fe fcdc 	bl	8003ad0 <chIQPutI>
  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8005118:	2c45      	cmp	r4, #69	; 0x45
 800511a:	d1f6      	bne.n	800510a <queues1_execute.lto_priv.126+0x2a>
 800511c:	2300      	movs	r3, #0
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	2320      	movs	r3, #32
 8005124:	f383 8811 	msr	BASEPRI, r3
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8005128:	69aa      	ldr	r2, [r5, #24]
 800512a:	696b      	ldr	r3, [r5, #20]
 800512c:	429a      	cmp	r2, r3
 800512e:	d03a      	beq.n	80051a6 <queues1_execute.lto_priv.126+0xc6>
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 8005130:	4631      	mov	r1, r6
 8005132:	2002      	movs	r0, #2
 8005134:	f7fd f97c 	bl	8002430 <_test_assert>
 8005138:	4604      	mov	r4, r0
 800513a:	b128      	cbz	r0, 8005148 <queues1_execute.lto_priv.126+0x68>
 800513c:	2300      	movs	r3, #0
 800513e:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8005142:	b002      	add	sp, #8
 8005144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005148:	f380 8811 	msr	BASEPRI, r0
 800514c:	2320      	movs	r3, #32
 800514e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 8005152:	487f      	ldr	r0, [pc, #508]	; (8005350 <queues1_execute.lto_priv.126+0x270>)
 8005154:	4621      	mov	r1, r4
 8005156:	f7fe fcbb 	bl	8003ad0 <chIQPutI>
 800515a:	3004      	adds	r0, #4
 800515c:	bf14      	ite	ne
 800515e:	2100      	movne	r1, #0
 8005160:	2101      	moveq	r1, #1
 8005162:	2003      	movs	r0, #3
 8005164:	f7fd f964 	bl	8002430 <_test_assert>
 8005168:	b9c0      	cbnz	r0, 800519c <queues1_execute.lto_priv.126+0xbc>
 800516a:	f380 8811 	msr	BASEPRI, r0
 800516e:	2404      	movs	r4, #4
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8005170:	4d77      	ldr	r5, [pc, #476]	; (8005350 <queues1_execute.lto_priv.126+0x270>)
 8005172:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005176:	4628      	mov	r0, r5
 8005178:	f7fe ffaa 	bl	80040d0 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 800517c:	b2c0      	uxtb	r0, r0
 800517e:	f7fd f96f 	bl	8002460 <test_emit_token>
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8005182:	3c01      	subs	r4, #1
 8005184:	d1f4      	bne.n	8005170 <queues1_execute.lto_priv.126+0x90>
 8005186:	2620      	movs	r6, #32
 8005188:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800518c:	68a9      	ldr	r1, [r5, #8]
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 800518e:	2004      	movs	r0, #4
 8005190:	fab1 f181 	clz	r1, r1
 8005194:	0949      	lsrs	r1, r1, #5
 8005196:	f7fd f94b 	bl	8002430 <_test_assert>
 800519a:	b148      	cbz	r0, 80051b0 <queues1_execute.lto_priv.126+0xd0>
 800519c:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 80051a0:	b002      	add	sp, #8
 80051a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80051a6:	68ae      	ldr	r6, [r5, #8]
 80051a8:	3600      	adds	r6, #0
 80051aa:	bf18      	it	ne
 80051ac:	2601      	movne	r6, #1
 80051ae:	e7bf      	b.n	8005130 <queues1_execute.lto_priv.126+0x50>
 80051b0:	f384 8811 	msr	BASEPRI, r4

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");
 80051b4:	2005      	movs	r0, #5
 80051b6:	4967      	ldr	r1, [pc, #412]	; (8005354 <queues1_execute.lto_priv.126+0x274>)
 80051b8:	f7fd f912 	bl	80023e0 <_test_assert_sequence>
 80051bc:	2800      	cmp	r0, #0
 80051be:	d1c0      	bne.n	8005142 <queues1_execute.lto_priv.126+0x62>
 80051c0:	f386 8811 	msr	BASEPRI, r6
 80051c4:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 80051c6:	4d62      	ldr	r5, [pc, #392]	; (8005350 <queues1_execute.lto_priv.126+0x270>)
 80051c8:	4621      	mov	r1, r4
 80051ca:	3401      	adds	r4, #1
 80051cc:	4628      	mov	r0, r5
 80051ce:	b2e4      	uxtb	r4, r4
 80051d0:	f7fe fc7e 	bl	8003ad0 <chIQPutI>
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 80051d4:	2c45      	cmp	r4, #69	; 0x45
 80051d6:	d1f6      	bne.n	80051c6 <queues1_execute.lto_priv.126+0xe6>
 80051d8:	2300      	movs	r3, #0
 80051da:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 80051de:	495e      	ldr	r1, [pc, #376]	; (8005358 <queues1_execute.lto_priv.126+0x278>)
 80051e0:	2208      	movs	r2, #8
 80051e2:	4628      	mov	r0, r5
 80051e4:	f7fe ff34 	bl	8004050 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 80051e8:	f1a0 0104 	sub.w	r1, r0, #4
 80051ec:	fab1 f181 	clz	r1, r1
 80051f0:	2006      	movs	r0, #6
 80051f2:	0949      	lsrs	r1, r1, #5
 80051f4:	f7fd f91c 	bl	8002430 <_test_assert>
 80051f8:	4604      	mov	r4, r0
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d1a1      	bne.n	8005142 <queues1_execute.lto_priv.126+0x62>
 80051fe:	2620      	movs	r6, #32
 8005200:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8005204:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 8005206:	2007      	movs	r0, #7
 8005208:	fab1 f181 	clz	r1, r1
 800520c:	0949      	lsrs	r1, r1, #5
 800520e:	f7fd f90f 	bl	8002430 <_test_assert>
 8005212:	2800      	cmp	r0, #0
 8005214:	d1c2      	bne.n	800519c <queues1_execute.lto_priv.126+0xbc>
 8005216:	f380 8811 	msr	BASEPRI, r0
 800521a:	f386 8811 	msr	BASEPRI, r6
 800521e:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8005220:	4d4b      	ldr	r5, [pc, #300]	; (8005350 <queues1_execute.lto_priv.126+0x270>)
 8005222:	4621      	mov	r1, r4
 8005224:	3401      	adds	r4, #1
 8005226:	4628      	mov	r0, r5
 8005228:	b2e4      	uxtb	r4, r4
 800522a:	f7fe fc51 	bl	8003ad0 <chIQPutI>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 800522e:	2c45      	cmp	r4, #69	; 0x45
 8005230:	d1f6      	bne.n	8005220 <queues1_execute.lto_priv.126+0x140>
 8005232:	2300      	movs	r3, #0
 8005234:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8005238:	4947      	ldr	r1, [pc, #284]	; (8005358 <queues1_execute.lto_priv.126+0x278>)
 800523a:	4628      	mov	r0, r5
 800523c:	2202      	movs	r2, #2
 800523e:	f7fe ff07 	bl	8004050 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8005242:	f1a0 0102 	sub.w	r1, r0, #2
 8005246:	fab1 f181 	clz	r1, r1
 800524a:	2008      	movs	r0, #8
 800524c:	0949      	lsrs	r1, r1, #5
 800524e:	f7fd f8ef 	bl	8002430 <_test_assert>
 8005252:	2800      	cmp	r0, #0
 8005254:	f47f af75 	bne.w	8005142 <queues1_execute.lto_priv.126+0x62>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8005258:	4603      	mov	r3, r0
 800525a:	493f      	ldr	r1, [pc, #252]	; (8005358 <queues1_execute.lto_priv.126+0x278>)
 800525c:	2202      	movs	r2, #2
 800525e:	4628      	mov	r0, r5
 8005260:	f7fe fef6 	bl	8004050 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8005264:	f1a0 0102 	sub.w	r1, r0, #2
 8005268:	fab1 f181 	clz	r1, r1
 800526c:	2009      	movs	r0, #9
 800526e:	0949      	lsrs	r1, r1, #5
 8005270:	f7fd f8de 	bl	8002430 <_test_assert>
 8005274:	4680      	mov	r8, r0
 8005276:	2800      	cmp	r0, #0
 8005278:	f47f af63 	bne.w	8005142 <queues1_execute.lto_priv.126+0x62>
 800527c:	2620      	movs	r6, #32
 800527e:	f386 8811 	msr	BASEPRI, r6
 8005282:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 8005284:	200a      	movs	r0, #10
 8005286:	fab1 f181 	clz	r1, r1
 800528a:	0949      	lsrs	r1, r1, #5
 800528c:	f7fd f8d0 	bl	8002430 <_test_assert>
 8005290:	4604      	mov	r4, r0
 8005292:	b110      	cbz	r0, 800529a <queues1_execute.lto_priv.126+0x1ba>
 8005294:	f388 8811 	msr	BASEPRI, r8
 8005298:	e753      	b.n	8005142 <queues1_execute.lto_priv.126+0x62>
 800529a:	f380 8811 	msr	BASEPRI, r0
 800529e:	f386 8811 	msr	BASEPRI, r6

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 80052a2:	4621      	mov	r1, r4
 80052a4:	4628      	mov	r0, r5
 80052a6:	f7fe fc13 	bl	8003ad0 <chIQPutI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80052aa:	682b      	ldr	r3, [r5, #0]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 80052ac:	68ea      	ldr	r2, [r5, #12]
 80052ae:	42ab      	cmp	r3, r5
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 80052b0:	60ac      	str	r4, [r5, #8]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 80052b2:	61aa      	str	r2, [r5, #24]
  iqp->q_wrptr = iqp->q_buffer;
 80052b4:	616a      	str	r2, [r5, #20]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80052b6:	bf18      	it	ne
 80052b8:	f06f 0401 	mvnne.w	r4, #1
 80052bc:	d009      	beq.n	80052d2 <queues1_execute.lto_priv.126+0x1f2>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80052be:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 80052c0:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 80052c2:	6057      	str	r7, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80052c4:	603a      	str	r2, [r7, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80052c6:	621c      	str	r4, [r3, #32]
  (void) chSchReadyI(tp);
 80052c8:	f7fe fbea 	bl	8003aa0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	42bb      	cmp	r3, r7
 80052d0:	d1f5      	bne.n	80052be <queues1_execute.lto_priv.126+0x1de>
 80052d2:	f04f 0800 	mov.w	r8, #0
 80052d6:	f388 8811 	msr	BASEPRI, r8
 80052da:	2620      	movs	r6, #32
 80052dc:	f386 8811 	msr	BASEPRI, r6
 */
static inline size_t chIQGetFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)chQSpaceI(iqp);
 80052e0:	68b9      	ldr	r1, [r7, #8]
  chIQResetI(&iq);
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 80052e2:	200b      	movs	r0, #11
 80052e4:	fab1 f181 	clz	r1, r1
 80052e8:	0949      	lsrs	r1, r1, #5
 80052ea:	f7fd f8a1 	bl	8002430 <_test_assert>
 80052ee:	4d18      	ldr	r5, [pc, #96]	; (8005350 <queues1_execute.lto_priv.126+0x270>)
 80052f0:	4604      	mov	r4, r0
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d1ce      	bne.n	8005294 <queues1_execute.lto_priv.126+0x1b4>
 80052f6:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80052fa:	4b18      	ldr	r3, [pc, #96]	; (800535c <queues1_execute.lto_priv.126+0x27c>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 80052fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	4817      	ldr	r0, [pc, #92]	; (8005360 <queues1_execute.lto_priv.126+0x280>)
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	4b17      	ldr	r3, [pc, #92]	; (8005364 <queues1_execute.lto_priv.126+0x284>)
 8005308:	3201      	adds	r2, #1
 800530a:	9400      	str	r4, [sp, #0]
 800530c:	f7fe fb08 	bl	8003920 <chThdCreateStatic>
 8005310:	4b15      	ldr	r3, [pc, #84]	; (8005368 <queues1_execute.lto_priv.126+0x288>)
 8005312:	6018      	str	r0, [r3, #0]
 8005314:	f386 8811 	msr	BASEPRI, r6
 8005318:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 800531a:	200c      	movs	r0, #12
 800531c:	fab1 f181 	clz	r1, r1
 8005320:	0949      	lsrs	r1, r1, #5
 8005322:	f7fd f885 	bl	8002430 <_test_assert>
 8005326:	2800      	cmp	r0, #0
 8005328:	f47f af38 	bne.w	800519c <queues1_execute.lto_priv.126+0xbc>
 800532c:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8005330:	f7fc fffe 	bl	8002330 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8005334:	4628      	mov	r0, r5
 8005336:	210a      	movs	r1, #10
 8005338:	f7fe feca 	bl	80040d0 <chIQGetTimeout>
 800533c:	1c43      	adds	r3, r0, #1
 800533e:	4259      	negs	r1, r3
 8005340:	4159      	adcs	r1, r3
 8005342:	200d      	movs	r0, #13
}
 8005344:	b002      	add	sp, #8
 8005346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 800534a:	f7fd b871 	b.w	8002430 <_test_assert>
 800534e:	bf00      	nop
 8005350:	2000088c 	.word	0x2000088c
 8005354:	08006da0 	.word	0x08006da0
 8005358:	20000a70 	.word	0x20000a70
 800535c:	200011a0 	.word	0x200011a0
 8005360:	20000928 	.word	0x20000928
 8005364:	080050c1 	.word	0x080050c1
 8005368:	200012f4 	.word	0x200012f4
 800536c:	00000000 	.word	0x00000000

08005370 <regfind>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 8005370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005374:	4680      	mov	r8, r0
 8005376:	2520      	movs	r5, #32
 8005378:	f385 8811 	msr	BASEPRI, r5
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 800537c:	4e10      	ldr	r6, [pc, #64]	; (80053c0 <regfind+0x50>)
 800537e:	f04f 0900 	mov.w	r9, #0
 8005382:	6930      	ldr	r0, [r6, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs++;
 8005384:	7f83      	ldrb	r3, [r0, #30]
 8005386:	3301      	adds	r3, #1
 8005388:	7783      	strb	r3, [r0, #30]
 800538a:	f389 8811 	msr	BASEPRI, r9
  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 800538e:	464f      	mov	r7, r9
 8005390:	e000      	b.n	8005394 <regfind+0x24>

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
 8005392:	4620      	mov	r0, r4
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
 8005394:	4540      	cmp	r0, r8
 8005396:	bf08      	it	eq
 8005398:	f049 0901 	orreq.w	r9, r9, #1
 800539c:	f385 8811 	msr	BASEPRI, r5
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 80053a0:	6904      	ldr	r4, [r0, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 80053a2:	42b4      	cmp	r4, r6
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 80053a4:	bf17      	itett	ne
 80053a6:	7fa3      	ldrbne	r3, [r4, #30]
  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 80053a8:	2400      	moveq	r4, #0
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 80053aa:	3301      	addne	r3, #1
 80053ac:	77a3      	strbne	r3, [r4, #30]
 80053ae:	f387 8811 	msr	BASEPRI, r7
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 80053b2:	f7fe f99d 	bl	80036f0 <chThdRelease>
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
 80053b6:	2c00      	cmp	r4, #0
 80053b8:	d1eb      	bne.n	8005392 <regfind+0x22>
  return found;
}
 80053ba:	4648      	mov	r0, r9
 80053bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053c0:	200011a0 	.word	0x200011a0
	...

080053d0 <dyn3_execute.lto_priv.124>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80053d0:	4b46      	ldr	r3, [pc, #280]	; (80054ec <dyn3_execute.lto_priv.124+0x11c>)
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 80053d2:	b510      	push	{r4, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80053d4:	699b      	ldr	r3, [r3, #24]
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 80053d6:	4946      	ldr	r1, [pc, #280]	; (80054f0 <dyn3_execute.lto_priv.124+0x120>)
 80053d8:	6898      	ldr	r0, [r3, #8]
 80053da:	3801      	subs	r0, #1
 80053dc:	f7fb fef0 	bl	80011c0 <chThdCreateFromHeap.constprop.63>
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 80053e0:	7f81      	ldrb	r1, [r0, #30]
static void dyn3_execute(void) {
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 80053e2:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 80053e4:	2001      	movs	r0, #1
 80053e6:	1a09      	subs	r1, r1, r0
 80053e8:	fab1 f181 	clz	r1, r1
 80053ec:	0949      	lsrs	r1, r1, #5
 80053ee:	f7fd f81f 	bl	8002430 <_test_assert>
 80053f2:	b100      	cbz	r0, 80053f6 <dyn3_execute.lto_priv.124+0x26>
 80053f4:	bd10      	pop	{r4, pc}
 80053f6:	2320      	movs	r3, #32
 80053f8:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < (trefs_t)255, "too many references");
  tp->p_refs++;
 80053fc:	7fa3      	ldrb	r3, [r4, #30]
 80053fe:	3301      	adds	r3, #1
 8005400:	77a3      	strb	r3, [r4, #30]
 8005402:	f380 8811 	msr	BASEPRI, r0
  chThdAddRef(tp);
  test_assert(2, tp->p_refs == 2, "references increase failure");
 8005406:	7fa1      	ldrb	r1, [r4, #30]
 8005408:	2002      	movs	r0, #2
 800540a:	1a09      	subs	r1, r1, r0
 800540c:	fab1 f181 	clz	r1, r1
 8005410:	0949      	lsrs	r1, r1, #5
 8005412:	f7fd f80d 	bl	8002430 <_test_assert>
 8005416:	2800      	cmp	r0, #0
 8005418:	d1ec      	bne.n	80053f4 <dyn3_execute.lto_priv.124+0x24>
  chThdRelease(tp);
 800541a:	4620      	mov	r0, r4
 800541c:	f7fe f968 	bl	80036f0 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 8005420:	7fa1      	ldrb	r1, [r4, #30]
 8005422:	2003      	movs	r0, #3
 8005424:	f1a1 0101 	sub.w	r1, r1, #1
 8005428:	fab1 f181 	clz	r1, r1
 800542c:	0949      	lsrs	r1, r1, #5
 800542e:	f7fc ffff 	bl	8002430 <_test_assert>
 8005432:	2800      	cmp	r0, #0
 8005434:	d1de      	bne.n	80053f4 <dyn3_execute.lto_priv.124+0x24>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 8005436:	4620      	mov	r0, r4
 8005438:	f7ff ff9a 	bl	8005370 <regfind>
 800543c:	4601      	mov	r1, r0
 800543e:	2004      	movs	r0, #4
 8005440:	f7fc fff6 	bl	8002430 <_test_assert>
 8005444:	2800      	cmp	r0, #0
 8005446:	d1d5      	bne.n	80053f4 <dyn3_execute.lto_priv.124+0x24>
  test_assert(5, regfind(tp), "thread disappeared");
 8005448:	4620      	mov	r0, r4
 800544a:	f7ff ff91 	bl	8005370 <regfind>
 800544e:	4601      	mov	r1, r0
 8005450:	2005      	movs	r0, #5
 8005452:	f7fc ffed 	bl	8002430 <_test_assert>
 8005456:	2800      	cmp	r0, #0
 8005458:	d1cc      	bne.n	80053f4 <dyn3_execute.lto_priv.124+0x24>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 800545a:	4620      	mov	r0, r4
 800545c:	f7fe f948 	bl	80036f0 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 8005460:	7fa1      	ldrb	r1, [r4, #30]
 8005462:	2006      	movs	r0, #6
 8005464:	fab1 f181 	clz	r1, r1
 8005468:	0949      	lsrs	r1, r1, #5
 800546a:	f7fc ffe1 	bl	8002430 <_test_assert>
 800546e:	2800      	cmp	r0, #0
 8005470:	d1c0      	bne.n	80053f4 <dyn3_execute.lto_priv.124+0x24>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 8005472:	7f21      	ldrb	r1, [r4, #28]
 8005474:	2007      	movs	r0, #7
 8005476:	fab1 f181 	clz	r1, r1
 800547a:	0949      	lsrs	r1, r1, #5
 800547c:	f7fc ffd8 	bl	8002430 <_test_assert>
 8005480:	2800      	cmp	r0, #0
 8005482:	d1b7      	bne.n	80053f4 <dyn3_execute.lto_priv.124+0x24>
  test_assert(8, regfind(tp), "thread disappeared");
 8005484:	4620      	mov	r0, r4
 8005486:	f7ff ff73 	bl	8005370 <regfind>
 800548a:	4601      	mov	r1, r0
 800548c:	2008      	movs	r0, #8
 800548e:	f7fc ffcf 	bl	8002430 <_test_assert>
 8005492:	2800      	cmp	r0, #0
 8005494:	d1ae      	bne.n	80053f4 <dyn3_execute.lto_priv.124+0x24>
  test_assert(9, regfind(tp), "thread disappeared");
 8005496:	4620      	mov	r0, r4
 8005498:	f7ff ff6a 	bl	8005370 <regfind>
 800549c:	4601      	mov	r1, r0
 800549e:	2009      	movs	r0, #9
 80054a0:	f7fc ffc6 	bl	8002430 <_test_assert>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	d1a5      	bne.n	80053f4 <dyn3_execute.lto_priv.124+0x24>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 80054a8:	2032      	movs	r0, #50	; 0x32
 80054aa:	f7fe fe39 	bl	8004120 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 80054ae:	7f21      	ldrb	r1, [r4, #28]
 80054b0:	200a      	movs	r0, #10
 80054b2:	f1a1 030f 	sub.w	r3, r1, #15
 80054b6:	4259      	negs	r1, r3
 80054b8:	4159      	adcs	r1, r3
 80054ba:	f7fc ffb9 	bl	8002430 <_test_assert>
 80054be:	2800      	cmp	r0, #0
 80054c0:	d198      	bne.n	80053f4 <dyn3_execute.lto_priv.124+0x24>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 80054c2:	4620      	mov	r0, r4
 80054c4:	f7ff ff54 	bl	8005370 <regfind>
 80054c8:	4601      	mov	r1, r0
 80054ca:	200b      	movs	r0, #11
 80054cc:	f7fc ffb0 	bl	8002430 <_test_assert>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d18f      	bne.n	80053f4 <dyn3_execute.lto_priv.124+0x24>
  test_assert(12, !regfind(tp), "thread still in registry");
 80054d4:	4620      	mov	r0, r4
 80054d6:	f7ff ff4b 	bl	8005370 <regfind>
}
 80054da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 80054de:	f080 0101 	eor.w	r1, r0, #1
 80054e2:	b2c9      	uxtb	r1, r1
 80054e4:	200c      	movs	r0, #12
 80054e6:	f7fc bfa3 	b.w	8002430 <_test_assert>
 80054ea:	bf00      	nop
 80054ec:	200011a0 	.word	0x200011a0
 80054f0:	08006004 	.word	0x08006004
	...

08005500 <pools1_execute.lto_priv.118>:
static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void pools1_execute(void) {
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	4b2f      	ldr	r3, [pc, #188]	; (80055c0 <pools1_execute.lto_priv.118+0xc0>)
 8005504:	4c2f      	ldr	r4, [pc, #188]	; (80055c4 <pools1_execute.lto_priv.118+0xc4>)
 8005506:	2205      	movs	r2, #5
 8005508:	2520      	movs	r5, #32
 800550a:	2000      	movs	r0, #0
 800550c:	f385 8811 	msr	BASEPRI, r5
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8005510:	6821      	ldr	r1, [r4, #0]
  mp->mp_next = php;
 8005512:	6023      	str	r3, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8005514:	6019      	str	r1, [r3, #0]
 8005516:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 800551a:	6861      	ldr	r1, [r4, #4]
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 800551c:	3a01      	subs	r2, #1
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 800551e:	440b      	add	r3, r1
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8005520:	d1f4      	bne.n	800550c <pools1_execute.lto_priv.118+0xc>
 8005522:	2505      	movs	r5, #5
  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 8005524:	4827      	ldr	r0, [pc, #156]	; (80055c4 <pools1_execute.lto_priv.118+0xc4>)
 8005526:	f7fd f85b 	bl	80025e0 <chPoolAlloc>
 800552a:	1c01      	adds	r1, r0, #0
 800552c:	bf18      	it	ne
 800552e:	2101      	movne	r1, #1
 8005530:	2001      	movs	r0, #1
 8005532:	f7fc ff7d 	bl	8002430 <_test_assert>
 8005536:	bb90      	cbnz	r0, 800559e <pools1_execute.lto_priv.118+0x9e>

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
 8005538:	3d01      	subs	r5, #1
 800553a:	d1f3      	bne.n	8005524 <pools1_execute.lto_priv.118+0x24>
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 800553c:	4821      	ldr	r0, [pc, #132]	; (80055c4 <pools1_execute.lto_priv.118+0xc4>)
 800553e:	f7fd f84f 	bl	80025e0 <chPoolAlloc>
 8005542:	fab0 f180 	clz	r1, r0
 8005546:	2002      	movs	r0, #2
 8005548:	0949      	lsrs	r1, r1, #5
 800554a:	f7fc ff71 	bl	8002430 <_test_assert>
 800554e:	bb30      	cbnz	r0, 800559e <pools1_execute.lto_priv.118+0x9e>
 8005550:	4b1d      	ldr	r3, [pc, #116]	; (80055c8 <pools1_execute.lto_priv.118+0xc8>)
 8005552:	2620      	movs	r6, #32
 8005554:	f103 0014 	add.w	r0, r3, #20

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 8005558:	f853 2b04 	ldr.w	r2, [r3], #4
 800555c:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8005560:	6821      	ldr	r1, [r4, #0]
 8005562:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8005564:	6022      	str	r2, [r4, #0]
 8005566:	f385 8811 	msr	BASEPRI, r5

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 800556a:	4283      	cmp	r3, r0
 800556c:	d1f4      	bne.n	8005558 <pools1_execute.lto_priv.118+0x58>
 800556e:	2405      	movs	r4, #5
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 8005570:	4d14      	ldr	r5, [pc, #80]	; (80055c4 <pools1_execute.lto_priv.118+0xc4>)
 8005572:	4628      	mov	r0, r5
 8005574:	f7fd f834 	bl	80025e0 <chPoolAlloc>
 8005578:	1c01      	adds	r1, r0, #0
 800557a:	bf18      	it	ne
 800557c:	2101      	movne	r1, #1
 800557e:	2003      	movs	r0, #3
 8005580:	f7fc ff56 	bl	8002430 <_test_assert>
 8005584:	b958      	cbnz	r0, 800559e <pools1_execute.lto_priv.118+0x9e>
  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
 8005586:	3c01      	subs	r4, #1
 8005588:	d1f2      	bne.n	8005570 <pools1_execute.lto_priv.118+0x70>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 800558a:	4628      	mov	r0, r5
 800558c:	f7fd f828 	bl	80025e0 <chPoolAlloc>
 8005590:	fab0 f180 	clz	r1, r0
 8005594:	2004      	movs	r0, #4
 8005596:	0949      	lsrs	r1, r1, #5
 8005598:	f7fc ff4a 	bl	8002430 <_test_assert>
 800559c:	b100      	cbz	r0, 80055a0 <pools1_execute.lto_priv.118+0xa0>
 800559e:	bd70      	pop	{r4, r5, r6, pc}

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 80055a0:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <pools1_execute.lto_priv.118+0xcc>)
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 80055a2:	2310      	movs	r3, #16

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80055a4:	4628      	mov	r0, r5
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80055a6:	602c      	str	r4, [r5, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 80055a8:	60aa      	str	r2, [r5, #8]
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 80055aa:	606b      	str	r3, [r5, #4]
 80055ac:	f7fd f818 	bl	80025e0 <chPoolAlloc>
}
 80055b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80055b4:	fab0 f180 	clz	r1, r0
 80055b8:	2005      	movs	r0, #5
 80055ba:	0949      	lsrs	r1, r1, #5
 80055bc:	f7fc bf38 	b.w	8002430 <_test_assert>
 80055c0:	20000928 	.word	0x20000928
 80055c4:	20000880 	.word	0x20000880
 80055c8:	08006d00 	.word	0x08006d00
 80055cc:	08005091 	.word	0x08005091

080055d0 <dyn2_execute.lto_priv.122>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80055d0:	4a2f      	ldr	r2, [pc, #188]	; (8005690 <dyn2_execute.lto_priv.122+0xc0>)
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 80055d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80055d4:	6992      	ldr	r2, [r2, #24]
 80055d6:	4b2f      	ldr	r3, [pc, #188]	; (8005694 <dyn2_execute.lto_priv.122+0xc4>)
 80055d8:	492f      	ldr	r1, [pc, #188]	; (8005698 <dyn2_execute.lto_priv.122+0xc8>)
 80055da:	6895      	ldr	r5, [r2, #8]
 80055dc:	f103 0710 	add.w	r7, r3, #16
 80055e0:	2620      	movs	r6, #32
 80055e2:	2400      	movs	r4, #0
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);
 80055e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055e8:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 80055ec:	6808      	ldr	r0, [r1, #0]
 80055ee:	6010      	str	r0, [r2, #0]
  mp->mp_next = php;
 80055f0:	600a      	str	r2, [r1, #0]
 80055f2:	f384 8811 	msr	BASEPRI, r4
static void dyn2_execute(void) {
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
 80055f6:	42bb      	cmp	r3, r7
 80055f8:	d1f4      	bne.n	80055e4 <dyn2_execute.lto_priv.122+0x14>
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 80055fa:	4928      	ldr	r1, [pc, #160]	; (800569c <dyn2_execute.lto_priv.122+0xcc>)
 80055fc:	1e68      	subs	r0, r5, #1
 80055fe:	f7fb fe2f 	bl	8001260 <chThdCreateFromMemoryPool.constprop.62>
 8005602:	4c27      	ldr	r4, [pc, #156]	; (80056a0 <dyn2_execute.lto_priv.122+0xd0>)
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8005604:	4927      	ldr	r1, [pc, #156]	; (80056a4 <dyn2_execute.lto_priv.122+0xd4>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8005606:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8005608:	1ea8      	subs	r0, r5, #2
 800560a:	f7fb fe29 	bl	8001260 <chThdCreateFromMemoryPool.constprop.62>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 800560e:	4926      	ldr	r1, [pc, #152]	; (80056a8 <dyn2_execute.lto_priv.122+0xd8>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8005610:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8005612:	1ee8      	subs	r0, r5, #3
 8005614:	f7fb fe24 	bl	8001260 <chThdCreateFromMemoryPool.constprop.62>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8005618:	4924      	ldr	r1, [pc, #144]	; (80056ac <dyn2_execute.lto_priv.122+0xdc>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 800561a:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 800561c:	1f28      	subs	r0, r5, #4
 800561e:	f7fb fe1f 	bl	8001260 <chThdCreateFromMemoryPool.constprop.62>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8005622:	4923      	ldr	r1, [pc, #140]	; (80056b0 <dyn2_execute.lto_priv.122+0xe0>)

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8005624:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8005626:	1f68      	subs	r0, r5, #5
 8005628:	f7fb fe1a 	bl	8001260 <chThdCreateFromMemoryPool.constprop.62>

  test_assert(1, (threads[0] != NULL) &&
 800562c:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 800562e:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 8005630:	b141      	cbz	r1, 8005644 <dyn2_execute.lto_priv.122+0x74>
 8005632:	6861      	ldr	r1, [r4, #4]
 8005634:	b131      	cbz	r1, 8005644 <dyn2_execute.lto_priv.122+0x74>
 8005636:	68a1      	ldr	r1, [r4, #8]
 8005638:	b121      	cbz	r1, 8005644 <dyn2_execute.lto_priv.122+0x74>
 800563a:	68e1      	ldr	r1, [r4, #12]
 800563c:	b111      	cbz	r1, 8005644 <dyn2_execute.lto_priv.122+0x74>
 800563e:	fab0 f180 	clz	r1, r0
 8005642:	0949      	lsrs	r1, r1, #5
 8005644:	2001      	movs	r0, #1
 8005646:	f7fc fef3 	bl	8002430 <_test_assert>
 800564a:	b100      	cbz	r0, 800564e <dyn2_execute.lto_priv.122+0x7e>
 800564c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 800564e:	f7fc fe6f 	bl	8002330 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 8005652:	2002      	movs	r0, #2
 8005654:	4917      	ldr	r1, [pc, #92]	; (80056b4 <dyn2_execute.lto_priv.122+0xe4>)
 8005656:	f7fc fec3 	bl	80023e0 <_test_assert_sequence>
 800565a:	2800      	cmp	r0, #0
 800565c:	d1f6      	bne.n	800564c <dyn2_execute.lto_priv.122+0x7c>
 800565e:	2404      	movs	r4, #4

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 8005660:	480d      	ldr	r0, [pc, #52]	; (8005698 <dyn2_execute.lto_priv.122+0xc8>)
 8005662:	f7fc ffbd 	bl	80025e0 <chPoolAlloc>
 8005666:	1c01      	adds	r1, r0, #0
 8005668:	bf18      	it	ne
 800566a:	2101      	movne	r1, #1
 800566c:	2003      	movs	r0, #3
 800566e:	f7fc fedf 	bl	8002430 <_test_assert>
 8005672:	2800      	cmp	r0, #0
 8005674:	d1ea      	bne.n	800564c <dyn2_execute.lto_priv.122+0x7c>
  /* Claiming the memory from terminated threads. */
  test_wait_threads();
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
 8005676:	3c01      	subs	r4, #1
 8005678:	d1f2      	bne.n	8005660 <dyn2_execute.lto_priv.122+0x90>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800567a:	4807      	ldr	r0, [pc, #28]	; (8005698 <dyn2_execute.lto_priv.122+0xc8>)
 800567c:	f7fc ffb0 	bl	80025e0 <chPoolAlloc>
}
 8005680:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8005684:	fab0 f180 	clz	r1, r0
 8005688:	2004      	movs	r0, #4
 800568a:	0949      	lsrs	r1, r1, #5
 800568c:	f7fc bed0 	b.w	8002430 <_test_assert>
 8005690:	200011a0 	.word	0x200011a0
 8005694:	08006d00 	.word	0x08006d00
 8005698:	20000f94 	.word	0x20000f94
 800569c:	08006004 	.word	0x08006004
 80056a0:	200012f4 	.word	0x200012f4
 80056a4:	08006000 	.word	0x08006000
 80056a8:	0800600c 	.word	0x0800600c
 80056ac:	08006008 	.word	0x08006008
 80056b0:	08006014 	.word	0x08006014
 80056b4:	08006da0 	.word	0x08006da0
	...

080056c0 <dyn1_execute.lto_priv.120>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 80056c0:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80056c2:	4b2c      	ldr	r3, [pc, #176]	; (8005774 <dyn1_execute.lto_priv.120+0xb4>)
 80056c4:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80056c6:	699b      	ldr	r3, [r3, #24]
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 80056c8:	a901      	add	r1, sp, #4
 80056ca:	689d      	ldr	r5, [r3, #8]
 80056cc:	482a      	ldr	r0, [pc, #168]	; (8005778 <dyn1_execute.lto_priv.120+0xb8>)
 80056ce:	f7fc ff9f 	bl	8002610 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 80056d2:	492a      	ldr	r1, [pc, #168]	; (800577c <dyn1_execute.lto_priv.120+0xbc>)
 80056d4:	1e68      	subs	r0, r5, #1
 80056d6:	f7fb fd73 	bl	80011c0 <chThdCreateFromHeap.constprop.63>
 80056da:	4c29      	ldr	r4, [pc, #164]	; (8005780 <dyn1_execute.lto_priv.120+0xc0>)
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 80056dc:	4929      	ldr	r1, [pc, #164]	; (8005784 <dyn1_execute.lto_priv.120+0xc4>)
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 80056de:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 80056e0:	1ea8      	subs	r0, r5, #2
 80056e2:	f7fb fd6d 	bl	80011c0 <chThdCreateFromHeap.constprop.63>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 80056e6:	4669      	mov	r1, sp
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 80056e8:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 80056ea:	4823      	ldr	r0, [pc, #140]	; (8005778 <dyn1_execute.lto_priv.120+0xb8>)
 80056ec:	f7fc ff90 	bl	8002610 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 80056f0:	9900      	ldr	r1, [sp, #0]
 80056f2:	4821      	ldr	r0, [pc, #132]	; (8005778 <dyn1_execute.lto_priv.120+0xb8>)
 80056f4:	f7fc fffc 	bl	80026f0 <chHeapAlloc>
  threads[2] = chThdCreateFromHeap(&heap1,
 80056f8:	4923      	ldr	r1, [pc, #140]	; (8005788 <dyn1_execute.lto_priv.120+0xc8>)
  threads[1] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
  p1 = chHeapAlloc(&heap1, n);
 80056fa:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 80056fc:	1ee8      	subs	r0, r5, #3
 80056fe:	f7fb fd5f 	bl	80011c0 <chThdCreateFromHeap.constprop.63>
 8005702:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 8005704:	4630      	mov	r0, r6
 8005706:	f7fc ffab 	bl	8002660 <chHeapFree>

  test_assert(1, (threads[0] != NULL) &&
 800570a:	6821      	ldr	r1, [r4, #0]
 800570c:	b121      	cbz	r1, 8005718 <dyn1_execute.lto_priv.120+0x58>
 800570e:	6861      	ldr	r1, [r4, #4]
 8005710:	b111      	cbz	r1, 8005718 <dyn1_execute.lto_priv.120+0x58>
 8005712:	68a1      	ldr	r1, [r4, #8]
 8005714:	b331      	cbz	r1, 8005764 <dyn1_execute.lto_priv.120+0xa4>
 8005716:	2100      	movs	r1, #0
 8005718:	2001      	movs	r0, #1
 800571a:	f7fc fe89 	bl	8002430 <_test_assert>
 800571e:	b108      	cbz	r0, 8005724 <dyn1_execute.lto_priv.120+0x64>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 8005720:	b002      	add	sp, #8
 8005722:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8005724:	f7fc fe04 	bl	8002330 <test_wait_threads>
  test_assert_sequence(2, "AB");
 8005728:	2002      	movs	r0, #2
 800572a:	4918      	ldr	r1, [pc, #96]	; (800578c <dyn1_execute.lto_priv.120+0xcc>)
 800572c:	f7fc fe58 	bl	80023e0 <_test_assert_sequence>
 8005730:	2800      	cmp	r0, #0
 8005732:	d1f5      	bne.n	8005720 <dyn1_execute.lto_priv.120+0x60>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 8005734:	4669      	mov	r1, sp
 8005736:	4810      	ldr	r0, [pc, #64]	; (8005778 <dyn1_execute.lto_priv.120+0xb8>)
 8005738:	f7fc ff6a 	bl	8002610 <chHeapStatus>
 800573c:	f1a0 0101 	sub.w	r1, r0, #1
 8005740:	fab1 f181 	clz	r1, r1
 8005744:	2003      	movs	r0, #3
 8005746:	0949      	lsrs	r1, r1, #5
 8005748:	f7fc fe72 	bl	8002430 <_test_assert>
 800574c:	2800      	cmp	r0, #0
 800574e:	d1e7      	bne.n	8005720 <dyn1_execute.lto_priv.120+0x60>
  test_assert(4, n == sz, "heap size changed");
 8005750:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8005754:	1ac9      	subs	r1, r1, r3
 8005756:	fab1 f181 	clz	r1, r1
 800575a:	2004      	movs	r0, #4
 800575c:	0949      	lsrs	r1, r1, #5
 800575e:	f7fc fe67 	bl	8002430 <_test_assert>
 8005762:	e7dd      	b.n	8005720 <dyn1_execute.lto_priv.120+0x60>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 8005764:	68e3      	ldr	r3, [r4, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1d6      	bne.n	8005718 <dyn1_execute.lto_priv.120+0x58>
 800576a:	6921      	ldr	r1, [r4, #16]
 800576c:	fab1 f181 	clz	r1, r1
 8005770:	0949      	lsrs	r1, r1, #5
 8005772:	e7d1      	b.n	8005718 <dyn1_execute.lto_priv.120+0x58>
 8005774:	200011a0 	.word	0x200011a0
 8005778:	20001320 	.word	0x20001320
 800577c:	08006004 	.word	0x08006004
 8005780:	200012f4 	.word	0x200012f4
 8005784:	08006000 	.word	0x08006000
 8005788:	0800600c 	.word	0x0800600c
 800578c:	08006db0 	.word	0x08006db0

08005790 <heap1_execute.lto_priv.116>:
static void heap1_setup(void) {

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}

static void heap1_execute(void) {
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	b082      	sub	sp, #8

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 8005794:	a901      	add	r1, sp, #4
 8005796:	2000      	movs	r0, #0
 8005798:	f7fc ff3a 	bl	8002610 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 800579c:	2110      	movs	r1, #16
 800579e:	2000      	movs	r0, #0
 80057a0:	f7fc ffa6 	bl	80026f0 <chHeapAlloc>
  test_assert(1, p1 != NULL, "allocation failed");
 80057a4:	1c01      	adds	r1, r0, #0
 80057a6:	4605      	mov	r5, r0
 80057a8:	bf18      	it	ne
 80057aa:	2101      	movne	r1, #1
 80057ac:	2001      	movs	r0, #1
 80057ae:	f7fc fe3f 	bl	8002430 <_test_assert>
 80057b2:	4604      	mov	r4, r0
 80057b4:	b108      	cbz	r0, 80057ba <heap1_execute.lto_priv.116+0x2a>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 80057b6:	b002      	add	sp, #8
 80057b8:	bd70      	pop	{r4, r5, r6, pc}
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 80057ba:	4628      	mov	r0, r5
 80057bc:	f7fc ff50 	bl	8002660 <chHeapFree>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 80057c0:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 80057c4:	4620      	mov	r0, r4
 80057c6:	f7fc ff93 	bl	80026f0 <chHeapAlloc>
  test_assert(2, p1 == NULL, "allocation not failed");
 80057ca:	fab0 f180 	clz	r1, r0
 80057ce:	2002      	movs	r0, #2
 80057d0:	0949      	lsrs	r1, r1, #5
 80057d2:	f7fc fe2d 	bl	8002430 <_test_assert>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d1ed      	bne.n	80057b6 <heap1_execute.lto_priv.116+0x26>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 80057da:	a901      	add	r1, sp, #4
 80057dc:	487b      	ldr	r0, [pc, #492]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 80057de:	f7fc ff17 	bl	8002610 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80057e2:	2110      	movs	r1, #16
 80057e4:	4879      	ldr	r0, [pc, #484]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 80057e6:	f7fc ff83 	bl	80026f0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80057ea:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80057ec:	4606      	mov	r6, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80057ee:	4877      	ldr	r0, [pc, #476]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 80057f0:	f7fc ff7e 	bl	80026f0 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 80057f4:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 80057f6:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 80057f8:	4874      	ldr	r0, [pc, #464]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 80057fa:	f7fc ff79 	bl	80026f0 <chHeapAlloc>
 80057fe:	4604      	mov	r4, r0
  chHeapFree(p1);                               /* Does not merge.*/
 8005800:	4630      	mov	r0, r6
 8005802:	f7fc ff2d 	bl	8002660 <chHeapFree>
  chHeapFree(p2);                               /* Merges backward.*/
 8005806:	4628      	mov	r0, r5
 8005808:	f7fc ff2a 	bl	8002660 <chHeapFree>
  chHeapFree(p3);                               /* Merges both sides.*/
 800580c:	4620      	mov	r0, r4
 800580e:	f7fc ff27 	bl	8002660 <chHeapFree>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8005812:	4669      	mov	r1, sp
 8005814:	486d      	ldr	r0, [pc, #436]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 8005816:	f7fc fefb 	bl	8002610 <chHeapStatus>
 800581a:	f1a0 0101 	sub.w	r1, r0, #1
 800581e:	fab1 f181 	clz	r1, r1
 8005822:	2003      	movs	r0, #3
 8005824:	0949      	lsrs	r1, r1, #5
 8005826:	f7fc fe03 	bl	8002430 <_test_assert>
 800582a:	2800      	cmp	r0, #0
 800582c:	d1c3      	bne.n	80057b6 <heap1_execute.lto_priv.116+0x26>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 800582e:	2110      	movs	r1, #16
 8005830:	4866      	ldr	r0, [pc, #408]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 8005832:	f7fc ff5d 	bl	80026f0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8005836:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8005838:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 800583a:	4864      	ldr	r0, [pc, #400]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 800583c:	f7fc ff58 	bl	80026f0 <chHeapAlloc>
 8005840:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8005842:	2110      	movs	r1, #16
 8005844:	4861      	ldr	r0, [pc, #388]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 8005846:	f7fc ff53 	bl	80026f0 <chHeapAlloc>
  chHeapFree(p3);                               /* Merges forward.*/
 800584a:	f7fc ff09 	bl	8002660 <chHeapFree>
  chHeapFree(p2);                               /* Merges forward.*/
 800584e:	4628      	mov	r0, r5
 8005850:	f7fc ff06 	bl	8002660 <chHeapFree>
  chHeapFree(p1);                               /* Merges forward.*/
 8005854:	4620      	mov	r0, r4
 8005856:	f7fc ff03 	bl	8002660 <chHeapFree>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800585a:	4669      	mov	r1, sp
 800585c:	485b      	ldr	r0, [pc, #364]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 800585e:	f7fc fed7 	bl	8002610 <chHeapStatus>
 8005862:	f1a0 0101 	sub.w	r1, r0, #1
 8005866:	fab1 f181 	clz	r1, r1
 800586a:	2004      	movs	r0, #4
 800586c:	0949      	lsrs	r1, r1, #5
 800586e:	f7fc fddf 	bl	8002430 <_test_assert>
 8005872:	2800      	cmp	r0, #0
 8005874:	d19f      	bne.n	80057b6 <heap1_execute.lto_priv.116+0x26>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8005876:	2111      	movs	r1, #17
 8005878:	4854      	ldr	r0, [pc, #336]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 800587a:	f7fc ff39 	bl	80026f0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 800587e:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8005880:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8005882:	4852      	ldr	r0, [pc, #328]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 8005884:	f7fc ff34 	bl	80026f0 <chHeapAlloc>
 8005888:	4605      	mov	r5, r0
  chHeapFree(p1);
 800588a:	4620      	mov	r0, r4
 800588c:	f7fc fee8 	bl	8002660 <chHeapFree>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8005890:	4669      	mov	r1, sp
 8005892:	484e      	ldr	r0, [pc, #312]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 8005894:	f7fc febc 	bl	8002610 <chHeapStatus>
 8005898:	f1a0 0102 	sub.w	r1, r0, #2
 800589c:	fab1 f181 	clz	r1, r1
 80058a0:	2005      	movs	r0, #5
 80058a2:	0949      	lsrs	r1, r1, #5
 80058a4:	f7fc fdc4 	bl	8002430 <_test_assert>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d184      	bne.n	80057b6 <heap1_execute.lto_priv.116+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE);
 80058ac:	2110      	movs	r1, #16
 80058ae:	4847      	ldr	r0, [pc, #284]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 80058b0:	f7fc ff1e 	bl	80026f0 <chHeapAlloc>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 80058b4:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 80058b6:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 80058b8:	4844      	ldr	r0, [pc, #272]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 80058ba:	f7fc fea9 	bl	8002610 <chHeapStatus>
 80058be:	2801      	cmp	r0, #1
 80058c0:	f000 8081 	beq.w	80059c6 <heap1_execute.lto_priv.116+0x236>
 80058c4:	4669      	mov	r1, sp
 80058c6:	4841      	ldr	r0, [pc, #260]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 80058c8:	f7fc fea2 	bl	8002610 <chHeapStatus>
 80058cc:	f1a0 0102 	sub.w	r1, r0, #2
 80058d0:	fab1 f181 	clz	r1, r1
 80058d4:	0949      	lsrs	r1, r1, #5
 80058d6:	2006      	movs	r0, #6
 80058d8:	f7fc fdaa 	bl	8002430 <_test_assert>
 80058dc:	2800      	cmp	r0, #0
 80058de:	f47f af6a 	bne.w	80057b6 <heap1_execute.lto_priv.116+0x26>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 80058e2:	4628      	mov	r0, r5
 80058e4:	f7fc febc 	bl	8002660 <chHeapFree>
  chHeapFree(p1);
 80058e8:	4620      	mov	r0, r4
 80058ea:	f7fc feb9 	bl	8002660 <chHeapFree>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80058ee:	4669      	mov	r1, sp
 80058f0:	4836      	ldr	r0, [pc, #216]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 80058f2:	f7fc fe8d 	bl	8002610 <chHeapStatus>
 80058f6:	1e46      	subs	r6, r0, #1
 80058f8:	4271      	negs	r1, r6
 80058fa:	4171      	adcs	r1, r6
 80058fc:	2007      	movs	r0, #7
 80058fe:	f7fc fd97 	bl	8002430 <_test_assert>
 8005902:	2800      	cmp	r0, #0
 8005904:	f47f af57 	bne.w	80057b6 <heap1_execute.lto_priv.116+0x26>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8005908:	2110      	movs	r1, #16
 800590a:	4830      	ldr	r0, [pc, #192]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 800590c:	f7fc fef0 	bl	80026f0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8005910:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8005912:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8005914:	482d      	ldr	r0, [pc, #180]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 8005916:	f7fc feeb 	bl	80026f0 <chHeapAlloc>
 800591a:	4604      	mov	r4, r0
  chHeapFree(p1);
 800591c:	4628      	mov	r0, r5
 800591e:	f7fc fe9f 	bl	8002660 <chHeapFree>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8005922:	4669      	mov	r1, sp
 8005924:	4829      	ldr	r0, [pc, #164]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 8005926:	f7fc fe73 	bl	8002610 <chHeapStatus>
 800592a:	1e85      	subs	r5, r0, #2
 800592c:	4269      	negs	r1, r5
 800592e:	4169      	adcs	r1, r5
 8005930:	2008      	movs	r0, #8
 8005932:	f7fc fd7d 	bl	8002430 <_test_assert>
 8005936:	2800      	cmp	r0, #0
 8005938:	f47f af3d 	bne.w	80057b6 <heap1_execute.lto_priv.116+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 800593c:	2120      	movs	r1, #32
 800593e:	4823      	ldr	r0, [pc, #140]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 8005940:	f7fc fed6 	bl	80026f0 <chHeapAlloc>
  chHeapFree(p1);
 8005944:	f7fc fe8c 	bl	8002660 <chHeapFree>
  chHeapFree(p2);
 8005948:	4620      	mov	r0, r4
 800594a:	f7fc fe89 	bl	8002660 <chHeapFree>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800594e:	4669      	mov	r1, sp
 8005950:	481e      	ldr	r0, [pc, #120]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 8005952:	f7fc fe5d 	bl	8002610 <chHeapStatus>
 8005956:	3801      	subs	r0, #1
 8005958:	4241      	negs	r1, r0
 800595a:	4141      	adcs	r1, r0
 800595c:	2009      	movs	r0, #9
 800595e:	f7fc fd67 	bl	8002430 <_test_assert>
 8005962:	2800      	cmp	r0, #0
 8005964:	f47f af27 	bne.w	80057b6 <heap1_execute.lto_priv.116+0x26>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 8005968:	4669      	mov	r1, sp
 800596a:	4818      	ldr	r0, [pc, #96]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 800596c:	f7fc fe50 	bl	8002610 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 8005970:	9900      	ldr	r1, [sp, #0]
 8005972:	4816      	ldr	r0, [pc, #88]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 8005974:	f7fc febc 	bl	80026f0 <chHeapAlloc>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8005978:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 800597a:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 800597c:	4813      	ldr	r0, [pc, #76]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 800597e:	f7fc fe47 	bl	8002610 <chHeapStatus>
 8005982:	fab0 f180 	clz	r1, r0
 8005986:	200a      	movs	r0, #10
 8005988:	0949      	lsrs	r1, r1, #5
 800598a:	f7fc fd51 	bl	8002430 <_test_assert>
 800598e:	2800      	cmp	r0, #0
 8005990:	f47f af11 	bne.w	80057b6 <heap1_execute.lto_priv.116+0x26>
  chHeapFree(p1);
 8005994:	4620      	mov	r0, r4
 8005996:	f7fc fe63 	bl	8002660 <chHeapFree>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800599a:	4669      	mov	r1, sp
 800599c:	480b      	ldr	r0, [pc, #44]	; (80059cc <heap1_execute.lto_priv.116+0x23c>)
 800599e:	f7fc fe37 	bl	8002610 <chHeapStatus>
 80059a2:	1e42      	subs	r2, r0, #1
 80059a4:	4251      	negs	r1, r2
 80059a6:	4151      	adcs	r1, r2
 80059a8:	200b      	movs	r0, #11
 80059aa:	f7fc fd41 	bl	8002430 <_test_assert>
 80059ae:	2800      	cmp	r0, #0
 80059b0:	f47f af01 	bne.w	80057b6 <heap1_execute.lto_priv.116+0x26>
  test_assert(12, n == sz, "size changed");
 80059b4:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80059b8:	1acb      	subs	r3, r1, r3
 80059ba:	4259      	negs	r1, r3
 80059bc:	4159      	adcs	r1, r3
 80059be:	200c      	movs	r0, #12
 80059c0:	f7fc fd36 	bl	8002430 <_test_assert>
 80059c4:	e6f7      	b.n	80057b6 <heap1_execute.lto_priv.116+0x26>
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 80059c6:	4601      	mov	r1, r0
 80059c8:	e785      	b.n	80058d6 <heap1_execute.lto_priv.116+0x146>
 80059ca:	bf00      	nop
 80059cc:	200013e0 	.word	0x200013e0

080059d0 <heap1_setup.lto_priv.115>:
  heapp->h_free.h.u.next = hp;
 80059d0:	4909      	ldr	r1, [pc, #36]	; (80059f8 <heap1_setup.lto_priv.115+0x28>)
 * allocator.<br>
 * The test expects to find the heap back to the initial status after each
 * sequence.
 */

static void heap1_setup(void) {
 80059d2:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80059d4:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80059d6:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80059da:	4b08      	ldr	r3, [pc, #32]	; (80059fc <heap1_setup.lto_priv.115+0x2c>)
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80059dc:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80059e0:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 80059e4:	60da      	str	r2, [r3, #12]
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 80059e6:	6099      	str	r1, [r3, #8]
 80059e8:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 80059ea:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}
 80059f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	20000928 	.word	0x20000928
 80059fc:	200013e0 	.word	0x200013e0

08005a00 <evt3_execute.lto_priv.114>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 8005a00:	b570      	push	{r4, r5, r6, lr}
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8005a02:	4c55      	ldr	r4, [pc, #340]	; (8005b58 <evt3_execute.lto_priv.114+0x158>)
 8005a04:	2320      	movs	r3, #32
 8005a06:	69a2      	ldr	r2, [r4, #24]
 8005a08:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8005a0c:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8005a0e:	b93b      	cbnz	r3, 8005a20 <evt3_execute.lto_priv.114+0x20>
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	2101      	movs	r1, #1

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(1, m == 0, "spurious event");
 8005a16:	2001      	movs	r0, #1
 8005a18:	f7fc fd0a 	bl	8002430 <_test_assert>
 8005a1c:	b180      	cbz	r0, 8005a40 <evt3_execute.lto_priv.114+0x40>
 8005a1e:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8005a20:	4259      	negs	r1, r3
 8005a22:	4019      	ands	r1, r3
  ctp->p_epending &= ~m;
 8005a24:	ea23 0301 	bic.w	r3, r3, r1
 8005a28:	6353      	str	r3, [r2, #52]	; 0x34
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	fab1 f181 	clz	r1, r1
 8005a34:	2001      	movs	r0, #1
 8005a36:	0949      	lsrs	r1, r1, #5
 8005a38:	f7fc fcfa 	bl	8002430 <_test_assert>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d1ee      	bne.n	8005a1e <evt3_execute.lto_priv.114+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8005a40:	69a3      	ldr	r3, [r4, #24]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
 8005a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a4a:	2a00      	cmp	r2, #0
 8005a4c:	d06f      	beq.n	8005b2e <evt3_execute.lto_priv.114+0x12e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 8005a4e:	6358      	str	r0, [r3, #52]	; 0x34
 8005a50:	f380 8811 	msr	BASEPRI, r0
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(2, m == 0, "spurious event");
 8005a54:	4601      	mov	r1, r0
 8005a56:	2002      	movs	r0, #2
 8005a58:	f7fc fcea 	bl	8002430 <_test_assert>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d1de      	bne.n	8005a1e <evt3_execute.lto_priv.114+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8005a60:	69a3      	ldr	r3, [r4, #24]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8005a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a6a:	3201      	adds	r2, #1
 8005a6c:	d063      	beq.n	8005b36 <evt3_execute.lto_priv.114+0x136>
 8005a6e:	f380 8811 	msr	BASEPRI, r0
 8005a72:	2001      	movs	r0, #1
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(3, m == 0, "spurious event");
 8005a74:	4601      	mov	r1, r0
 8005a76:	2003      	movs	r0, #3
 8005a78:	f7fc fcda 	bl	8002430 <_test_assert>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d1ce      	bne.n	8005a1e <evt3_execute.lto_priv.114+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8005a80:	69a6      	ldr	r6, [r4, #24]
 8005a82:	2320      	movs	r3, #32
 8005a84:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8005a88:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8005a8a:	b94d      	cbnz	r5, 8005aa0 <evt3_execute.lto_priv.114+0xa0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8005a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8005a90:	200a      	movs	r0, #10
  if (m == (eventmask_t)0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8005a92:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8005a94:	4601      	mov	r1, r0
 8005a96:	f7fe fa7b 	bl	8003f90 <chSchGoSleepTimeoutS>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	db4f      	blt.n	8005b3e <evt3_execute.lto_priv.114+0x13e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 8005a9e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 8005aa0:	4269      	negs	r1, r5
 8005aa2:	4029      	ands	r1, r5
  ctp->p_epending &= ~m;
 8005aa4:	ea25 0501 	bic.w	r5, r5, r1
 8005aa8:	6375      	str	r5, [r6, #52]	; 0x34
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	fab1 f181 	clz	r1, r1
 8005ab4:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
 8005ab6:	2004      	movs	r0, #4
 8005ab8:	f7fc fcba 	bl	8002430 <_test_assert>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d1ae      	bne.n	8005a1e <evt3_execute.lto_priv.114+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8005ac0:	69a6      	ldr	r6, [r4, #24]
 8005ac2:	2320      	movs	r3, #32
 8005ac4:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8005ac8:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8005aca:	b94d      	cbnz	r5, 8005ae0 <evt3_execute.lto_priv.114+0xe0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8005ad0:	200a      	movs	r0, #10
  if (m == (eventmask_t)0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8005ad2:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8005ad4:	4601      	mov	r1, r0
 8005ad6:	f7fe fa5b 	bl	8003f90 <chSchGoSleepTimeoutS>
 8005ada:	2800      	cmp	r0, #0
 8005adc:	db33      	blt.n	8005b46 <evt3_execute.lto_priv.114+0x146>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 8005ade:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	6373      	str	r3, [r6, #52]	; 0x34
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	fab5 f185 	clz	r1, r5
 8005aec:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
 8005aee:	2005      	movs	r0, #5
 8005af0:	f7fc fc9e 	bl	8002430 <_test_assert>
 8005af4:	4605      	mov	r5, r0
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d191      	bne.n	8005a1e <evt3_execute.lto_priv.114+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8005afa:	69a4      	ldr	r4, [r4, #24]
 8005afc:	2320      	movs	r3, #32
 8005afe:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8005b02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b04:	3301      	adds	r3, #1
 8005b06:	d008      	beq.n	8005b1a <evt3_execute.lto_priv.114+0x11a>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8005b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b0c:	6223      	str	r3, [r4, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 8005b0e:	200b      	movs	r0, #11
 8005b10:	210a      	movs	r1, #10
 8005b12:	f7fe fa3d 	bl	8003f90 <chSchGoSleepTimeoutS>
 8005b16:	2800      	cmp	r0, #0
 8005b18:	db19      	blt.n	8005b4e <evt3_execute.lto_priv.114+0x14e>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b1e:	f383 8811 	msr	BASEPRI, r3
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8005b22:	4629      	mov	r1, r5
}
 8005b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8005b28:	2006      	movs	r0, #6
 8005b2a:	f7fc bc81 	b.w	8002430 <_test_assert>
 8005b2e:	f380 8811 	msr	BASEPRI, r0
 8005b32:	2001      	movs	r0, #1
 8005b34:	e78e      	b.n	8005a54 <evt3_execute.lto_priv.114+0x54>
 8005b36:	6358      	str	r0, [r3, #52]	; 0x34
 8005b38:	f380 8811 	msr	BASEPRI, r0
 8005b3c:	e79a      	b.n	8005a74 <evt3_execute.lto_priv.114+0x74>
 8005b3e:	f385 8811 	msr	BASEPRI, r5
 8005b42:	2101      	movs	r1, #1
 8005b44:	e7b7      	b.n	8005ab6 <evt3_execute.lto_priv.114+0xb6>
 8005b46:	f385 8811 	msr	BASEPRI, r5
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	e7cf      	b.n	8005aee <evt3_execute.lto_priv.114+0xee>
 8005b4e:	f385 8811 	msr	BASEPRI, r5
 8005b52:	2501      	movs	r5, #1
 8005b54:	e7e5      	b.n	8005b22 <evt3_execute.lto_priv.114+0x122>
 8005b56:	bf00      	nop
 8005b58:	200011a0 	.word	0x200011a0
 8005b5c:	00000000 	.word	0x00000000

08005b60 <evt3_setup.lto_priv.113>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8005b60:	f7fb bc36 	b.w	80013d0 <chEvtGetAndClearEvents.constprop.45>
	...

08005b70 <evt2_setup.lto_priv.111>:
 * the expected time and that there are no stuck event flags.
 */

static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8005b70:	f7fb bc2e 	b.w	80013d0 <chEvtGetAndClearEvents.constprop.45>
	...

08005b80 <evt1_setup.lto_priv.109>:
 * the associated event handlers are invoked in LSb-first order.
 */

static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8005b80:	f7fb bc26 	b.w	80013d0 <chEvtGetAndClearEvents.constprop.45>
	...

08005b90 <evt2_execute.lto_priv.112>:
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
}

static void evt2_execute(void) {
 8005b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b94:	2520      	movs	r5, #32
 8005b96:	b08d      	sub	sp, #52	; 0x34
 8005b98:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();
  currp->p_epending |= events;
 8005b9c:	4cad      	ldr	r4, [pc, #692]	; (8005e54 <evt2_execute.lto_priv.112+0x2c4>)
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	69a2      	ldr	r2, [r4, #24]
 8005ba2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005ba4:	f043 0307 	orr.w	r3, r3, #7
 8005ba8:	6353      	str	r3, [r2, #52]	; 0x34
 8005baa:	f381 8811 	msr	BASEPRI, r1

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
 8005bae:	f7fb fc1f 	bl	80013f0 <chEvtWaitOne.constprop.41>
  test_assert(1, m == 1, "single event error");
 8005bb2:	f1a0 0101 	sub.w	r1, r0, #1
 8005bb6:	fab1 f181 	clz	r1, r1
 8005bba:	2001      	movs	r0, #1
 8005bbc:	0949      	lsrs	r1, r1, #5
 8005bbe:	f7fc fc37 	bl	8002430 <_test_assert>
 8005bc2:	b110      	cbz	r0, 8005bca <evt2_execute.lto_priv.112+0x3a>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 8005bc4:	b00d      	add	sp, #52	; 0x34
 8005bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 8005bca:	f7fb fc11 	bl	80013f0 <chEvtWaitOne.constprop.41>
  test_assert(2, m == 2, "single event error");
 8005bce:	f1a0 0102 	sub.w	r1, r0, #2
 8005bd2:	fab1 f181 	clz	r1, r1
 8005bd6:	2002      	movs	r0, #2
 8005bd8:	0949      	lsrs	r1, r1, #5
 8005bda:	f7fc fc29 	bl	8002430 <_test_assert>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d1f0      	bne.n	8005bc4 <evt2_execute.lto_priv.112+0x34>
  m = chEvtWaitOne(ALL_EVENTS);
 8005be2:	f7fb fc05 	bl	80013f0 <chEvtWaitOne.constprop.41>
  test_assert(3, m == 4, "single event error");
 8005be6:	f1a0 0104 	sub.w	r1, r0, #4
 8005bea:	fab1 f181 	clz	r1, r1
 8005bee:	2003      	movs	r0, #3
 8005bf0:	0949      	lsrs	r1, r1, #5
 8005bf2:	f7fc fc1d 	bl	8002430 <_test_assert>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d1e4      	bne.n	8005bc4 <evt2_execute.lto_priv.112+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005bfa:	f7fb fbe9 	bl	80013d0 <chEvtGetAndClearEvents.constprop.45>
  test_assert(4, m == 0, "stuck event");
 8005bfe:	fab0 f180 	clz	r1, r0
 8005c02:	2004      	movs	r0, #4
 8005c04:	0949      	lsrs	r1, r1, #5
 8005c06:	f7fc fc13 	bl	8002430 <_test_assert>
 8005c0a:	4606      	mov	r6, r0
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d1d9      	bne.n	8005bc4 <evt2_execute.lto_priv.112+0x34>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 8005c10:	f7fc fb7e 	bl	8002310 <test_wait_tick>
 8005c14:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8005c18:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8005c1c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 8005c20:	b2bf      	uxth	r7, r7
 8005c22:	f386 8811 	msr	BASEPRI, r6
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005c26:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005c28:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	488a      	ldr	r0, [pc, #552]	; (8005e58 <evt2_execute.lto_priv.112+0x2c8>)
 8005c30:	3a01      	subs	r2, #1
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	4b89      	ldr	r3, [pc, #548]	; (8005e5c <evt2_execute.lto_priv.112+0x2cc>)
 8005c36:	f7fd fe73 	bl	8003920 <chThdCreateStatic>
 8005c3a:	4e89      	ldr	r6, [pc, #548]	; (8005e60 <evt2_execute.lto_priv.112+0x2d0>)
 8005c3c:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8005c3e:	f7fb fbd7 	bl	80013f0 <chEvtWaitOne.constprop.41>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8005c42:	f107 0132 	add.w	r1, r7, #50	; 0x32
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8005c46:	f107 0237 	add.w	r2, r7, #55	; 0x37
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8005c4a:	4681      	mov	r9, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8005c4c:	b289      	uxth	r1, r1
 8005c4e:	b292      	uxth	r2, r2
 8005c50:	2005      	movs	r0, #5
 8005c52:	f7fc fb9d 	bl	8002390 <_test_assert_time_window>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	d1b4      	bne.n	8005bc4 <evt2_execute.lto_priv.112+0x34>
  test_assert(6, m == 1, "single event error");
 8005c5a:	f1a9 0101 	sub.w	r1, r9, #1
 8005c5e:	fab1 f181 	clz	r1, r1
 8005c62:	2006      	movs	r0, #6
 8005c64:	0949      	lsrs	r1, r1, #5
 8005c66:	f7fc fbe3 	bl	8002430 <_test_assert>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d1aa      	bne.n	8005bc4 <evt2_execute.lto_priv.112+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005c6e:	f7fb fbaf 	bl	80013d0 <chEvtGetAndClearEvents.constprop.45>
  test_assert(7, m == 0, "stuck event");
 8005c72:	fab0 f180 	clz	r1, r0
 8005c76:	2007      	movs	r0, #7
 8005c78:	0949      	lsrs	r1, r1, #5
 8005c7a:	f7fc fbd9 	bl	8002430 <_test_assert>
 8005c7e:	4607      	mov	r7, r0
 8005c80:	2800      	cmp	r0, #0
 8005c82:	d19f      	bne.n	8005bc4 <evt2_execute.lto_priv.112+0x34>
  test_wait_threads();
 8005c84:	f7fc fb54 	bl	8002330 <test_wait_threads>
 8005c88:	f385 8811 	msr	BASEPRI, r5
 8005c8c:	69a2      	ldr	r2, [r4, #24]
 8005c8e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005c90:	f043 0305 	orr.w	r3, r3, #5
 8005c94:	6353      	str	r3, [r2, #52]	; 0x34
 8005c96:	f387 8811 	msr	BASEPRI, r7

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
  m = chEvtWaitAny(ALL_EVENTS);
 8005c9a:	f7fb fbc9 	bl	8001430 <chEvtWaitAny.constprop.40>
  test_assert(8, m == 5, "unexpected pending bit");
 8005c9e:	1f47      	subs	r7, r0, #5
 8005ca0:	4279      	negs	r1, r7
 8005ca2:	4179      	adcs	r1, r7
 8005ca4:	2008      	movs	r0, #8
 8005ca6:	f7fc fbc3 	bl	8002430 <_test_assert>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d18a      	bne.n	8005bc4 <evt2_execute.lto_priv.112+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005cae:	f7fb fb8f 	bl	80013d0 <chEvtGetAndClearEvents.constprop.45>
  test_assert(9, m == 0, "stuck event");
 8005cb2:	fab0 f180 	clz	r1, r0
 8005cb6:	2009      	movs	r0, #9
 8005cb8:	0949      	lsrs	r1, r1, #5
 8005cba:	f7fc fbb9 	bl	8002430 <_test_assert>
 8005cbe:	4607      	mov	r7, r0
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	f47f af7f 	bne.w	8005bc4 <evt2_execute.lto_priv.112+0x34>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 8005cc6:	f7fc fb23 	bl	8002310 <test_wait_tick>
 8005cca:	f385 8811 	msr	BASEPRI, r5
 8005cce:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 8005cd2:	b2ad      	uxth	r5, r5
 8005cd4:	f387 8811 	msr	BASEPRI, r7
 8005cd8:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005cda:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	485d      	ldr	r0, [pc, #372]	; (8005e58 <evt2_execute.lto_priv.112+0x2c8>)
 8005ce2:	3a01      	subs	r2, #1
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	4b5d      	ldr	r3, [pc, #372]	; (8005e5c <evt2_execute.lto_priv.112+0x2cc>)
 8005ce8:	f7fd fe1a 	bl	8003920 <chThdCreateStatic>
 8005cec:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8005cee:	f7fb fb9f 	bl	8001430 <chEvtWaitAny.constprop.40>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8005cf2:	f105 0132 	add.w	r1, r5, #50	; 0x32
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8005cf6:	f105 0237 	add.w	r2, r5, #55	; 0x37
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8005cfa:	4607      	mov	r7, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8005cfc:	b289      	uxth	r1, r1
 8005cfe:	b292      	uxth	r2, r2
 8005d00:	200a      	movs	r0, #10
 8005d02:	f7fc fb45 	bl	8002390 <_test_assert_time_window>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	f47f af5c 	bne.w	8005bc4 <evt2_execute.lto_priv.112+0x34>
  test_assert(11, m == 1, "single event error");
 8005d0c:	1e78      	subs	r0, r7, #1
 8005d0e:	4241      	negs	r1, r0
 8005d10:	4141      	adcs	r1, r0
 8005d12:	200b      	movs	r0, #11
 8005d14:	f7fc fb8c 	bl	8002430 <_test_assert>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	f47f af53 	bne.w	8005bc4 <evt2_execute.lto_priv.112+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005d1e:	f7fb fb57 	bl	80013d0 <chEvtGetAndClearEvents.constprop.45>
  test_assert(12, m == 0, "stuck event");
 8005d22:	fab0 f180 	clz	r1, r0
 8005d26:	200c      	movs	r0, #12
 8005d28:	0949      	lsrs	r1, r1, #5
 8005d2a:	f7fc fb81 	bl	8002430 <_test_assert>
 8005d2e:	4680      	mov	r8, r0
 8005d30:	2800      	cmp	r0, #0
 8005d32:	f47f af47 	bne.w	8005bc4 <evt2_execute.lto_priv.112+0x34>
  test_wait_threads();
 8005d36:	f7fc fafb 	bl	8002330 <test_wait_threads>
 8005d3a:	4d4a      	ldr	r5, [pc, #296]	; (8005e64 <evt2_execute.lto_priv.112+0x2d4>)
 8005d3c:	4b4a      	ldr	r3, [pc, #296]	; (8005e68 <evt2_execute.lto_priv.112+0x2d8>)
 8005d3e:	602d      	str	r5, [r5, #0]
 8005d40:	601b      	str	r3, [r3, #0]
 8005d42:	f04f 0b20 	mov.w	fp, #32
 8005d46:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8005d4a:	6829      	ldr	r1, [r5, #0]
 8005d4c:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005d50:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
 8005d52:	2701      	movs	r7, #1
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8005d54:	f84a 1d28 	str.w	r1, [sl, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8005d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8005d5c:	f8cd 8014 	str.w	r8, [sp, #20]
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005d60:	9203      	str	r2, [sp, #12]
  elp->el_events   = events;
 8005d62:	9704      	str	r7, [sp, #16]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8005d64:	f8c5 a000 	str.w	sl, [r5]
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8005d68:	9006      	str	r0, [sp, #24]
 8005d6a:	f388 8811 	msr	BASEPRI, r8
 8005d6e:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8005d72:	6819      	ldr	r1, [r3, #0]
 8005d74:	f10d 0930 	add.w	r9, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005d78:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
 8005d7a:	2704      	movs	r7, #4
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8005d7c:	f849 1d14 	str.w	r1, [r9, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8005d80:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  elp->el_wflags   = wflags;
 8005d84:	900b      	str	r0, [sp, #44]	; 0x2c
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005d86:	9208      	str	r2, [sp, #32]
  elp->el_events   = events;
 8005d88:	9709      	str	r7, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8005d8a:	f8c3 9000 	str.w	r9, [r3]
 8005d8e:	f388 8811 	msr	BASEPRI, r8
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 8005d92:	f7fc fabd 	bl	8002310 <test_wait_tick>
 8005d96:	f38b 8811 	msr	BASEPRI, fp
 8005d9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d9e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8005da0:	b2bf      	uxth	r7, r7
 8005da2:	f388 8811 	msr	BASEPRI, r8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005da6:	69a2      	ldr	r2, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005da8:	4b30      	ldr	r3, [pc, #192]	; (8005e6c <evt2_execute.lto_priv.112+0x2dc>)
 8005daa:	6892      	ldr	r2, [r2, #8]
 8005dac:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	3a01      	subs	r2, #1
 8005db4:	4b2e      	ldr	r3, [pc, #184]	; (8005e70 <evt2_execute.lto_priv.112+0x2e0>)
 8005db6:	4828      	ldr	r0, [pc, #160]	; (8005e58 <evt2_execute.lto_priv.112+0x2c8>)
 8005db8:	f7fd fdb2 	bl	8003920 <chThdCreateStatic>
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8005dbc:	f107 0832 	add.w	r8, r7, #50	; 0x32
 8005dc0:	fa1f f888 	uxth.w	r8, r8
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8005dc4:	69a4      	ldr	r4, [r4, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005dc6:	6030      	str	r0, [r6, #0]
 8005dc8:	f38b 8811 	msr	BASEPRI, fp

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8005dcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005dce:	f003 0205 	and.w	r2, r3, #5
 8005dd2:	2a05      	cmp	r2, #5
 8005dd4:	d005      	beq.n	8005de2 <evt2_execute.lto_priv.112+0x252>
    ctp->p_u.ewmask = events;
 8005dd6:	2305      	movs	r3, #5
 8005dd8:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8005dda:	200b      	movs	r0, #11
 8005ddc:	f7fd fde0 	bl	80039a0 <chSchGoSleepS>
 8005de0:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 8005de2:	f023 0305 	bic.w	r3, r3, #5
 8005de6:	6363      	str	r3, [r4, #52]	; 0x34
 8005de8:	2300      	movs	r3, #0
 8005dea:	f383 8811 	msr	BASEPRI, r3
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 8005dee:	f107 0237 	add.w	r2, r7, #55	; 0x37
 8005df2:	b292      	uxth	r2, r2
 8005df4:	4641      	mov	r1, r8
 8005df6:	200d      	movs	r0, #13
 8005df8:	f7fc faca 	bl	8002390 <_test_assert_time_window>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	f47f aee1 	bne.w	8005bc4 <evt2_execute.lto_priv.112+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8005e02:	f7fb fae5 	bl	80013d0 <chEvtGetAndClearEvents.constprop.45>
  test_assert(14, m == 0, "stuck event");
 8005e06:	fab0 f180 	clz	r1, r0
 8005e0a:	200e      	movs	r0, #14
 8005e0c:	0949      	lsrs	r1, r1, #5
 8005e0e:	f7fc fb0f 	bl	8002430 <_test_assert>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	f47f aed6 	bne.w	8005bc4 <evt2_execute.lto_priv.112+0x34>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
 8005e18:	4c13      	ldr	r4, [pc, #76]	; (8005e68 <evt2_execute.lto_priv.112+0x2d8>)
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
  m = chEvtGetAndClearEvents(ALL_EVENTS);
  test_assert(14, m == 0, "stuck event");
  test_wait_threads();
 8005e1a:	f7fc fa89 	bl	8002330 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 8005e1e:	4651      	mov	r1, sl
 8005e20:	4810      	ldr	r0, [pc, #64]	; (8005e64 <evt2_execute.lto_priv.112+0x2d4>)
 8005e22:	f7fd fc4d 	bl	80036c0 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 8005e26:	4649      	mov	r1, r9
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f7fd fc49 	bl	80036c0 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 8005e2e:	6829      	ldr	r1, [r5, #0]
 8005e30:	200f      	movs	r0, #15
 8005e32:	1b4a      	subs	r2, r1, r5
 8005e34:	4251      	negs	r1, r2
 8005e36:	4151      	adcs	r1, r2
 8005e38:	f7fc fafa 	bl	8002430 <_test_assert>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	f47f aec1 	bne.w	8005bc4 <evt2_execute.lto_priv.112+0x34>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 8005e42:	6821      	ldr	r1, [r4, #0]
 8005e44:	2010      	movs	r0, #16
 8005e46:	1b0b      	subs	r3, r1, r4
 8005e48:	4259      	negs	r1, r3
 8005e4a:	4159      	adcs	r1, r3
 8005e4c:	f7fc faf0 	bl	8002430 <_test_assert>
 8005e50:	e6b8      	b.n	8005bc4 <evt2_execute.lto_priv.112+0x34>
 8005e52:	bf00      	nop
 8005e54:	200011a0 	.word	0x200011a0
 8005e58:	20000928 	.word	0x20000928
 8005e5c:	08005ec1 	.word	0x08005ec1
 8005e60:	200012f4 	.word	0x200012f4
 8005e64:	200008b0 	.word	0x200008b0
 8005e68:	200008b4 	.word	0x200008b4
 8005e6c:	08006004 	.word	0x08006004
 8005e70:	08005e81 	.word	0x08005e81
	...

08005e80 <thread2>:

  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
}

static THD_FUNCTION(thread2, p) {
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	2520      	movs	r5, #32
 8005e84:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8005e88:	480b      	ldr	r0, [pc, #44]	; (8005eb8 <thread2+0x38>)
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	f7fd fe88 	bl	8003ba0 <chEvtBroadcastFlagsI>
 8005e90:	2400      	movs	r4, #0
  chSchRescheduleS();
 8005e92:	f7fd fccd 	bl	8003830 <chSchRescheduleS>
 8005e96:	f384 8811 	msr	BASEPRI, r4

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 8005e9a:	2032      	movs	r0, #50	; 0x32
 8005e9c:	f7fe f940 	bl	8004120 <chThdSleep>
 8005ea0:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8005ea4:	4805      	ldr	r0, [pc, #20]	; (8005ebc <thread2+0x3c>)
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	f7fd fe7a 	bl	8003ba0 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 8005eac:	f7fd fcc0 	bl	8003830 <chSchRescheduleS>
 8005eb0:	f384 8811 	msr	BASEPRI, r4
 8005eb4:	bd38      	pop	{r3, r4, r5, pc}
 8005eb6:	bf00      	nop
 8005eb8:	200008b0 	.word	0x200008b0
 8005ebc:	200008b4 	.word	0x200008b4

08005ec0 <thread1>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static THD_FUNCTION(thread1, p) {
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8005ec4:	2032      	movs	r0, #50	; 0x32
 8005ec6:	f7fe f92b 	bl	8004120 <chThdSleep>
 8005eca:	2320      	movs	r3, #32
 8005ecc:	f383 8811 	msr	BASEPRI, r3
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f7fd fe4c 	bl	8003b70 <chEvtSignalI>
  chSchRescheduleS();
 8005ed8:	f7fd fcaa 	bl	8003830 <chSchRescheduleS>
 8005edc:	2300      	movs	r3, #0
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	bd10      	pop	{r4, pc}
	...

08005ef0 <evt1_execute.lto_priv.110>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 8005ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef4:	4c32      	ldr	r4, [pc, #200]	; (8005fc0 <evt1_execute.lto_priv.110+0xd0>)
 8005ef6:	b08a      	sub	sp, #40	; 0x28
 8005ef8:	2020      	movs	r0, #32
 8005efa:	6024      	str	r4, [r4, #0]
 8005efc:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005f00:	4930      	ldr	r1, [pc, #192]	; (8005fc4 <evt1_execute.lto_priv.110+0xd4>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	ad0a      	add	r5, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005f06:	698e      	ldr	r6, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8005f08:	f845 3d28 	str.w	r3, [r5, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8005f0c:	2701      	movs	r7, #1
  elp->el_flags    = (eventflags_t)0;
 8005f0e:	2300      	movs	r3, #0
  elp->el_wflags   = wflags;
 8005f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005f14:	9601      	str	r6, [sp, #4]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8005f16:	6025      	str	r5, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 8005f18:	9702      	str	r7, [sp, #8]
  elp->el_flags    = (eventflags_t)0;
 8005f1a:	9303      	str	r3, [sp, #12]
  elp->el_wflags   = wflags;
 8005f1c:	9204      	str	r2, [sp, #16]
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f380 8811 	msr	BASEPRI, r0
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8005f26:	6820      	ldr	r0, [r4, #0]
 8005f28:	ae0a      	add	r6, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005f2a:	6989      	ldr	r1, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8005f2c:	f846 0d14 	str.w	r0, [r6, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8005f30:	f04f 0802 	mov.w	r8, #2
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005f34:	9106      	str	r1, [sp, #24]
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8005f36:	9308      	str	r3, [sp, #32]
  elp->el_wflags   = wflags;
 8005f38:	9209      	str	r2, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8005f3a:	6026      	str	r6, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 8005f3c:	f8cd 801c 	str.w	r8, [sp, #28]
 8005f40:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)(esp != (event_source_t *)esp->es_next);
 8005f44:	6821      	ldr	r1, [r4, #0]
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 8005f46:	4638      	mov	r0, r7
 8005f48:	1b09      	subs	r1, r1, r4
 8005f4a:	bf18      	it	ne
 8005f4c:	2101      	movne	r1, #1
 8005f4e:	f7fc fa6f 	bl	8002430 <_test_assert>
 8005f52:	b110      	cbz	r0, 8005f5a <evt1_execute.lto_priv.110+0x6a>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 8005f54:	b00a      	add	sp, #40	; 0x28
 8005f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f7fd fbaf 	bl	80036c0 <chEvtUnregister>
 8005f62:	6821      	ldr	r1, [r4, #0]
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 8005f64:	4640      	mov	r0, r8
 8005f66:	1b09      	subs	r1, r1, r4
 8005f68:	bf18      	it	ne
 8005f6a:	2101      	movne	r1, #1
 8005f6c:	f7fc fa60 	bl	8002430 <_test_assert>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	d1ef      	bne.n	8005f54 <evt1_execute.lto_priv.110+0x64>
  chEvtUnregister(&es1, &el2);
 8005f74:	4631      	mov	r1, r6
 8005f76:	4620      	mov	r0, r4
 8005f78:	f7fd fba2 	bl	80036c0 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 8005f7c:	6821      	ldr	r1, [r4, #0]
 8005f7e:	2003      	movs	r0, #3
 8005f80:	1b09      	subs	r1, r1, r4
 8005f82:	fab1 f181 	clz	r1, r1
 8005f86:	0949      	lsrs	r1, r1, #5
 8005f88:	f7fc fa52 	bl	8002430 <_test_assert>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d1e1      	bne.n	8005f54 <evt1_execute.lto_priv.110+0x64>
 8005f90:	4604      	mov	r4, r0
  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 8005f92:	4e0d      	ldr	r6, [pc, #52]	; (8005fc8 <evt1_execute.lto_priv.110+0xd8>)
 8005f94:	2507      	movs	r5, #7
 8005f96:	e001      	b.n	8005f9c <evt1_execute.lto_priv.110+0xac>
    }
    eid++;
 8005f98:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 8005f9a:	b165      	cbz	r5, 8005fb6 <evt1_execute.lto_priv.110+0xc6>
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8005f9c:	fa25 f304 	lsr.w	r3, r5, r4
 8005fa0:	07db      	lsls	r3, r3, #31
 8005fa2:	d5f9      	bpl.n	8005f98 <evt1_execute.lto_priv.110+0xa8>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8005fa4:	fa07 f304 	lsl.w	r3, r7, r4
      handlers[eid](eid);
 8005fa8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005fac:	4620      	mov	r0, r4

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8005fae:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 8005fb2:	4790      	blx	r2
 8005fb4:	e7f0      	b.n	8005f98 <evt1_execute.lto_priv.110+0xa8>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
 8005fb6:	4905      	ldr	r1, [pc, #20]	; (8005fcc <evt1_execute.lto_priv.110+0xdc>)
 8005fb8:	2004      	movs	r0, #4
 8005fba:	f7fc fa11 	bl	80023e0 <_test_assert_sequence>
 8005fbe:	e7c9      	b.n	8005f54 <evt1_execute.lto_priv.110+0x64>
 8005fc0:	200008b0 	.word	0x200008b0
 8005fc4:	200011a0 	.word	0x200011a0
 8005fc8:	08006dc0 	.word	0x08006dc0
 8005fcc:	08006c70 	.word	0x08006c70

08005fd0 <h3>:
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8005fd0:	2043      	movs	r0, #67	; 0x43
 8005fd2:	f7fc ba45 	b.w	8002460 <test_emit_token>
 8005fd6:	bf00      	nop
	...

08005fe0 <h2>:

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8005fe0:	2042      	movs	r0, #66	; 0x42
 8005fe2:	f7fc ba3d 	b.w	8002460 <test_emit_token>
 8005fe6:	bf00      	nop
	...

08005ff0 <h1>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8005ff0:	2041      	movs	r0, #65	; 0x41
 8005ff2:	f7fc ba35 	b.w	8002460 <test_emit_token>
 8005ff6:	bf00      	nop
	...
 8006000:	00000042 	.word	0x00000042
 8006004:	00000041 	.word	0x00000041
 8006008:	00000044 	.word	0x00000044
 800600c:	00000043 	.word	0x00000043
 8006010:	44434241 	.word	0x44434241
 8006014:	00000045 	.word	0x00000045
	...

08006020 <testmtx4>:
 8006020:	08006ae8 08000271 00000000 080002d1     .j..q...........

08006030 <testmtx8>:
 8006030:	08006a94 08002a81 00000000 08003181     .j...*.......1..

08006040 <testmtx7>:
 8006040:	08006aa8 08002ab1 00000000 08003331     .j...*......13..

08006050 <patternsys>:
 8006050:	08006100 08006160 08006170 00000000     .a..`a..pa......

08006060 <patternmsg>:
 8006060:	08006350 00000000 00000000 00000000     Pc..............

08006070 <patternbmk>:
 8006070:	080061c0 080061d0 080061e0 080061f0     .a...a...a...a..
 8006080:	08006200 08006210 08006220 08006230     .b...b.. b..0b..
 8006090:	08006240 08006180 08006190 080061a0     @b...a...a...a..
 80060a0:	080061b0 00000000 00000000 00000000     .a..............

080060b0 <ch_debug>:
 80060b0:	6e69616d 18441600 08440204 1814100c     main..D...D.....
 80060c0:	1e1d1c00 00000000 00000000 00000000     ................

080060d0 <patternevt>:
 80060d0:	080064a0 08006270 080060f0 00000000     .d..pb...`......

080060e0 <patterndyn>:
 80060e0:	080064d0 080062e0 080062f0 00000000     .d...b...b......

080060f0 <testevt3>:
 80060f0:	08006a10 08005b61 00000000 08005a01     .j..a[.......Z..

08006100 <testsys1>:
 8006100:	08006c2c 00000000 00000000 08004c21     ,l..........!L..

08006110 <vmt>:
 8006110:	08002811 080022b1 08002a31 080022d1     .(..."..1*..."..
 8006120:	08002a21 080022c1 08002801 080022a1     !*..."...(..."..

08006130 <testsem1>:
 8006130:	08006b80 080002c1 00000000 08000b51     .k..........Q...

08006140 <testsem2>:
 8006140:	08006b6c 080002b1 00000000 080009d1     lk..............

08006150 <testthd2>:
 8006150:	08006bc4 00000000 00000000 08000cc1     .k..............

08006160 <testsys2>:
 8006160:	08006c10 00000000 00000000 08004311     .l...........C..

08006170 <testsys3>:
 8006170:	08006bfc 00000000 00000000 08004b91     .k...........K..

08006180 <testbmk10>:
 8006180:	080067d8 00000000 00000000 08004441     .g..........AD..

08006190 <testbmk11>:
 8006190:	080067b4 080042e1 00000000 080043a1     .g...B.......C..

080061a0 <testbmk12>:
 80061a0:	08006794 080042d1 00000000 08004331     .g...B......1C..

080061b0 <testbmk13>:
 80061b0:	08006778 00000000 00000000 080010d1     xg..............

080061c0 <testbmk1>:
 80061c0:	08006900 00000000 00000000 08004b21     .i..........!K..

080061d0 <testbmk2>:
 80061d0:	080068e8 00000000 00000000 08004ab1     .h...........J..

080061e0 <testbmk3>:
 80061e0:	080068d0 00000000 00000000 080049d1     .h...........I..

080061f0 <testbmk4>:
 80061f0:	080068b4 00000000 00000000 08004891     .h...........H..

08006200 <testbmk5>:
 8006200:	08006894 00000000 00000000 08004821     .h..........!H..

08006210 <testbmk6>:
 8006210:	08006874 00000000 00000000 08004651     th..........QF..

08006220 <testbmk7>:
 8006220:	0800684c 08004301 00000000 080046f1     Lh...C.......F..

08006230 <testbmk8>:
 8006230:	08006820 00000000 00000000 08004571      h..........qE..

08006240 <testbmk9>:
 8006240:	080067fc 00000000 00000000 080044c1     .g...........D..

08006250 <patternmtx>:
 8006250:	08006c50 08006020 08006280 08006290     Pl.. `...b...b..
 8006260:	08006040 08006030 00000000 00000000     @`..0`..........

08006270 <testevt2>:
 8006270:	08006a24 08005b71 00000000 08005b91     $j..q[.......[..

08006280 <testmtx5>:
 8006280:	08006ad8 08000261 00000000 08003501     .j..a........5..

08006290 <testmtx6>:
 8006290:	08006ac0 08002ad1 00000000 08003421     .j...*......!4..

080062a0 <patterns>:
 80062a0:	08006050 080063f0 08006480 08006250     P`...c...d..Pb..
 80062b0:	08006060 08006430 080060d0 08006310     ``..0d...`...c..
 80062c0:	08006340 080060e0 08006320 08006070     @c...`.. c..p`..
	...

080062e0 <testdyn2>:
 80062e0:	08006970 08005041 00000000 080055d1     pi..AP.......U..

080062f0 <testdyn3>:
 80062f0:	08006948 08005011 00000000 080053d1     Hi...P.......S..

08006300 <testmbox1>:
 8006300:	08006a64 08002a41 00000000 08002af1     dj..A*.......*..

08006310 <patternheap>:
 8006310:	080064b0 00000000 00000000 00000000     .d..............

08006320 <patternqueues>:
 8006320:	08006410 08006420 00000000 00000000     .d.. d..........

08006330 <testpools1>:
 8006330:	080069cc 080050a1 00000000 08005501     .i...P.......U..

08006340 <patternpools>:
 8006340:	08006330 00000000 00000000 00000000     0c..............

08006350 <testmsg1>:
 8006350:	08006a84 00000000 00000000 080030e1     .j...........0..

08006360 <_stm32_dma_streams>:
 8006360:	40020000 40020008 00000001 00000000     ...@...@........
 8006370:	000b0000 40020000 4002001c 00000002     .......@...@....
 8006380:	00000000 000c0104 40020000 40020030     ...........@0..@
 8006390:	00000004 00000000 000d0208 40020000     ...............@
 80063a0:	40020044 00000008 00000000 000e030c     D..@............
 80063b0:	40020000 40020058 00000010 00000000     ...@X..@........
 80063c0:	000f0410 40020000 4002006c 00000020     .......@l..@ ...
 80063d0:	00000000 00100514 40020000 40020080     ...........@...@
 80063e0:	00000040 00000000 00110618 00000000     @...............

080063f0 <patternthd>:
 80063f0:	08006440 08006150 08006460 080064c0     @d..Pa..`d...d..
	...

08006410 <testqueues1>:
 8006410:	08006930 08004fe1 00000000 080050e1     0i...O.......P..

08006420 <testqueues2>:
 8006420:	08006918 08004fb1 00000000 08004d21     .i...O......!M..

08006430 <patternmbox>:
 8006430:	08006300 00000000 00000000 00000000     .c..............

08006440 <testthd1>:
 8006440:	08006be0 00000000 00000000 08000651     .k..........Q...

08006450 <testsem3>:
 8006450:	08006b4c 080002a1 00000000 08000921     Lk..........!...

08006460 <testthd3>:
 8006460:	08006ba8 00000000 00000000 08000ee1     .k..............

08006470 <testsem4>:
 8006470:	08006b28 00000000 00000000 080007c1     (k..............

08006480 <patternsem>:
 8006480:	08006130 08006140 08006450 08006470     0a..@a..Pd..pd..
	...

080064a0 <testevt1>:
 80064a0:	08006a40 08005b81 00000000 08005ef1     @j...[.......^..

080064b0 <testheap1>:
 80064b0:	080069e8 080059d1 00000000 08005791     .i...Y.......W..

080064c0 <testthd4>:
 80064c0:	08006b98 00000000 00000000 08000e11     .k..............

080064d0 <testdyn1>:
 80064d0:	080069a0 08005061 00000000 080056c1     .i..aP.......V..
 80064e0:	6e696c62 0072656b 202d2d2d 74737953     blinker.--- Syst
 80064f0:	203a6d65 00000000 74796220 00007365     em: .... bytes..
 8006500:	202d2d2d 65726854 203a6461 00000000     --- Thread: ....
 8006510:	202d2d2d 656d6954 203a2072 00000000     --- Timer : ....
 8006520:	202d2d2d 616d6553 203a6870 00000000     --- Semaph: ....
 8006530:	202d2d2d 6e657645 203a5374 00000000     --- EventS: ....
 8006540:	202d2d2d 6e657645 203a4c74 00000000     --- EventL: ....
 8006550:	202d2d2d 6574754d 203a2078 00000000     --- Mutex : ....
 8006560:	202d2d2d 646e6f43 203a2e56 00000000     --- CondV.: ....
 8006570:	202d2d2d 75657551 203a2065 00000000     --- Queue : ....
 8006580:	202d2d2d 6c69614d 203a2e42 00000000     --- MailB.: ....
 8006590:	202a2a2a 6e72654b 203a6c65 20202020     *** Kernel:     
 80065a0:	00002020 202a2a2a 706d6f43 64656c69       ..*** Compiled
 80065b0:	2020203a 00002020 202a2a2a 706d6f43     :     ..*** Comp
 80065c0:	72656c69 2020203a 00002020 202a2a2a     iler:     ..*** 
 80065d0:	68637241 63657469 65727574 0000203a     Architecture: ..
 80065e0:	202a2a2a 65726f43 72615620 746e6169     *** Core Variant
 80065f0:	0000203a 202a2a2a 74726f50 666e4920     : ..*** Port Inf
 8006600:	20203a6f 00002020 202a2a2a 74616c50     o:    ..*** Plat
 8006610:	6d726f66 2020203a 00002020 202a2a2a     form:     ..*** 
 8006620:	74736554 616f4220 203a6472 00002020     Test Board:   ..
 8006630:	202d2d2d 74736554 73614320 00002065     --- Test Case ..
 8006640:	00002820 202d2d2d 75736552 203a746c      (..--- Result: 
 8006650:	4c494146 20455255 00002328 00005b20     FAILURE (#.. [..
 8006660:	616e6946 6572206c 746c7573 0000203a     Final result: ..
 8006670:	656c6469 00000000 202a2a2a 62696843     idle....*** Chib
 8006680:	2f534f69 74205452 20747365 74697573     iOS/RT test suit
 8006690:	00000065 002a2a2a 00000029 0000295d     e...***.)...])..
 80066a0:	202d2d2d 75736552 203a746c 43435553     --- Result: SUCC
 80066b0:	00535345 4c494146 00455255 2e312e33     ESS.FAILURE.3.1.
 80066c0:	00000034 20766f4e 32203033 20363130     4...Nov 30 2016 
 80066d0:	3132202d 3a33353a 00003133 20434347     - 21:53:31..GCC 
 80066e0:	2e392e34 30322033 35303531 28203932     4.9.3 20150529 (
 80066f0:	72657270 61656c65 00296573 764d5241     prerelease).ARMv
 8006700:	004d2d37 74726f43 4d2d7865 00000033     7-M.Cortex-M3...
 8006710:	61766441 6465636e 72656b20 206c656e     Advanced kernel 
 8006720:	65646f6d 00000000 334d5453 30314632     mode....STM32F10
 8006730:	65502078 726f6672 636e616d 694c2065     x Performance Li
 8006740:	4d20656e 75696465 6544206d 7469736e     ne Medium Densit
 8006750:	00000079 694d5453 656f7263 7463656c     y...STMicroelect
 8006760:	696e6f72 4e207363 454c4355 31462d4f     ronics NUCLEO-F1
 8006770:	42523330 00000000 636e6542 72616d68     03RB....Benchmar
 8006780:	52202c6b 66204d41 70746f6f 746e6972     k, RAM footprint
 8006790:	00000000 636e6542 72616d68 6d202c6b     ....Benchmark, m
 80067a0:	78657475 6c207365 2f6b636f 6f6c6e75     utexes lock/unlo
 80067b0:	00006b63 636e6542 72616d68 73202c6b     ck..Benchmark, s
 80067c0:	70616d65 65726f68 61772073 732f7469     emaphores wait/s
 80067d0:	616e6769 0000006c 636e6542 72616d68     ignal...Benchmar
 80067e0:	76202c6b 75747269 74206c61 72656d69     k, virtual timer
 80067f0:	65732073 65722f74 00746573 636e6542     s set/reset.Benc
 8006800:	72616d68 49202c6b 51204f2f 65756575     hmark, I/O Queue
 8006810:	68742073 67756f72 74757068 00000000     s throughput....
 8006820:	636e6542 72616d68 72202c6b 646e756f     Benchmark, round
 8006830:	626f7220 63206e69 65746e6f 73207478      robin context s
 8006840:	63746977 676e6968 00000000 636e6542     witching....Benc
 8006850:	72616d68 6d202c6b 20737361 63736572     hmark, mass resc
 8006860:	75646568 202c656c 68742035 64616572     hedule, 5 thread
 8006870:	00000073 636e6542 72616d68 74202c6b     s...Benchmark, t
 8006880:	61657268 202c7364 61657263 6f206574     hreads, create o
 8006890:	00796c6e 636e6542 72616d68 74202c6b     nly.Benchmark, t
 80068a0:	61657268 202c7364 6c6c7566 63796320     hreads, full cyc
 80068b0:	0000656c 636e6542 72616d68 63202c6b     le..Benchmark, c
 80068c0:	65746e6f 73207478 63746977 00000068     ontext switch...
 80068d0:	636e6542 72616d68 6d202c6b 61737365     Benchmark, messa
 80068e0:	20736567 00003323 636e6542 72616d68     ges #3..Benchmar
 80068f0:	6d202c6b 61737365 20736567 00003223     k, messages #2..
 8006900:	636e6542 72616d68 6d202c6b 61737365     Benchmark, messa
 8006910:	20736567 00003123 75657551 202c7365     ges #1..Queues, 
 8006920:	7074756f 71207475 65756575 00000073     output queues...
 8006930:	75657551 202c7365 75706e69 75712074     Queues, input qu
 8006940:	73657565 00000000 616e7944 2063696d     eues....Dynamic 
 8006950:	73495041 6572202c 74736967 61207972     APIs, registry a
 8006960:	7220646e 72656665 65636e65 00000073     nd references...
 8006970:	616e7944 2063696d 73495041 6874202c     Dynamic APIs, th
 8006980:	64616572 72632073 69746165 66206e6f     reads creation f
 8006990:	206d6f72 6f6d656d 70207972 006c6f6f     rom memory pool.
 80069a0:	616e7944 2063696d 73495041 6874202c     Dynamic APIs, th
 80069b0:	64616572 72632073 69746165 66206e6f     reads creation f
 80069c0:	206d6f72 70616568 00000000 6f6d654d     rom heap....Memo
 80069d0:	50207972 736c6f6f 7571202c 2f657565     ry Pools, queue/
 80069e0:	75716564 00657565 70616548 6c61202c     dequeue.Heap, al
 80069f0:	61636f6c 6e6f6974 646e6120 61726620     location and fra
 8006a00:	6e656d67 69746174 74206e6f 00747365     gmentation test.
 8006a10:	6e657645 202c7374 656d6974 7374756f     Events, timeouts
 8006a20:	00000000 6e657645 202c7374 74696177     ....Events, wait
 8006a30:	646e6120 6f726220 61636461 00007473      and broadcast..
 8006a40:	6e657645 202c7374 69676572 61727473     Events, registra
 8006a50:	6e6f6974 646e6120 73696420 63746170     tion and dispatc
 8006a60:	00000068 6c69614d 65786f62 71202c73     h...Mailboxes, q
 8006a70:	69756575 6120676e 7420646e 6f656d69     ueuing and timeo
 8006a80:	00737475 7373654d 73656761 6f6c202c     uts.Messages, lo
 8006a90:	0000706f 646e6f43 2c726156 6f6f6220     op..CondVar, boo
 8006aa0:	74207473 00747365 646e6f43 2c726156     st test.CondVar,
 8006ab0:	6f726220 61636461 74207473 00747365      broadcast test.
 8006ac0:	646e6f43 2c726156 67697320 206c616e     CondVar, signal 
 8006ad0:	74736574 00000000 6574754d 2c736578     test....Mutexes,
 8006ae0:	61747320 00737574 6574754d 2c736578      status.Mutexes,
 8006af0:	69727020 7469726f 65722079 6e727574      priority return
 8006b00:	00000000 6574754d 2c736578 69727020     ....Mutexes, pri
 8006b10:	7469726f 6e652079 75657571 20676e69     ority enqueuing 
 8006b20:	74736574 00000000 616e6942 53207972     test....Binary S
 8006b30:	70616d65 65726f68 66202c73 74636e75     emaphores, funct
 8006b40:	616e6f69 7974696c 00000000 616d6553     ionality....Sema
 8006b50:	726f6870 202c7365 6d6f7461 73206369     phores, atomic s
 8006b60:	616e6769 61772d6c 00007469 616d6553     ignal-wait..Sema
 8006b70:	726f6870 202c7365 656d6974 0074756f     phores, timeout.
 8006b80:	616d6553 726f6870 202c7365 75716e65     Semaphores, enqu
 8006b90:	6e697565 00000067 65726854 2c736461     euing...Threads,
 8006ba0:	6c656420 00737961 65726854 2c736461      delays.Threads,
 8006bb0:	69727020 7469726f 68632079 65676e61      priority change
 8006bc0:	00000000 65726854 2c736461 716e6520     ....Threads, enq
 8006bd0:	69756575 7420676e 20747365 00003223     ueuing test #2..
 8006be0:	65726854 2c736461 716e6520 69756575     Threads, enqueui
 8006bf0:	7420676e 20747365 00003123 74737953     ng test #1..Syst
 8006c00:	202c6d65 65746e69 74697267 00000079     em, integrity...
 8006c10:	74737953 202c6d65 65746e69 70757272     System, interrup
 8006c20:	68207374 6c646e61 00676e69 74737953     ts handling.Syst
 8006c30:	202c6d65 74697263 6c616369 6e6f7a20     em, critical zon
 8006c40:	00007365 00000000 00000000 00000000     es..............

08006c50 <testmtx1>:
 8006c50:	08006b04 08000291 00000000 08000561     .k..........a...
 8006c60:	00000a0d 00000000 00000000 00000000     ................
 8006c70:	00434241 00000000 00000000 00000000     ABC.............

08006c80 <ram_areas>:
 8006c80:	08006e88 20001400 20001400 20001400     .n..... ... ... 
 8006c90:	08006e88 00000000 00000000 00000000     .n..............
 8006ca0:	08006e88 00000000 00000000 00000000     .n..............
 8006cb0:	08006e88 00000000 00000000 00000000     .n..............
 8006cc0:	08006e88 00000000 00000000 00000000     .n..............
 8006cd0:	08006e88 00000000 00000000 00000000     .n..............
 8006ce0:	08006e88 00000000 00000000 00000000     .n..............
 8006cf0:	08006e88 00000000 00000000 00000000     .n..............

08006d00 <wa>:
 8006d00:	20000928 20000a70 20000bb8 20000d00     (.. p.. ... ... 
 8006d10:	20000e48 00000000 00000000 00000000     H.. ............
 8006d20:	202d2d2d 726f6353 203a2065 00000000     --- Score : ....
 8006d30:	636f6c20 6e752b6b 6b636f6c 0000532f      lock+unlock/S..
 8006d40:	69617720 69732b74 6c616e67 0000532f      wait+signal/S..
 8006d50:	6d697420 2f737265 00000053 74796220      timers/S... byt
 8006d60:	532f7365 00000000 78746320 2f637773     es/S.... ctxswc/
 8006d70:	00000053 72687420 73646165 0000532f     S... threads/S..
 8006d80:	73657220 64656863 73656c75 202c532f      reschedules/S, 
 8006d90:	00000000 67736d20 2c532f73 00000020     .... msgs/S, ...
 8006da0:	44434241 00000000 00000000 00000000     ABCD............
 8006db0:	00004241 00000000 00000000 00000000     AB..............

08006dc0 <evhndl>:
 8006dc0:	08005ff1 08005fe1 08005fd1              ._..._..._..
